bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	replace
2	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	replace
3	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  DEFAULT_SECONDS  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_SECONDS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SECONDS	115	None	replace
4	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  DEFAULT_MEMBER_ITERATIONS  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MEMBER_ITERATIONS	115	None	replace
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
6	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
7	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	131	None	add
8	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	131	None	add
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	131	4	add
10	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	131	4	add
11	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
12	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
13	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	116	None	add
14	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	116	None	add
15	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	116	None	add
16	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	116	4	add
17	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	116	4	add
18	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	34	4	replace
19	[BUG]  [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	34	4	replace
20	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	34	4	replace
21	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	34	4	replace
22	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  this.epsilon  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sin(p);  this.epsilon  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  FunctionEvaluationException  	34	8	replace
23	[BUG]  [BUGGY]  epsilon  =  FastMath.sin(p);  this.epsilon  =  FastMath.sin(p);  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  this.epsilon  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sin(p);  this.epsilon  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  FunctionEvaluationException  	34	8	replace
24	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
25	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
26	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	105	None	add
27	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	105	None	add
28	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	105	None	add
29	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	105	None	add
30	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
31	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
32	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	4	add
33	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	compilable	  [FE]  MathRuntimeException$4  	15	4	add
34	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  This.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  This.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    This.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  This	15	None	add
35	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  int  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  int  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    int  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	15	None	add
36	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	68	1	replace
37	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	68	1	replace
38	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
39	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
40	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
41	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
42	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  int  epsilon  =  Math.max(mean,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  int  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    int  epsilon  =  Math.max(mean,  epsilon);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	add
43	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  setMaxIterations(maxIterations);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  setMaxIterations(maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  setMaxIterations(maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
44	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_EPSILON.doubleValue();	  epsilon    =    mean.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	111	None	replace
45	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    -=    DEFAULT_EPSILON;    this.epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	136	1	add
46	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  this.epsilon  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    this.epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	136	1	add
47	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  -=  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	136	None	add
48	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  -=  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	136	None	add
49	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	136	None	add
50	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  this.epsilon  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	136	None	add
51	[BUG]  [BUGGY]  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	This.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    This.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  This	85	None	replace
52	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    +    3;    this.epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
53	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  this.epsilon  =  epsilon  +  3;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    this.epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
54	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  3;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	72	None	add
55	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  3;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	72	None	add
56	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  3;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	72	None	add
57	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  3;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	72	None	add
58	[BUG]  [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  mean.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
59	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  -  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  -  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  -  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
60	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  normal.getMaxIterations()  *  1;	  int    maxIterations    =    normal.getMaxIterations()    -    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
61	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
62	[BUG]  [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
63	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  p  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  p  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
64	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  p  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  p  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  p  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
65	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
66	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
67	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	101	None	replace
68	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(normal);	  double    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
69	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(mean);	  double    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
70	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(message);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(message);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(message);	  double    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	replace
71	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	46	1	add
72	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	46	1	add
73	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	46	1	add
74	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	46	1	add
75	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  This.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  This.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    This.epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	46	None	add
76	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    int  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	46	None	add
77	[BUG]  [BUGGY]  epsilon  =  NormalDistributionImpl.DEFAULT_EPSILON;  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistributionImpl.DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistributionImpl.DEFAULT_EPSILON;	  epsilon    =    epsilon;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	40	None	replace
78	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    This.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	51	1	replace
79	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    This.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	51	1	replace
80	[BUG]  [BUGGY]  This.epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  This.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	This.epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    This.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
81	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
82	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
83	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	70	None	add
84	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	70	None	add
85	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	70	None	add
86	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	70	None	add
87	[BUG]  [BUGGY]  this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	104	None	replace
88	[BUG]  [BUGGY]  n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  n  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  n	104	None	replace
89	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	139	6	replace
90	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	139	6	replace
91	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.mean  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	139	6	replace
92	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.mean  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	139	6	replace
93	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  this.mean  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sin(p);  this.mean  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  FunctionEvaluationException  	139	10	replace
94	[BUG]  [BUGGY]  epsilon  =  FastMath.sin(p);  this.mean  =  FastMath.sin(p);  [FE]  FunctionEvaluationException  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  this.mean  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sin(p);  this.mean  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  FunctionEvaluationException  	139	10	replace
95	[BUG]  [BUGGY]  epsilon  =  Math.max(normal,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(normal,  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(normal,  epsilon,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)	109	None	replace
96	[BUG]  [BUGGY]  epsilon  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(normal,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double,int)	109	None	replace
97	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  normal,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  normal,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  normal,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,int)	109	None	replace
98	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    epsilon;    epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
99	[BUG]  [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
100	[BUG]  [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
101	[BUG]  [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
102	[BUG]  [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
103	[BUG]  [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  epsilon  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
104	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
105	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
106	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
107	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
108	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(normal).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(normal).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(normal).doubleValue();	  int    epsilon    =    FastMath.sqrt(normal).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	63	None	replace
109	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(mean).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(mean).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(mean).doubleValue();	  int    epsilon    =    FastMath.sqrt(normal).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	63	None	replace
110	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(normal).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  FastMath.sqrt(normal).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  FastMath.sqrt(normal).doubleValue();	  int    epsilon    =    FastMath.sqrt(normal).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	63	None	replace
111	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(mean,  maxIterations);	  int    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	78	None	replace
112	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    this.epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
113	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    this.epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
114	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	13	4	add
115	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  epsilon  =  epsilon  /  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	13	4	add
116	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  This.epsilon  =  epsilon  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  This.epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    This.epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	13	None	add
117	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  int  epsilon  =  epsilon  /  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON;  int  epsilon  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    int  epsilon  =  epsilon  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	add
118	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
119	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
120	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	102	None	add
121	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	102	None	add
122	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
123	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
124	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  /  1;	  this.epsilon    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
125	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  /  1;	  this.epsilon    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
126	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  /  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	1	replace
127	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  /  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	1	replace
128	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	4	replace
129	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    	compilable	  [FE]  MathRuntimeException$4  	16	4	replace
130	[BUG]  [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.getMaxIterations();  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  DEFAULT_EPSILON.getMaxIterations();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  DEFAULT_EPSILON.getMaxIterations();	  int    maxIterations    =    mean.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	119	None	replace
131	[BUG]  [BUGGY]  epsilon  =  normal.NO_EPSILON;  [CE]  cannot  find  symbol  NO_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.NO_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.NO_EPSILON;	  epsilon    =    NormalDistribution.NO_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  NO_EPSILON	96	None	replace
132	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NO_SECOND;  [CE]  cannot  find  symbol  NO_SECOND  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NO_SECOND;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NO_SECOND;	  epsilon    =    NormalDistribution.NO_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  NO_SECOND	96	None	replace
133	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  mean);	  epsilon    =    NormalDistribution.newInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
134	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    NormalDistribution.newInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
135	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  DEFAULT_EPSILON);	  epsilon    =    NormalDistribution.newInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
136	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(defULT_EPSILON,  mean);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(defULT_EPSILON,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(defULT_EPSILON,  mean);	  int    maxIterations    =    FastMath.sqrt(defULT_EPSILON);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	replace
137	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_MAX_ITERATIONS);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
138	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(normal,  maxIterations);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(normal,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(normal,  maxIterations);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
139	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  MAX_ITERATIONS);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(epsilon,  MAX_ITERATIONS);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
140	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_EPSILON);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(epsilon,  DEFAULT_EPSILON);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
141	[BUG]  [BUGGY]  epsilon  =  mean.newInstance();  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean.newInstance();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  mean.newInstance();	  epsilon    =    normal.newInstance();    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
142	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NaN.doubleValue();  [CE]  cannot  find  symbol  NaN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NaN.doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NaN.doubleValue();	  epsilon    =    NormalDistribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  NaN	60	None	replace
143	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
144	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
145	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
146	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
147	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	52	None	add
148	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
149	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	52	4	add
150	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  FastMath.sqrt(normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  FastMath.sqrt(normal);	  int    epsilon    =    FastMath.sqrt(normal);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	77	None	replace
151	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
152	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
153	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	125	None	add
154	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	125	None	add
155	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  int  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  int  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    int  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	125	None	add
156	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	125	None	add
157	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	128	None	replace
158	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);	  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	128	None	replace
159	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	128	None	replace
160	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  MAX_EPSILON);	  epsilon    =    Math.max(epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	69	None	replace
161	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
162	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
163	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
164	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
165	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
166	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT	  	non-compiled	[CE]  ';'  expected	80	None	add
167	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  mean;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  mean;	  double    epsilon    =    FastMath.sqrt(p);    this.mean    =    mean;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	56	None	replace
168	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [CE]  incompatible  types  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;	  double    epsilon    =    FastMath.sqrt(p);    this.mean    =    mean;    	non-compiled	[CE]  incompatible  types	56	None	replace
169	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	18	None	replace
170	[BUG]  [BUGGY]  double  epsilon  =  Math.max(normal,mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.max(normal,mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.max(normal,mean);	  int    epsilon    =    Math.max(normal,mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	43	None	replace
171	[BUG]  [BUGGY]  int  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	54	None	replace
172	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	54	None	replace
173	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
174	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
175	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
176	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
177	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  fastMath.sqrt(p);  [CE]  cannot  find  symbol  fastMath  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  fastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  fastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	33	None	add
178	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
179	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
180	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.epsilon    =    epsilon    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	5	None	replace
181	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.epsilon    =    epsilon    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	5	None	replace
182	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  -=  DEFAULT_MAX_ITERATIONS;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
183	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_MAX_ITERATIONS;  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  DEFAULT_MAX_ITERATIONS;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
184	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  -=  epsilon;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	137	1	replace
185	[BUG]  [BUGGY]  this.epsilon  -=  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  epsilon;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	137	1	replace
186	[BUG]  [BUGGY]  this.epsilon  -=  MAX_ITERATIONS;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  MAX_ITERATIONS;	  this.epsilon    -=    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	137	None	replace
187	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  -=  1;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
188	[BUG]  [BUGGY]  this.epsilon  -=  1;  [FE]  FunctionEvaluationException  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  1;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
189	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
190	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
191	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
192	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
193	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.message  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  message  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.message  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.message  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  message	138	None	add
194	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
195	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	138	6	add
196	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;	  int    epsilon    =    FastMath.sqrt(p);    this.mean    =    normal;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	59	None	replace
197	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(mean);  this.mean  =  normal;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(mean);  this.mean  =  normal;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(mean);  this.mean  =  normal;	  int    epsilon    =    FastMath.sqrt(p);    this.mean    =    normal;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	59	None	replace
198	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	123	1	replace
199	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	123	1	replace
200	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	123	None	replace
201	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	123	None	replace
202	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	114	4	replace
203	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	114	4	replace
204	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_MEAN;  [CE]  cannot  find  symbol  DEFAULT_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MEAN;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_MEAN;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MEAN	114	None	replace
205	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_SECONDS;  [CE]  cannot  find  symbol  DEFAULT_SECONDS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_SECONDS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_SECONDS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SECONDS	114	None	replace
206	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	replace
207	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
208	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
209	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	2	None	add
210	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	2	None	add
211	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	4	add
212	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	4	add
213	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.max(mean,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.max(mean,  mean);	  int    epsilon    =    Math.max(mean,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	44	None	replace
214	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.min(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.min(mean,  normal);	  int    epsilon    =    Math.max(mean,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	44	None	replace
215	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	82	1	add
216	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	82	1	add
217	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	82	1	add
218	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	82	1	add
219	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT	  	non-compiled	[CE]  ';'  expected	82	None	add
220	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	82	None	add
221	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	53	1	replace
222	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	53	1	replace
223	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	53	None	replace
224	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.epsilon    =    epsilon    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	replace
225	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  this.epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.epsilon    =    epsilon    +    1;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	replace
226	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;	  Integer    epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
227	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;	  Integer    epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
228	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	31	4	add
229	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	31	4	add
230	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	31	None	add
231	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  fastMath  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	31	None	add
232	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  Epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  Epsilon  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  Epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    Epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  Epsilon	31	None	add
233	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  mean));	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p));    	non-compiled	[CE]  ';'  expected	21	None	replace
234	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  normal));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  normal));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  normal));	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p));    	non-compiled	[CE]  ';'  expected	21	None	replace
235	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean));  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  mean));	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p));    	non-compiled	[CE]  ';'  expected	21	None	replace
236	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon));	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p));    	non-compiled	[CE]  ';'  expected	21	None	replace
237	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	48	1	add
238	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	48	1	add
239	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	48	1	add
240	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	48	1	add
241	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	48	None	add
242	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    int  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	add
243	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  message	37	None	replace
244	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	37	None	replace
245	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  [CE]  cannot  find  symbol  instance  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    NormalDistributionImpl.instance;    	non-compiled	[CE]  cannot  find  symbol  instance	91	None	replace
246	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    +    1;    this.epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
247	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  this.epsilon  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    this.epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
248	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	28	None	add
249	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	28	None	add
250	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	28	None	add
251	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON));  this.epsilon  =  DEFAULT_EPSILON  +  1;  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON));  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON));  this.epsilon  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  ';'  expected	28	None	add
252	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;	  epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	126	None	replace
253	[BUG]  [BUGGY]  n  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  cannot  find  symbol  n	126	None	replace
254	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
255	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
256	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0;  epsilon  =  0;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  0;  epsilon  =  0;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
257	[BUG]  [BUGGY]  this.epsilon  =  0;  epsilon  =  0;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0;  epsilon  =  0;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  0;  epsilon  =  0;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
258	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  normal.getMaxIterations()  *  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
259	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  normal.getMaxIterations()  /  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
260	[BUG]  [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  mean.getMaxIterations()  -  DEFAULT_EPSILON;	  int    maxIterations    =    normal.getMaxIterations()    -    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	120	None	replace
261	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    1;    this.epsilon  =  epsilon  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
262	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    this.epsilon  =  epsilon  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
263	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.epsilon  =  epsilon  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	74	None	add
264	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.epsilon  =  epsilon  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	74	None	add
265	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.epsilon  =  epsilon  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	74	None	add
266	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	74	None	add
267	[BUG]  [BUGGY]  n  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  cannot  find  symbol  n	32	None	replace
268	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
269	[BUG]  [BUGGY]  epsilon  =  FastMath.sin(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sin(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sin(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
270	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.max(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.max(mean,  maxIterations);	  double    epsilon    =    Math.max(mean,    normal);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	42	None	replace
271	[BUG]  [BUGGY]  double  epsilon  =  Math.min(mean,  normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.min(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.min(mean,  normal);	  double    epsilon    =    Math.max(mean,    normal);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	42	None	replace
272	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
273	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
274	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    int  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	67	None	add
275	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	4	add
276	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	4	add
277	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	67	None	add
278	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  *  epsilon  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
279	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  epsilon  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
280	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  3;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
281	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  3;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  3;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
282	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
283	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
284	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  FastMath.sqrt(p);	  long    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	replace
285	[BUG]  [BUGGY]  long  epsilon  =  FastMath.sqrt(normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  long  epsilon  =  FastMath.sqrt(normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	long  epsilon  =  FastMath.sqrt(normal);	  long    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	replace
286	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;	  int    epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	replace
287	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;	  int    epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	replace
288	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  +  mean;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	4	replace
289	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  +  mean;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	4	replace
290	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  +  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	1	replace
291	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	1	replace
292	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  /  epsilon;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	4	replace
293	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  /  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  /  epsilon;	  this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	106	4	replace
294	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  else  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  else  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
295	[BUG]  [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  else  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  else  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  else  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
296	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
297	[BUG]  [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
298	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
299	[BUG]  [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  DEFAULT_EPSILON)  {  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  }	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	81	1	replace
300	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
301	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
302	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
303	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
304	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	6	add
305	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	6	add
306	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	65	None	add
307	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  normal);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  normal);	  epsilon    =    Math.max(mean,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution)	134	None	replace
308	[BUG]  [BUGGY]  epsilon  =  Math.max(normal,  epsilon);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(normal,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(normal,  epsilon);	  epsilon    =    Math.max(mean,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double)	134	None	replace
309	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  normal);  [CE]  no  suitable  method  found  for  min(double,NormalDistribution)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(mean,  normal);	  epsilon    =    Math.max(mean,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,NormalDistribution)	134	None	replace
310	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(epsilon,  epsilon);	  epsilon    =    Math.max(mean,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
311	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  epsilon);	  epsilon    =    Math.max(mean,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
312	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(p).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  FastMath.sqrt(p).doubleValue();	  long    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	118	None	replace
313	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NEGATIVE_EPSILON;  [CE]  cannot  find  symbol  NEGATIVE_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NEGATIVE_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NEGATIVE_EPSILON;	  epsilon    =    mean;    	non-compiled	[CE]  cannot  find  symbol  NEGATIVE_EPSILON	95	None	replace
314	[BUG]  [BUGGY]  this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	replace
315	[BUG]  [BUGGY]  n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  n  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  epsilon  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
316	[BUG]  [BUGGY]  This.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  This.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	This.epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    This.epsilon    =    epsilon    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	130	None	replace
317	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  normal);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  normal);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  normal);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON	88	None	replace
318	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  mean);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  mean);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON	88	None	replace
319	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  mean);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  mean);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN	88	None	replace
320	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  epsilon);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  epsilon);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN	88	None	replace
321	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  maxIterations);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  maxIterations);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
322	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  mean);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  mean);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
323	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  epsilon);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  epsilon);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
324	[BUG]  [BUGGY]  int  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    int    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	84	None	replace
325	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  int  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  int  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  int  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    int    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	84	None	replace
326	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  DEFAULT_EPSILON  *  epsilon;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    int    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	84	None	replace
327	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    this.epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
328	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    this.epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
329	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
330	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
331	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    int  epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
332	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [CE]  not  a  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    int  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	non-compiled	[CE]  not  a  statement	11	None	add
333	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	11	None	add
334	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  +  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  +  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  +  1;	  int    maxIterations    =    epsilon.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
335	[BUG]  [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  epsilon.getMaxIterations()  *  DEFAULT_EPSILON;	  int    maxIterations    =    epsilon.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
336	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  mean);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  mean);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
337	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  mean);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  mean);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
338	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean,  normal);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(mean,  normal);	  epsilon    =    FastMath.sqrt(normal);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	8	None	replace
339	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(message,  normal);  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(message,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(message,  normal);	  epsilon    =    FastMath.sqrt(normal);    	non-compiled	[CE]  cannot  find  symbol  message	8	None	replace
340	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal,  mean);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal,  mean);	  epsilon    =    FastMath.sqrt(normal);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	8	None	replace
341	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	122	4	add
342	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	122	4	add
343	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	122	None	add
344	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	122	4	add
345	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	122	4	add
346	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  minIterations  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	122	None	add
347	[BUG]  [BUGGY]  epsilon  =  normal.mean;  [CE]  cannot  find  symbol  mean  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.mean;	  epsilon    =    normal.epsilon;    	non-compiled	[CE]  cannot  find  symbol  mean	41	None	replace
348	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_PESILON;  [CE]  cannot  find  symbol  DEFAULT_PESILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_PESILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_PESILON;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PESILON	113	None	replace
349	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	1	replace
350	[BUG]  [BUGGY]  epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  epsilon  +  1;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	1	replace
351	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	4	replace
352	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	4	replace
353	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  maxIterations);	  epsilon    =    NormalDistribution.newInstance(mean);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
354	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  p);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  p);	  epsilon    =    NormalDistribution.newInstance(mean);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
355	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
356	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
357	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  message  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  message	9	None	add
358	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(mean);	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
359	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(mean);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(mean);	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
360	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.message  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  message	9	None	add
361	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
362	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	9	4	add
363	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
364	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
365	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
366	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
367	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
368	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
369	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.maxIterations  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.maxIterations  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	94	None	add
370	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	94	6	add
371	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	94	6	add
372	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);  this.mean  =  mean;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);  this.mean  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);  this.mean  =  mean;	  epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	99	None	replace
373	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal,  p);  this.mean  =  mean;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal,  p);  this.mean  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal,  p);  this.mean  =  mean;	  epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	99	None	replace
374	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal,  MAX_ITERATIONS);  this.mean  =  mean;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal,  MAX_ITERATIONS);  this.mean  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal,  MAX_ITERATIONS);  this.mean  =  mean;	  epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	99	None	replace
375	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    int    epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
376	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_MAX_ITERATIONS;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    int    epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	50	None	replace
377	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	110	None	replace
378	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	110	None	replace
379	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	110	None	replace
380	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_SECONDS  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  DEFAULT_SECONDS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_SECONDS  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_SECONDS  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SECONDS	110	None	replace
381	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	36	1	replace
382	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	36	1	replace
383	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  epsilon;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  epsilon;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
384	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  DEFAULT_EPSILON;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
385	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  DEFAULT_EPSILON  +  1;	  epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	93	1	replace
386	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_EPSILON  +  1;	  epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	93	1	replace
387	[BUG]  [BUGGY]  long  epsilon  =  FastMath.sqrt(message);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  long  epsilon  =  FastMath.sqrt(message);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	long  epsilon  =  FastMath.sqrt(message);	  int    epsilon    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	replace
388	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  int    epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	replace
389	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(mean,  epsilon);	  int    maxIterations    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
390	[BUG]  [BUGGY]  epsilon  =  Math.min(normal,  epsilon);  [CE]  no  suitable  method  found  for  min(NormalDistribution,double)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(normal,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(normal,  epsilon);	  epsilon    =    Math.min(epsilon,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  min(NormalDistribution,double)	135	None	replace
391	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(mean,  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(mean,  epsilon,  maxIterations);	  epsilon    =    Math.min(epsilon,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	135	None	replace
392	[BUG]  [BUGGY]  epsilon  =  Math.min(NormalDistribution.MIN_EPSILON,  normal);  [CE]  cannot  find  symbol  MIN_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(NormalDistribution.MIN_EPSILON,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(NormalDistribution.MIN_EPSILON,  normal);	  epsilon    =    Math.min(epsilon,    normal);    	non-compiled	[CE]  cannot  find  symbol  MIN_EPSILON	135	None	replace
393	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  /  1;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
394	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  /  1;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
395	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  2;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
396	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  2;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
397	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  4;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
398	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  4;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  4;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
399	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  3;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
400	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  3;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  3;	  this.epsilon    =    epsilon    *    1;    	compilable	  [FE]  MathRuntimeException$4  	75	1	replace
401	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  normal,  DEFAULT_EPSILON);	  epsilon    =    NormalDistribution.newInstance(mean,    normal);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
402	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  epsilon);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  epsilon);	  epsilon    =    NormalDistribution.newInstance(mean,    normal);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
403	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  epsilon,  maxIterations);	  epsilon    =    Math.max(epsilon,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	108	None	replace
404	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
405	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
406	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
407	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
408	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    int  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	add
409	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	6	add
410	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	6	add
411	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
412	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
413	[BUG]  [BUGGY]  epsilon  =  Math.max(normal,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(NormalDistribution,double)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(normal,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(normal,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double)	66	None	replace
414	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  *  mean;	  this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
415	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  mean;	  this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
416	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(deFAULT_EPSILON,  normal);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(deFAULT_EPSILON,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(deFAULT_EPSILON,  normal);	  epsilon    =    NormalDistribution.newInstance(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	129	None	replace
417	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    NormalDistribution.newInstance(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
418	[BUG]  [BUGGY]  double  epsilon  =  Math.max(normal,  me);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  Math.max(normal,  me);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  Math.max(normal,  me);	  int    epsilon    =    Math.max(normal,    me);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	45	None	replace
419	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  norm);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(mean,  norm);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(mean,  norm);	  int    epsilon    =    Math.max(normal,    me);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	45	None	replace
420	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
421	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
422	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
423	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
424	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    int  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	35	None	add
425	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  minIterations;  [CE]  cannot  find  symbol  minIterations  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  minIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  minIterations;	  	non-compiled	[CE]  cannot  find  symbol  minIterations	35	None	add
426	[BUG]  [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  1;  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  normal.getMaxIterations()  /  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  normal.getMaxIterations()  /  1;	  int    maxIterations    =    normal.getMaxIterations()    +    1;    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	23	None	replace
427	[BUG]  [BUGGY]  Double  epsilon  =  FastMath.sqrt(normal).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Double  epsilon  =  FastMath.sqrt(normal).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Double  epsilon  =  FastMath.sqrt(normal).doubleValue();	  Double    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	64	None	replace
428	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;  [CE]  cannot  find  symbol  DEFAULT_MEMBER_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_MEMBER_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MEMBER_ITERATIONS	112	None	replace
429	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	37	None	replace
430	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.message  =  DEFAULT_EPSILON;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	37	None	replace
431	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  0;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	113	1	replace
432	[BUG]  [BUGGY]  this.epsilon  =  0;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  0;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	113	1	replace
433	[BUG]  [BUGGY]  epsilon  =  normal.message;  [CE]  cannot  find  symbol  message  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.message;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.message;	  epsilon    =    normal.epsilon;    	non-compiled	[CE]  cannot  find  symbol  message	41	None	replace
434	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIters);    	compilable	  [FE]  MathRuntimeException$4  	55	1	replace
435	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIters);    	compilable	  [FE]  MathRuntimeException$4  	55	1	replace
436	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  p  *  DEFAULT_EPSILON  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
437	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
438	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  +  4;	  this.epsilon    =    epsilon    +    1;    this.epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	3	4	replace
439	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  4;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  4;	  this.epsilon    =    epsilon    +    1;    this.epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	3	4	replace
440	[BUG]  [BUGGY]  epsilon  =  epsilon;  int  epsilon  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  int  epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    int  epsilon  =  epsilon;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	39	None	add
441	[BUG]  [BUGGY]  epsilon  =  epsilon;  Epsilon  =  epsilon;  [CE]  cannot  find  symbol  Epsilon  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  Epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    Epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  Epsilon	39	None	add
442	[BUG]  [BUGGY]  epsilon  =  epsilon;  epsilon  =  enpsilon;  [CE]  cannot  find  symbol  enpsilon  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  enpsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    epsilon  =  enpsilon;	  	non-compiled	[CE]  cannot  find  symbol  enpsilon	39	None	add
443	[BUG]  [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  epsilon  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	94	None	add
444	[BUG]  [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  epsilon  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	94	None	add
445	[BUG]  [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  mean;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  epsilon  =  mean;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	94	None	add
446	[BUG]  [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	94	None	add
447	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  ((  NormalDistribution)normal).epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  epsilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  ((  NormalDistribution)normal).epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    ((  NormalDistribution)normal).epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  epsilon	92	None	add
448	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.mean  =  FastMath.sqrt(p);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal);  this.mean  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	139	None	replace
449	[BUG]  [BUGGY]  n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  cannot  find  symbol  n	36	None	replace
450	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.min(maxIterations,  epsilon);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	68	1	replace
451	[BUG]  [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(maxIterations,  epsilon);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	68	1	replace
452	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  epsilon);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  normal,  epsilon);	  epsilon    =    NormalDistribution.newInstance(mean,    normal);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
453	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  normal,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  normal,  maxIterations);	  epsilon    =    NormalDistribution.newInstance(mean,    normal);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
454	[BUG]  [BUGGY]  epsilon  =  normal.newInstance(Math.abs(epsilon));  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.newInstance(Math.abs(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.newInstance(Math.abs(epsilon));	  epsilon    =    normal.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
455	[BUG]  [BUGGY]  epsilon  =  normal.newInstance(Math.abs(epsilon),  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.newInstance(Math.abs(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.newInstance(Math.abs(epsilon),  maxIterations);	  epsilon    =    normal.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
456	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	136	None	add
457	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.message  =  epsilon;  [CE]  cannot  find  symbol  message  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.message  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    epsilon  =  FastMath.sqrt(p);  this.message  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  message	125	None	add
458	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.mesan  =  epsilon;  [CE]  cannot  find  symbol  mesan  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.mesan  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    epsilon  =  FastMath.sqrt(p);  this.mesan  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  mesan	125	None	add
459	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.dean  =  epsilon;  [CE]  cannot  find  symbol  dean  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  epsilon  =  FastMath.sqrt(p);  this.dean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    epsilon  =  FastMath.sqrt(p);  this.dean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  dean	125	None	add
460	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	110	None	replace
461	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NO_EPSILON  +  mean;  [CE]  cannot  find  symbol  NO_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NO_EPSILON  +  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NO_EPSILON  +  mean;	  epsilon    =    NormalDistribution.NO_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  NO_EPSILON	96	None	replace
462	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  normal);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(mean,  normal);	  int    maxIterations    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
463	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
464	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	33	4	add
465	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    This.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	116	None	add
466	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	116	None	add
467	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	116	None	add
468	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_ELEM,  normal);  [CE]  cannot  find  symbol  NOT_ELEM  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_ELEM,  normal);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_ELEM,  normal);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    normal);    	non-compiled	[CE]  cannot  find  symbol  NOT_ELEM	89	None	replace
469	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0  *  DEFAULT_EPSILON;  epsilon  =  0  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  0  *  DEFAULT_EPSILON;  epsilon  =  0  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
470	[BUG]  [BUGGY]  this.epsilon  =  0  *  DEFAULT_EPSILON;  epsilon  =  0  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  0  *  DEFAULT_EPSILON;  epsilon  =  0  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  0  *  DEFAULT_EPSILON;  epsilon  =  0  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	1	replace
471	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	82	None	add
472	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAUL  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAUL  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAUL	  	non-compiled	[CE]  ';'  expected	82	None	add
473	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  mean);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  mean);	  epsilon    =    NormalDistribution.newInstance(mean);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
474	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	123	None	replace
475	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	72	None	add
476	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  normal);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  normal);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
477	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	66	None	replace
478	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon;  epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
479	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon;  epsilon  =  DEFAULT_EPSILON;	  this.epsilon    =    DEFAULT_EPSILON;    epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	49	1	replace
480	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	52	None	add
481	[BUG]  [BUGGY]  n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.epsilon  =  normal.sqrt(p);  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.epsilon  =  normal.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  FastMath.sqrt(p);  n  =  FastMath.sqrt(p);  this.epsilon  =  normal.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    fastMath.sqrt(p);    	non-compiled	[CE]  cannot  find  symbol  n	90	None	replace
482	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  FastMath.sqrt(p);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    fastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	90	None	replace
483	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  normal);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  normal);	  epsilon    =    NormalDistribution.newInstance(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
484	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.mean  =  epsilon;	  epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	126	6	replace
485	[BUG]  [BUGGY]  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.mean  =  epsilon;	  epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	126	6	replace
486	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  }	  epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
487	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	replace
488	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(mean,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	109	1	replace
489	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  maxIterations);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	109	1	replace
490	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
491	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  This.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  This.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    This.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	102	None	add
492	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
493	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	102	4	add
494	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON  *  1;	  this.epsilon    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
495	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON  *  1;	  this.epsilon    =    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
496	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
497	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
498	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  MathRuntimeException  epsilon  =  Math.max(mean,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  MathRuntimeException  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    MathRuntimeException  epsilon  =  Math.max(mean,  epsilon);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	133	None	add
499	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  epsilon,  normal);  [CE]  no  suitable  method  found  for  min(double,double,NormalDistribution)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(mean,  epsilon,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(mean,  epsilon,  normal);	  epsilon    =    Math.min(epsilon,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,NormalDistribution)	135	None	replace
500	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  -=  DEFAULT_EPSILON  +  1;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
501	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  1;  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  DEFAULT_EPSILON  +  1;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
502	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  -=  DEFAULT_EPSILON  +  mean;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
503	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  mean;  [FE]  FunctionEvaluationException  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  DEFAULT_EPSILON  +  mean;	  this.epsilon    -=    DEFAULT_EPSILON;    	compilable	  [FE]  FunctionEvaluationException  	137	8	replace
504	[BUG]  [BUGGY]  this.epsilon  -=  normal;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  normal;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  -=  normal;	  this.epsilon    -=    DEFAULT_EPSILON;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	137	None	replace
505	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  This.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  This.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        epsilon    =    DEFAULT_EPSILON;    This.epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	48	None	add
506	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  MathRuntimeException  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  MathRuntimeException  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    MathRuntimeException  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	122	None	add
507	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  maxIters  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	122	None	add
508	[BUG]  [BUGGY]  Double  epsilon  =  FastMath.sqrt(period).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Double  epsilon  =  FastMath.sqrt(period).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Double  epsilon  =  FastMath.sqrt(period).doubleValue();	  Double    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	64	None	replace
509	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(message);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  FastMath.sqrt(message);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  FastMath.sqrt(message);	  int    epsilon    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	79	None	replace
510	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON	88	None	replace
511	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p,  mean);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p,  mean);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON,  p,  mean);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON	88	None	replace
512	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	74	None	add
513	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  int  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  int  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    int  epsilon  =  FastMath.sqrt(mean);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	9	None	add
514	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  fastMath.sqrt(mean);  [CE]  cannot  find  symbol  fastMath  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  fastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  fastMath.sqrt(mean);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	9	None	add
515	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  Epsilon  =  FastMath.sqrt(mean);  [CE]  cannot  find  symbol  Epsilon  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  Epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    Epsilon  =  FastMath.sqrt(mean);	  	non-compiled	[CE]  cannot  find  symbol  Epsilon	9	None	add
516	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  mean;	  this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	14	4	replace
517	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  mean;	  this.epsilon    =    epsilon    /    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	14	4	replace
518	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(property);  [CE]  cannot  find  symbol  property  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(property);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(property);	  epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  cannot  find  symbol  property	10	None	replace
519	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
520	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  3;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
521	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
522	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  4;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  4;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  4;	  	compilable	  [FE]  MathRuntimeException$4  	131	1	add
523	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SYNTHETIC_POISSON_MEAN,  p);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_SYNTHETIC_POISSON_MEAN	18	None	replace
524	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(period).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(period).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(period).doubleValue();	  double    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	replace
525	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon,  normal);  [CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  epsilon,  normal);	  epsilon    =    Math.max(epsilon,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)	108	None	replace
526	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mesan  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  mesan  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mesan  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mesan  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  mesan	138	None	add
527	[BUG]  [BUGGY]  int  maxIterations  =  NormalDistribution.getMaxIterations();  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  NormalDistribution.getMaxIterations();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  NormalDistribution.getMaxIterations();	  int    maxIterations    =    mean.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	119	None	replace
528	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(message).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(message).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(message).doubleValue();	  int    epsilon    =    FastMath.sqrt(normal).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	63	None	replace
529	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
530	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  epsilon  =  DEFAULT_EPSILON  +  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
531	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  int  epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  int  epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    int  epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	105	None	add
532	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	105	None	add
533	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	105	None	add
534	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	2	None	add
535	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
536	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
537	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  Epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Epsilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  Epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    Epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Epsilon	65	None	add
538	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
539	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
540	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  DEFAULT_EPSILON  +  mean;	  epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	93	1	replace
541	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  mean;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON  +  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_EPSILON  +  mean;	  epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	93	1	replace
542	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  2;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	4	replace
543	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  2;  epsilon  =  epsilon  +  2;	  this.epsilon    =    epsilon    +    1;    epsilon    =    epsilon    +    1;    	compilable	  [FE]  MathRuntimeException$4  	103	4	replace
544	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p,  normal);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    NormalDistributionImpl.instance;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	91	None	replace
545	[BUG]  [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  normal.doubleValue();  this.epsilon  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    DEFAULT_EPSILON;    this.epsilon  =  DEFAULT_EPSILON;  int  epsilon  =  normal.doubleValue();  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        DEFAULT_EPSILON;        this.epsilon    =    DEFAULT_EPSILON;    int  epsilon  =  normal.doubleValue();  this.epsilon  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	46	None	add
546	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON_MEAN;  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON_MEAN;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_EPSILON_MEAN;	  this.epsilon    =    epsilon    *    DEFAULT_MAX_ITERATIONS;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	16	None	replace
547	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  2;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	104	None	replace
548	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	104	None	replace
549	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  this.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON  +  1);  this.epsilon  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	28	None	add
550	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(normal);  this.mean  =  DEFAULT_EPSILON;	  int    epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	replace
551	[BUG]  [BUGGY]  float  maxIterations  =  FastMath.sqrt(message);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  maxIterations  =  FastMath.sqrt(message);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  maxIterations  =  FastMath.sqrt(message);	  int    maxIterations    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	30	None	replace
552	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal);  epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	32	None	replace
553	[BUG]  [BUGGY]  n  =  FastMath.sqrt(normal);  n  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  n  =  FastMath.sqrt(normal);  n  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	n  =  FastMath.sqrt(normal);  n  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  cannot  find  symbol  n	32	None	replace
554	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(normal,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(normal,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(normal,  epsilon);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
555	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  maxIterations);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(mean,  maxIterations);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
556	[BUG]  [BUGGY]  long  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  long  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	long  epsilon  =  FastMath.sqrt(mean);	  int    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	78	None	replace
557	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  int  epsilon  =  p  *  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  int  epsilon  =  p  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON;  int  epsilon  =  p  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    int    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	84	None	replace
558	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  fastMath  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    epsilon  =  fastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  cannot  find  symbol  fastMath	35	None	add
559	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(peer);  [CE]  cannot  find  symbol  peer  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(peer);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(peer);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  cannot  find  symbol  peer	34	None	replace
560	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
561	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
562	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal),  epsilon);  [CE]  no  suitable  method  found  for  abs(NormalDistribution)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(normal),  epsilon);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  no  suitable  method  found  for  abs(NormalDistribution)	107	None	replace
563	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  epsilon);  [CE]  no  suitable  method  found  for  abs(NormalDistribution,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  epsilon);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  no  suitable  method  found  for  abs(NormalDistribution,double)	107	None	replace
564	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(epsilon),  normal,  DEFAULT_EPSILON);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
565	[BUG]  [BUGGY]  Integer  epsilon  =  FastMath.sqrt(peer);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Integer  epsilon  =  FastMath.sqrt(peer);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Integer  epsilon  =  FastMath.sqrt(peer);  this.mean  =  epsilon;	  Integer    epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	100	None	replace
566	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
567	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  this.epsilon  =  epsilon  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	2	1	add
568	[BUG]  [BUGGY]  double  epsilon  =  FastMath.sqrt(mean).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  double  epsilon  =  FastMath.sqrt(mean).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	double  epsilon  =  FastMath.sqrt(mean).doubleValue();	  double    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	replace
569	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
570	[BUG]  [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  /  DEFAULT_EPSILON  +  1;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    	compilable	  [FE]  MathRuntimeException$4  	117	4	replace
571	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  This.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  epsilon;  This.epsilon  =  DEFAULT_EPSILON  +  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    epsilon;    This.epsilon  =  DEFAULT_EPSILON  +  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  This	105	None	add
572	[BUG]  [BUGGY]  epsilon  =  epsilon.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon.doubleValue()  +  1;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  epsilon.doubleValue()  +  1;	  epsilon    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	61	None	replace
573	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
574	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    epsilon;    epsilon  =  epsilon;  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
575	[BUG]  [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.epsilon  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    epsilon  =  epsilon;  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
576	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    epsilon;    epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
577	[BUG]  [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
578	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    epsilon;    epsilon  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	6	add
579	[BUG]  [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    epsilon;    epsilon  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	39	6	add
580	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    1;    epsilon  =  epsilon  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
581	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  epsilon  =  epsilon  *  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    epsilon  =  epsilon  *  1;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
582	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    1;    this.epsilon  =  epsilon  *  2;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
583	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  2;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  this.epsilon  =  epsilon  *  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    this.epsilon  =  epsilon  *  2;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
584	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  1;  This.epsilon  =  epsilon  *  1;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  1;  This.epsilon  =  epsilon  *  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    1;    This.epsilon  =  epsilon  *  1;	  	non-compiled	[CE]  cannot  find  symbol  This	74	None	add
585	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	113	1	replace
586	[BUG]  [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_MAX_ITERATIONS;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.epsilon    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	113	1	replace
587	[BUG]  [BUGGY]  if(epsilon  <  =  FastMath.sqrt(p))  {  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  FastMath.sqrt(p))  {  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  FastMath.sqrt(p))  {  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  NormalDistributionImpl.instance;  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    NormalDistributionImpl.instance;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
588	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  NormalDistributionImpl.instance;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  NormalDistributionImpl.instance;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p,  normal);  this.epsilon  =  NormalDistributionImpl.instance;	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    NormalDistributionImpl.instance;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	91	None	replace
589	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(defULT_MAX_ITERATIONS);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(defULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(defULT_MAX_ITERATIONS);	  int    maxIterations    =    FastMath.sqrt(defULT_EPSILON);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	replace
590	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsileon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  epsileon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsileon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  epsilon  =  epsileon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  epsileon	82	None	add
591	[BUG]  [BUGGY]  epsilon  =  normal.newInstance(DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  normal.newInstance(DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  normal.newInstance(DEFAULT_EPSILON);	  epsilon    =    normal.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
592	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(mean,  MAX_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(mean,  MAX_EPSILON);	  epsilon    =    NormalDistribution.newInstance(mean);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	86	None	replace
593	[BUG]  [BUGGY]  Double  epsilon  =  FastMath.sqrt(mean).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  Double  epsilon  =  FastMath.sqrt(mean).doubleValue();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	Double  epsilon  =  FastMath.sqrt(mean).doubleValue();	  Double    epsilon    =    FastMath.sqrt(p).doubleValue();    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	64	None	replace
594	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
595	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
596	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NOT_EPSILON;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NOT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NOT_EPSILON;	  epsilon    =    NormalDistribution.NO_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	96	None	replace
597	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
598	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
599	[BUG]  [BUGGY]  int  epsilon  =  normal  *  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  normal  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  normal  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    int    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	84	None	replace
600	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
601	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    DEFAULT_EPSILON;    epsilon  =  DEFAULT_EPSILON;  this.epsilon  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	92	1	add
602	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  normal);  [CE]  no  suitable  method  found  for  abs(NormalDistribution,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  normal);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  no  suitable  method  found  for  abs(NormalDistribution,double)	107	None	replace
603	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  abs(NormalDistribution,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(Math.abs(normal,  epsilon),  DEFAULT_EPSILON);	  epsilon    =    NormalDistribution.newInstance(Math.abs(epsilon),    normal);    	non-compiled	[CE]  no  suitable  method  found  for  abs(NormalDistribution,double)	107	None	replace
604	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.epsilon  =  Math.max(mean,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
605	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.epsilon  =  Math.max(mean,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  epsilon  =  Math.max(mean,  epsilon);  this.epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(mean,    epsilon);    epsilon  =  Math.max(mean,  epsilon);  this.epsilon  =  Math.max(mean,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	133	4	add
606	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  psilon	33	None	add
607	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(message,  normal);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(message,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(message,  normal);	  int    maxIterations    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	30	None	replace
608	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  epsilon,  maxIterations);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(mean,  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(mean,  epsilon,  maxIterations);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
609	[BUG]  [BUGGY]  int  maxIterations  =  FastMath.sqrt(p,  epsilon,  maxIterations);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  FastMath.sqrt(p,  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  FastMath.sqrt(p,  epsilon,  maxIterations);	  int    maxIterations    =    FastMath.sqrt(epsilon,    maxIterations);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
610	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  FastMath.sqrt(p);  this.mean  =  normal;	  int    epsilon    =    FastMath.sqrt(p);    this.mean    =    normal;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	59	None	replace
611	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  this.epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
612	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  this.epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
613	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	6	add
614	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	67	6	add
615	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  message	67	None	add
616	[BUG]  [BUGGY]  boolean  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  boolean  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	boolean  epsilon  =  FastMath.sqrt(normal);  this.mean  =  epsilon;	  int    epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	replace
617	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	37	4	replace
618	[BUG]  [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.message    =    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	37	4	replace
619	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
620	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
621	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  MAX_ITERATIONS;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  MAX_ITERATIONS;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  DEFAULT_EPSILON;  this.maxIterations  =  MAX_ITERATIONS;	  	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	94	None	add
622	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
623	[BUG]  [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  mean;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  mean;  epsilon  =  mean;  this.epsilon  =  mean;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    mean;    epsilon  =  mean;  this.epsilon  =  mean;	  	compilable	  [FE]  MathRuntimeException$4  	94	4	add
624	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
625	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
626	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal,  DEFAULT_EPSILON);	  epsilon    =    FastMath.sqrt(normal);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	8	None	replace
627	[BUG]  [BUGGY]  epsilon  =  Math.min(NormalDistribution.NEGATIVE_POISSON_MEAN,  normal);  [CE]  cannot  find  symbol  NEGATIVE_POISSON_MEAN  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.min(NormalDistribution.NEGATIVE_POISSON_MEAN,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.min(NormalDistribution.NEGATIVE_POISSON_MEAN,  normal);	  epsilon    =    Math.min(epsilon,    normal);    	non-compiled	[CE]  cannot  find  symbol  NEGATIVE_POISSON_MEAN	135	None	replace
628	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  MathRuntimeException  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  MathRuntimeException  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    MathRuntimeException  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	138	None	add
629	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  psilon  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.mean    =    FastMath.sqrt(p);    psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  psilon	138	None	add
630	[BUG]  [BUGGY]  float  epsilon  =  Math.max(normal,mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  Math.max(normal,mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  Math.max(normal,mean);	  int    epsilon    =    Math.max(normal,mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	43	None	replace
631	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  normal);  [CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  normal);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  normal);	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTED_POISSON_MEAN	88	None	replace
632	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  mean);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(normal,  mean);	  epsilon    =    NormalDistribution.newInstance(mean,    normal);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
633	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  fastMath.sqrt(mean);  [CE]  cannot  find  symbol  fastMath  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  fastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  fastMath.sqrt(mean);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	9	None	add
634	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(dean);  [CE]  cannot  find  symbol  dean  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(mean);  epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(dean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(mean);    epsilon  =  FastMath.sqrt(mean);  this.epsilon  =  FastMath.sqrt(dean);	  	non-compiled	[CE]  cannot  find  symbol  dean	9	None	add
635	[BUG]  [BUGGY]  epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	replace
636	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EXPRESSION;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  DEFAULT_EXPRESSION  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EXPRESSION;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EXPRESSION;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EXPRESSION	115	None	replace
637	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(DEFAULT_EPSILON,  MAX_ITERATIONS);	  epsilon    =    NormalDistribution.newInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	141	None	replace
638	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  3;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  this.epsilon    =    epsilon    +    1;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	101	None	replace
639	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EXPRESSION;  [CE]  cannot  find  symbol  DEFAULT_EXPRESSION  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EXPRESSION;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EXPRESSION;	  this.epsilon    =    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.epsilon    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EXPRESSION	112	None	replace
640	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  >  maxIterations)  {  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	if(epsilon  >  maxIterations)  {  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  }	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	123	1	replace
641	[BUG]  [BUGGY]  if(epsilon  >  maxIterations)  {  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  }  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(epsilon  >  maxIterations)  {  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(epsilon  >  maxIterations)  {  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  }	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	123	1	replace
642	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
643	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.epsilon  =  FastMath.sqrt(p);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(normal);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(normal);  this.epsilon  =  FastMath.sqrt(p);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	34	None	replace
644	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }  else  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }  else  {  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	if(mean  <  =  0)  {  epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p);  }  else  {	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
645	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
646	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    this.maxIterations    =    maxIterations;    this.epsilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	35	4	add
647	[BUG]  [BUGGY]  epsilon  =  Math.max(message,  normal,  maxIterations);  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(message,  normal,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(message,  normal,  maxIterations);	  epsilon    =    Math.max(normal,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  message	109	None	replace
648	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    This.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	80	None	add
649	[BUG]  [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsileon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  epsileon  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsileon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        *        DEFAULT_EPSILON;        this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  this.epsilon  =  epsileon  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  epsileon	80	None	add
650	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_PESILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  DEFAULT_PESILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_PESILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_PESILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PESILON	83	None	replace
651	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
652	[BUG]  [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  p  *  DEFAULT_EPSILON;  epsilon  =  epsilon  *  DEFAULT_EPSILON;	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    epsilon    =    epsilon    *    DEFAULT_EPSILON;    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
653	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  -=  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  int  DEFAULT_EPSILON  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    int  DEFAULT_EPSILON  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  ';'  expected	136	None	add
654	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	136	1	add
655	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    epsilon  -=  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	136	1	add
656	[BUG]  [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  This.epsilon  -=  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  -=  DEFAULT_EPSILON;  This.epsilon  -=  DEFAULT_EPSILON;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    -=    DEFAULT_EPSILON;    This.epsilon  -=  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	136	None	add
657	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
658	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  1;  this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    *    DEFAULT_EPSILON    +    1;    this.epsilon  =  epsilon  *  DEFAULT_EPSILON  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
659	[BUG]  [BUGGY]  int  epsilon  =  FastMath.sqrt(mean,  normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  epsilon  =  FastMath.sqrt(mean,  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  epsilon  =  FastMath.sqrt(mean,  normal);	  int    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	78	None	replace
660	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  This.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  This.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    This.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  This	70	None	add
661	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  2;  int  epsilon  =  epsilon  +  2;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  2;  int  epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    2;    int  epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	70	None	add
662	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.mean  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    this.mean  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
663	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.mean  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.mean  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    this.mean  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
664	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
665	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    FastMath.sqrt(p);    this.mean    =    epsilon;    this.epsilon  =  FastMath.sqrt(p);  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	125	6	add
666	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
667	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	65	1	add
668	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  This.epsilon  =  DEFAULT_EPSILON  +  1;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  This.epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    This.epsilon  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	28	None	add
669	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    DEFAULT_EPSILON    +    1;    epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	28	4	add
670	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  epsilon  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    epsilon  =  DEFAULT_EPSILON  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	28	4	add
671	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  +  1;  [CE]  variable  DEFAULT_EPSILON  might  not  have  been  initialized  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  +  1;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  +  1;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    +    1;    int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  +  1;	  	non-compiled	[CE]  variable  DEFAULT_EPSILON  might  not  have  been  initialized	28	None	add
672	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS));  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS));	          MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p));    	non-compiled	[CE]  ';'  expected	21	None	replace
673	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  DEFAULT_EPSILON);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
674	[BUG]  [BUGGY]  epsilon  =  FastMath.sint(p,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sint(p,  MAX_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sint(p,  MAX_EPSILON);	  epsilon    =    FastMath.sint(p);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	98	None	replace
675	[BUG]  [BUGGY]  int  maxIterations  =  NormalDistribution.DEFAULT_EPSILON.getMaxIterations();  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  int  maxIterations  =  NormalDistribution.DEFAULT_EPSILON.getMaxIterations();  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	int  maxIterations  =  NormalDistribution.DEFAULT_EPSILON.getMaxIterations();	  int    maxIterations    =    mean.getMaxIterations();    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	119	None	replace
676	[BUG]  [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]          epsilon    =    FastMath.sqrt(p);    epsilon  =  FastMath.sqrt(p);  psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	                epsilon        =        FastMath.sqrt(p);        epsilon    =    FastMath.sqrt(p);    psilon  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  psilon	31	None	add
677	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
678	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
679	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
680	[BUG]  [BUGGY]  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  Math.max(DEFAULT_EPSILON,  epsilon);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	66	1	replace
681	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(normal);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.mean  =  FastMath.sqrt(normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.mean  =  FastMath.sqrt(normal);	  epsilon    =    FastMath.sqrt(normal);    this.mean    =    mean;    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	99	None	replace
682	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  This.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  This.epsilon  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    This.epsilon  =  DEFAULT_EPSILON  *  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  This	11	None	add
683	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  *  epsilon;  [CE]  possible  loss  of  precision  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  DEFAULT_EPSILON  *  epsilon;  int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  *  epsilon;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    DEFAULT_EPSILON    *    epsilon;    int  DEFAULT_EPSILON  =  DEFAULT_EPSILON  *  epsilon;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
684	[BUG]  [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon    =    epsilon    +    1;    this.epsilon  =  epsilon  +  2;  This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon        =        epsilon        +        1;        this.epsilon    =    epsilon    +    2;    This.epsilon  =  epsilon  +  1;  this.epsilon  =  epsilon  +  2;	  	non-compiled	[CE]  cannot  find  symbol  This	131	None	add
685	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  This.epsilon  =  epsilon  +  3;  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  This.epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    This.epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  cannot  find  symbol  This	72	None	add
686	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon    =    epsilon    +    3;    epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	72	4	add
687	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  epsilon  =  epsilon  +  3;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    epsilon  =  epsilon  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	72	4	add
688	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  3;  int  epsilon  =  epsilon  +  3;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  +  3;  int  epsilon  =  epsilon  +  3;  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon    =    epsilon    +    3;    int  epsilon  =  epsilon  +  3;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	72	None	add
689	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.EPSILON;  [CE]  cannot  find  symbol  EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.EPSILON;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.EPSILON;	  epsilon    =    mean;    	non-compiled	[CE]  cannot  find  symbol  EPSILON	95	None	replace
690	[BUG]  [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p,  epsilon);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  FastMath.sqrt(p);  this.epsilon  =  FastMath.sqrt(p,  epsilon);	          epsilon    =    FastMath.sqrt(p);    epsilon    =    FastMath.sqrt(p);    this.epsilon    =    fastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	90	None	replace
691	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.newInstance(normal,  DEFAULT_EPSILON,  epsilon);	  epsilon    =    NormalDistribution.newInstance(normal,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
692	[BUG]  [BUGGY]  float  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  float  epsilon  =  FastMath.sqrt(mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	float  epsilon  =  FastMath.sqrt(mean);	  float    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	replace
693	[BUG]  [BUGGY]  epsilon  =  NormalDistribution.NaN;  [CE]  cannot  find  symbol  NaN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  epsilon  =  NormalDistribution.NaN;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	epsilon  =  NormalDistribution.NaN;	  epsilon    =    NormalDistribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  NaN	60	None	replace
694	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));      [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_MAX_ITERATIONS;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  this.epsilon    =    epsilon    *    DEFAULT_EPSILON;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	110	None	replace
