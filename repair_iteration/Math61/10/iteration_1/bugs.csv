bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  DEFAULT_EPSILON;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
2	[BUG]  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  DEFAULT_EPSILON;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  DEFAULT_EPSILON;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
3	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon  +  1;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  +  1;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	4	replace
4	[BUG]  [BUGGY]  this.epsilon  =  epsilon  +  1;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon  +  1;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  +  1;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	4	replace
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	  	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
6	[BUG]  [BUGGY]    [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	  	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  FastMath.sqrt(p);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	    epsilon  =  FastMath.sqrt(p);		compilable	  [FE]  MathRuntimeException$4  	20	4	add
8	[BUG]  [BUGGY]    epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  FastMath.sqrt(p);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  FastMath.sqrt(p);		compilable	  [FE]  MathRuntimeException$4  	20	4	add
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	    epsilon  =  Math.max(epsilon,  maxIterations);		compilable	  [FE]  MathRuntimeException$4  	20	4	add
10	[BUG]  [BUGGY]    epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  Math.max(epsilon,  maxIterations);		compilable	  [FE]  MathRuntimeException$4  	20	4	add
11	[BUG]  [BUGGY]    epsilon  =  normal.doubleValue();  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  normal.doubleValue();  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  normal.doubleValue();		non-compiled	[CE]  cannot  find  symbol	20	None	add
12	[BUG]  [BUGGY]    epsilon  =  NormalDistribution.newInstance();  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  NormalDistribution.newInstance();  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  NormalDistribution.newInstance();		non-compiled	[CE]  cannot  find  symbol	20	None	add
13	[BUG]  [BUGGY]    epsilon  =  NormalDistribution.newInstance(normal);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  NormalDistribution.newInstance(normal);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  NormalDistribution.newInstance(normal);		non-compiled	[CE]  cannot  find  symbol	20	None	add
14	[BUG]  [BUGGY]    int  maxIterations  =  FastMath.sqrt(p);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  maxIterations  =  FastMath.sqrt(p);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  maxIterations  =  FastMath.sqrt(p);		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
15	[BUG]  [BUGGY]    int  maxIterations  =  FastMath.sqrt(normal);  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  maxIterations  =  FastMath.sqrt(normal);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  maxIterations  =  FastMath.sqrt(normal);		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
16	[BUG]  [BUGGY]    int  maxIterations  =  normal.getMaxIterations();  [CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  maxIterations  =  normal.getMaxIterations();  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  maxIterations  =  normal.getMaxIterations();		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
17	[BUG]  [BUGGY]    epsilon  =  normal;  [CE]  incompatible  types  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    epsilon  =  normal;  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    epsilon  =  normal;		non-compiled	[CE]  incompatible  types	20	None	add
18	[BUG]  [BUGGY]    int  epsilon  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  epsilon  =  FastMath.sqrt(p);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  epsilon  =  FastMath.sqrt(p);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
19	[BUG]  [BUGGY]    int  epsilon  =  FastMath.sqrt(p).doubleValue();  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  epsilon  =  FastMath.sqrt(p).doubleValue();  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  epsilon  =  FastMath.sqrt(p).doubleValue();		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
20	[BUG]  [BUGGY]    int  epsilon  =  Math.max(mean,  normal);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  epsilon  =  Math.max(mean,  normal);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  epsilon  =  Math.max(mean,  normal);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
21	[BUG]  [BUGGY]    int  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    int  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	    int  epsilon  =  FastMath.sqrt(p);  this.mean  =  mean;		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	add
22	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	add	this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
23	[BUG]  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	98	98	1	replace	this.epsilon  =  epsilon  *  DEFAULT_EPSILON;	this.epsilon  =  epsilon;  	compilable	  [FE]  MathRuntimeException$4  	19	1	replace
