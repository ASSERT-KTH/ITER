bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
2	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
3	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations,  mean);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
4	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
5	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  mean);	      Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	29	None	replace
6	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);	      Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	29	2	replace
7	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);	      Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	29	2	replace
8	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_MAX_ITERATIONS);	      Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	29	2	replace
9	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_MAX_ITERATIONS);	      Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	29	2	replace
10	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON));	      Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	29	None	replace
11	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  StackOverflowError  	19	12	replace
12	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  StackOverflowError  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  StackOverflowError  	19	12	replace
13	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	19	None	replace
14	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	19	None	replace
15	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  mean);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	20	None	replace
16	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	20	None	replace
17	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	20	None	replace
18	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  epsilon,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	20	None	replace
19	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
20	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
21	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
22	[BUG]  [BUGGY]  double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
23	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p));  [CE]  double  cannot  be  dereferenced  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
24	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(p));  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl(mean.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
25	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(m.sqrt(p));  [CE]  cannot  find  symbol  m  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(m.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(m.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  m	22	None	replace
26	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
27	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
28	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
29	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
30	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
31	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
32	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
33	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
34	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));	  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)	5	None	add
35	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
36	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
37	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
38	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
39	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
40	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
41	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	23	None	replace
42	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean));	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)	23	None	replace
43	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	23	None	replace
44	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	23	2	replace
45	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	23	2	replace
46	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	9	None	add
47	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
48	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	9	2	add
49	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	9	2	add
50	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
51	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	9	None	add
52	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
53	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
54	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p));  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol  message	14	None	replace
55	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
56	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
57	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
58	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
59	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
60	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	7	1	add
61	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
62	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	7	None	add
63	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	18	None	replace
64	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	18	None	replace
65	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	18	None	replace
66	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	18	None	replace
67	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	21	None	replace
68	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	21	None	replace
69	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	21	None	replace
70	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
71	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
72	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
73	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
74	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
75	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
76	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	28	2	add
77	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	28	2	add
78	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
79	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
80	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	5	replace
81	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	5	replace
82	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	5	replace
83	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	5	replace
84	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	6	None	replace
85	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  double  epsilon  =  Math.abs(mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean);	      int    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
86	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.abs(mean,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  maxIterations);	      int    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
87	[BUG]  [BUGGY]  float  epsilon  =  Math.abs(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  float  epsilon  =  Math.abs(mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	float  epsilon  =  Math.abs(mean);	      int    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
88	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
89	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
90	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
91	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
92	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
93	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
94	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
95	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
96	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	15	None	replace
97	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	10	2	replace
98	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	10	2	replace
99	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	10	2	replace
100	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	10	2	replace
101	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  message  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  message	10	None	replace
102	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  n	10	None	replace
103	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
104	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
105	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
106	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
107	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
108	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  mean,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
109	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
110	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
111	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
112	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
113	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
114	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
115	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
116	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
117	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
118	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	11	2	add
119	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	11	2	add
120	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
121	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
122	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
123	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	11	None	add
124	[BUG]  [BUGGY]  Math.max(mean,  mean));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  mean));	      Math.max(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	26	None	replace
125	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean));  [CE]  ';'  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  mean));	      Math.max(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	26	None	replace
126	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	17	None	replace
127	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	17	None	replace
128	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	17	None	replace
129	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	17	None	replace
130	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
131	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
132	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
133	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
134	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  parent  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  parent	5	None	add
135	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
136	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
137	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	2	replace
138	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	2	replace
139	[BUG]  [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(deFAULT_EPSILON,  epsilon);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	6	None	replace
140	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p));  [CE]  cannot  find  symbol  fastMath  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol  fastMath	14	None	replace
141	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
142	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
143	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	17	None	replace
144	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
145	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
146	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	12	2	replace
147	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  fastMath  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  fastMath	12	None	replace
148	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p));  [CE]  double  cannot  be  dereferenced  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
149	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)	22	None	replace
150	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
151	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
152	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
153	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
154	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
155	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
156	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(n,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  n	28	None	add
157	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  Normal	7	None	add
158	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
159	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON  -  mean));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_EPSILON  -  mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON  -  mean));	      Math.max(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	26	None	replace
160	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  1);  [CE]  not  a  statement  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  1);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON)+  1);	      Math.max(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  not  a  statement	26	None	replace
161	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.abs(mean  +  1);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean  +  1);	      int    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
162	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	21	None	replace
163	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(peer),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  peer  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(peer),  DEFAULT_EPSILON,  epsilon);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(peer),  DEFAULT_EPSILON,  epsilon);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  peer	21	None	replace
164	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	23	None	replace
165	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  maxIterations);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(mean,  p,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
166	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  epsilon,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
167	[BUG]  [BUGGY]  PoissonDistributionImpl(message,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(message,  p,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(message,  p,  epsilon,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  message	3	None	replace
168	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
169	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  Normal	11	None	add
170	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
171	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	      Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	29	None	replace
172	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
173	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  epsilon);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  epsilon);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
174	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	20	None	replace
175	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	20	12	replace
176	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [FE]  StackOverflowError  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	20	12	replace
177	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
178	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));  [CE]  cannot  find  symbol  Factory  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Factory	12	None	replace
179	[BUG]  [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	replace
180	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(message));  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(message));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(message));	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  message	19	None	replace
181	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(m));  [CE]  cannot  find  symbol  m  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(m));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(m));	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  m	19	None	replace
182	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
183	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
184	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	6	add
185	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	5	6	add
186	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  mean));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  Math.max(DEFAULT_EPSILON,  mean));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  mean));	      Math.max(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	26	None	replace
187	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  incompatible  types	11	None	add
188	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	compilable	  [FE]  StackOverflowError  	21	12	replace
189	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  StackOverflowError  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	compilable	  [FE]  StackOverflowError  	21	12	replace
190	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  mean));  [CE]  cannot  find  symbol  Factory  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	14	None	replace
191	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
192	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	2	replace
193	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	2	replace
194	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(p));  [CE]  cannot  find  symbol  fastMath  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sint(p));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  cannot  find  symbol  fastMath	15	None	replace
195	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
196	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [CE]  cannot  find  symbol  fastMath  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  fastMath	8	None	replace
197	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  incompatible  types	7	None	add
198	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	7	None	add
199	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [CE]  cannot  find  symbol  fastMath  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  fastMath	10	None	replace
200	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)	10	None	replace
201	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	13	None	replace
202	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);	      int    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	27	None	replace
203	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
204	[BUG]  [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  pe  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  pe	3	None	replace
205	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  epsilon,  maxIterations);	      PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
206	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	22	None	replace
207	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
208	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
209	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
210	[BUG]  [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]      Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
211	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
212	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  p);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	16	None	replace
213	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	      int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	25	None	replace
214	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));	  	non-compiled	[CE]  ';'  expected	9	None	add
215	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;    [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	9	None	add
