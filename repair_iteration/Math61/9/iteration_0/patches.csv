bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);		non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
2	[BUG]  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);		non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
3	[BUG]  [BUGGY]    PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl(p,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	18	None	add
4	[BUG]  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);		non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);		compilable	  [FE]  MathRuntimeException$4  	18	1	add
6	[BUG]  [BUGGY]    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);		compilable	  [FE]  MathRuntimeException$4  	18	1	add
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	1	replace
8	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	1	replace
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	2	replace
10	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	2	replace
11	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	2	replace
12	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	compilable	  [FE]  MathRuntimeException$4  	17	2	replace
13	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(p);  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(p);	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	17	None	replace
14	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
15	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
16	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	17	None	replace
17	[BUG]  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations);		non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	18	None	add
18	[BUG]  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);		non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	18	None	add
19	[BUG]  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  incompatible  types  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));		non-compiled	[CE]  incompatible  types	18	None	add
20	[BUG]  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations);  [CE]  incompatible  types  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations);		non-compiled	[CE]  incompatible  types	18	None	add
21	[BUG]  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);		non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	18	None	add
22	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(p));  [CE]  cannot  find  symbol  fastMath  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sqrt(p));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  cannot  find  symbol  fastMath	17	None	replace
23	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(p));  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(p));	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)	17	None	replace
24	[BUG]  [BUGGY]    int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
25	[BUG]  [BUGGY]    int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
26	[BUG]  [BUGGY]    Math.max(mean,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    Math.max(mean,  DEFAULT_EPSILON));  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    Math.max(mean,  DEFAULT_EPSILON));		non-compiled	[CE]  ';'  expected	18	None	add
27	[BUG]  [BUGGY]    int  epsilon  =  Math.abs(mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    int  epsilon  =  Math.abs(mean);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    int  epsilon  =  Math.abs(mean);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	18	None	add
28	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	    Math.max(mean,  DEFAULT_EPSILON);		compilable	  [FE]  MathRuntimeException$4  	18	1	add
29	[BUG]  [BUGGY]    Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  [BUGGY]    Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	    Math.max(mean,  DEFAULT_EPSILON);		compilable	  [FE]  MathRuntimeException$4  	18	1	add
