bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	179	None	replace
2	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	179	None	replace
3	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
4	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
5	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	200	None	replace
6	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
7	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  mean);  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
8	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
9	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
10	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	84	None	replace
11	[BUG]  [BUGGY]  epsilon  =  Math.max(defult_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  defult_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(defult_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(defult_EPSILON,  p,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	84	None	replace
12	[BUG]  [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	84	None	replace
13	[BUG]  [BUGGY]  epsilon  =  Math.max(defulT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  defulT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(defulT_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(defulT_EPSILON,  p,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defulT_EPSILON	84	None	replace
14	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT	  	non-compiled	[CE]  ')'  expected	184	None	add
15	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAUL  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAUL  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAUL	  	non-compiled	[CE]  ')'  expected	184	None	add
16	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_	  	non-compiled	[CE]  ')'  expected	184	None	add
17	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	184	6	add
18	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	184	6	add
19	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DE  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DE  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DE	  	non-compiled	[CE]  ')'  expected	184	None	add
20	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
21	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
22	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
23	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	89	None	replace
24	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(normal,  p,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl(message,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
25	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
26	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
27	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
28	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
29	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
30	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(message,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(message,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(message,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  message	70	None	add
31	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(mean  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean  +  1);	  int    epsilon    =    Math.abs(mean    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	161	None	replace
32	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean  +  1,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean  +  1,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean  +  1,  maxIterations);	  int    epsilon    =    Math.abs(mean    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	161	None	replace
33	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean  +  2);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean  +  2);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean  +  2);	  int    epsilon    =    Math.abs(mean    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	161	None	replace
34	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
35	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
36	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
37	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
38	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
39	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  incompatible  types  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  incompatible  types	175	None	add
40	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  minIterations);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  minIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  minIterations);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
41	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	replace
42	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	replace
43	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	replace
44	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(s.sqrt(mean));  [CE]  cannot  find  symbol  s  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(s.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(s.sqrt(mean));	  normal    =    new    NormalDistributionImpl(m.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  s	25	None	replace
45	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  ';'  expected	214	None	replace
46	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [CE]  ')'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  ')'  expected	214	None	replace
47	[BUG]  [BUGGY]  if(mean  ==  DEFAULT_EPSILON)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  ')'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  ==  DEFAULT_EPSILON)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  ==  DEFAULT_EPSILON)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  ')'  expected	214	None	replace
48	[BUG]  [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
49	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
50	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
51	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
52	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	182	1	add
53	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	182	1	add
54	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT	  	non-compiled	[CE]  ')'  expected	182	None	add
55	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	182	1	add
56	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	182	1	add
57	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAUL  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAUL  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAUL	  	non-compiled	[CE]  ')'  expected	182	None	add
58	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DE  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DE  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DE	  	non-compiled	[CE]  ')'  expected	182	None	add
59	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	109	None	replace
60	[BUG]  [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	109	None	replace
61	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	109	None	replace
62	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	116	1	replace
63	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	116	1	replace
64	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,double)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,double)	116	None	replace
65	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)	116	None	replace
66	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	116	None	replace
67	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	103	None	replace
68	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  normal);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	103	None	replace
69	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
70	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
71	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
72	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
73	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
74	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
75	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
76	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
77	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.message  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  message	137	None	add
78	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  double  cannot  be  dereferenced	199	None	replace
79	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message));  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  message	199	None	replace
80	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sqrt(mean));  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  message	199	None	replace
81	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
82	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
83	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
84	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
85	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	2	replace
86	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	2	replace
87	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	non-compiled	[CE]  cannot  find  symbol  n	208	None	replace
88	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    deFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
89	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  mean  -  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  mean  -  DEFAULT_MAX_ITERATIONS));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  mean  -  DEFAULT_MAX_ITERATIONS));	  Math.max(DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	186	None	replace
90	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));	  Math.max(DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	186	None	replace
91	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  epsilon));	  Math.max(DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	186	None	replace
92	[BUG]  [BUGGY]  PoissonDistributionImpl(message,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(message,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(message,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  message	204	None	replace
93	[BUG]  [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  defult  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(defult,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(pe,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  defult	204	None	replace
94	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
95	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
96	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
97	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
98	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  mean);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	201	None	replace
99	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(defULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	201	None	replace
100	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
101	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
102	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sin(p),  FastMath.sin(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sin(p),  FastMath.sin(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sin(p),  FastMath.sin(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
103	[BUG]  [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(p),  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
104	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
105	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
106	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
107	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
108	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  n	133	None	replace
109	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
110	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	133	2	replace
111	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	97	None	add
112	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
113	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	97	2	add
114	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	97	2	add
115	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));	  	non-compiled	[CE]  ';'  expected	97	None	add
116	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	97	None	add
117	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
118	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
119	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
120	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	128	None	replace
121	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	128	None	replace
122	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	128	None	replace
123	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	142	None	replace
124	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	142	None	replace
125	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)	34	None	replace
126	[BUG]  [BUGGY]  epsilon  =  Math.max(definable,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  definable  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(definable,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(definable,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  definable	34	None	replace
127	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double,int)	34	None	replace
128	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  StackOverflowError  	12	12	replace
129	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  StackOverflowError  	12	12	replace
130	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	12	None	replace
131	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  incompatible  types  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	12	None	replace
132	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	12	None	replace
133	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	123	None	replace
134	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
135	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	123	None	replace
136	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  illegal  start  of  expression  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
137	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)/  1);  [CE]  not  a  statement  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)/  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON)/  1);	  Math.max(mean,    DEFAULT_EPSILON)+    1);    	non-compiled	[CE]  not  a  statement	160	None	replace
138	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  2);  [CE]  not  a  statement  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  2);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON)+  2);	  Math.max(mean,    DEFAULT_EPSILON)+    1);    	non-compiled	[CE]  not  a  statement	160	None	replace
139	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  3);  [CE]  not  a  statement  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  3);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON)+  3);	  Math.max(mean,    DEFAULT_EPSILON)+    1);    	non-compiled	[CE]  not  a  statement	160	None	replace
140	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(message,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	104	None	replace
141	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(message,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	104	None	replace
142	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  incompatible  types	187	None	replace
143	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  incompatible  types  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  incompatible  types	187	None	replace
144	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	187	None	replace
145	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	187	None	replace
146	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	9	2	replace
147	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	9	2	replace
148	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	9	2	replace
149	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	9	2	replace
150	[BUG]  [BUGGY]  Math.max(mean,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	9	None	replace
151	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	5	None	replace
152	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	5	None	replace
153	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  epsilon);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	5	None	replace
154	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  mean,  epsilon);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	5	None	replace
155	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  message  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  message	146	None	replace
156	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
157	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
158	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
159	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
160	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
161	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
162	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
163	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
164	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
165	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
166	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
167	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	77	2	replace
168	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
169	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl(mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
170	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
171	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
172	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
173	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
174	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
175	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
176	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
177	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
178	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  n	131	None	replace
179	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
180	[BUG]  [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
181	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
182	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
183	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
184	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  message	55	None	replace
185	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
186	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	118	None	add
187	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	118	None	add
188	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	118	None	add
189	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
190	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
191	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
192	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
193	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
194	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
195	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
196	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  int  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  int  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    int  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	82	None	add
197	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));	  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)	82	None	add
198	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	64	None	replace
199	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	64	None	replace
200	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	136	None	replace
201	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	136	None	replace
202	[BUG]  [BUGGY]  NormalDistributionImpl(p.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p.sqrt(mean));	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
203	[BUG]  [BUGGY]  NormalDistributionImpl(mean,  normal.sqrt(p));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean,  normal.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean,  normal.sqrt(p));	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
204	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(p),  epsilon);	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
205	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(p,  mean));  [CE]  double  cannot  be  dereferenced  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sqrt(p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(p,  mean));	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
206	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
207	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
208	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
209	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
210	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT	  	non-compiled	[CE]  ')'  expected	152	None	add
211	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON	  	non-compiled	[CE]  ')'  expected	152	None	add
212	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
213	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
214	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	168	None	replace
215	[BUG]  [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(DEFAULT_EPSILON,  mean  +  1);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	168	None	replace
216	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
217	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  MAX_ITERATIONS,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
218	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
219	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
220	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
221	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
222	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
223	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	151	1	replace
224	[BUG]  [BUGGY]  Math.sqrt(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.sqrt(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.sqrt(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	151	None	replace
225	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	197	None	replace
226	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [CE]  incompatible  types  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	197	None	replace
227	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	197	None	replace
228	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [CE]  incompatible  types  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	197	None	replace
229	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
230	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
231	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
232	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
233	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
234	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
235	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
236	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
237	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
238	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
239	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	102	2	replace
240	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	102	2	replace
241	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
242	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(peer));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(peer));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(peer));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
243	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
244	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	98	2	replace
245	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	98	2	replace
246	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  message  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  message	98	None	replace
247	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	98	2	replace
248	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	98	2	replace
249	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
250	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
251	[BUG]  [BUGGY]  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(Math.sqrt(mean,  mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
252	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
253	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
254	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
255	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
256	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
257	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
258	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(message));  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(message));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
259	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(mean));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  double  cannot  be  dereferenced	196	None	replace
260	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(message));  [CE]  cannot  find  symbol  message  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(message));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  message	196	None	replace
261	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(mean));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(mean));    	non-compiled	[CE]  double  cannot  be  dereferenced	196	None	replace
262	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	16	None	replace
263	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	16	None	replace
264	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  maxIterations));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  maxIterations));	  normal    =    new    NormalDistributionImpl(Math.sqrt(epsilon,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	43	None	replace
265	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(p,  epsilon));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(p,  epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(p,  epsilon));	  normal    =    new    NormalDistributionImpl(Math.sqrt(epsilon,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	43	None	replace
266	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(epsilon,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	43	None	replace
267	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
268	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
269	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
270	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
271	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
272	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
273	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
274	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
275	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
276	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
277	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	126	None	replace
278	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	126	None	replace
279	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	126	12	replace
280	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [FE]  StackOverflowError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	126	12	replace
281	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
282	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
283	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
284	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
285	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
286	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
287	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  fastMath.sqrt(p);  [CE]  cannot  find  symbol  fastMath  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  fastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  fastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	76	None	add
288	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
289	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
290	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
291	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
292	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(mean,  epsilon);	  epsilon    =    Math.max(deFAULT_EPSILON,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	139	5	replace
293	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  epsilon);	  epsilon    =    Math.max(deFAULT_EPSILON,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	139	5	replace
294	[BUG]  [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(deFAULT_EPSILON,  mean);	  epsilon    =    Math.max(deFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	139	None	replace
295	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	14	None	replace
296	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	14	None	replace
297	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON));  [CE]  cannot  find  symbol  Factory  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	190	None	replace
298	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(epsilon,  mean));  [CE]  cannot  find  symbol  Factory  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(epsilon,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(epsilon,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	190	None	replace
299	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  epsilon));  [CE]  cannot  find  symbol  Factory  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	190	None	replace
300	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON,  mean));  [CE]  cannot  find  symbol  Factory  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p,  DEFAULT_EPSILON,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	190	None	replace
301	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  message	101	None	replace
302	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(SECONDS,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  SECONDS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(SECONDS,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(SECONDS,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  SECONDS	101	None	replace
303	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(m));  [CE]  cannot  find  symbol  m  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(m));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(m));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(m));    	non-compiled	[CE]  cannot  find  symbol  m	181	None	replace
304	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Factory  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
305	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  mean));  [CE]  cannot  find  symbol  Factory  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  mean));	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
306	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  mean);  [CE]  cannot  find  symbol  Factory  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  mean);	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
307	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  p);  [CE]  cannot  find  symbol  Factory  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
308	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
309	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
310	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
311	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
312	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean,  maxIterations);	  double    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	85	None	replace
313	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	132	1	add
314	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	132	1	add
315	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	132	None	add
316	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	  	non-compiled	[CE]  ')'  expected	132	None	add
317	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath	  	non-compiled	[CE]  ')'  expected	132	None	add
318	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	132	None	add
319	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	19	None	replace
320	[BUG]  [BUGGY]  double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	19	None	replace
321	[BUG]  [BUGGY]  int  epsilon  =  Math.min(definance,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(definance,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(definance,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	19	None	replace
322	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  illegal  start  of  expression	113	None	add
323	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	113	1	add
324	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	113	1	add
325	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	113	1	add
326	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	113	1	add
327	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	113	None	add
328	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p));	  	non-compiled	[CE]  ';'  expected	113	None	add
329	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
330	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
331	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
332	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
333	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	115	1	add
334	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	115	None	add
335	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	add
336	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
337	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def,  FastMath.sint(p));  [CE]  cannot  find  symbol  def  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  def	54	None	replace
338	[BUG]  [BUGGY]  Math.max(mean,  mean  -  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  mean  -  DEFAULT_EPSILON));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  mean  -  DEFAULT_EPSILON));	  Math.max(mean,    DEFAULT_EPSILON    -    mean));    	non-compiled	[CE]  ';'  expected	159	None	replace
339	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON  -  mean,  maxIterations));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON  -  mean,  maxIterations));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON  -  mean,  maxIterations));	  Math.max(mean,    DEFAULT_EPSILON    -    mean));    	non-compiled	[CE]  ';'  expected	159	None	replace
340	[BUG]  [BUGGY]  Math.max(mean,  epsilon  -  mean));  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  epsilon  -  mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  epsilon  -  mean));	  Math.max(mean,    DEFAULT_EPSILON    -    mean));    	non-compiled	[CE]  ';'  expected	159	None	replace
341	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
342	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  epsilon);	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
343	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
344	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
345	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
346	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
347	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	154	None	add
348	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
349	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	154	1	add
350	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
351	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));	  normal    =    new    NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	206	None	replace
352	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(epsilon));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	206	None	replace
353	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	206	None	replace
354	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
355	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
356	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
357	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
358	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
359	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
360	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
361	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
362	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.message  =  Math.min(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.message  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.message  =  Math.min(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  message	192	None	add
363	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	replace
364	[BUG]  [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	replace
365	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
366	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
367	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
368	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
369	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
370	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	155	2	replace
371	[BUG]  [BUGGY]  PoissonDistributionImpl(message,  p,  maxIterations);  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(message,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(message,  p,  maxIterations);	  PoissonDistributionImpl(mean,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  message	165	None	replace
372	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sint(p));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sint(p));	  normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	194	None	replace
373	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sint(p));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sint(p));	  normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
374	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sint(p));  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sint(p));	  normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	194	None	replace
375	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(m.sint(p));  [CE]  cannot  find  symbol  m  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(m.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(m.sint(p));	  normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  m	194	None	replace
376	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  epsilon));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
377	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations));  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  maxIterations));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
378	[BUG]  [BUGGY]  Math.max(mean,  mean,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  mean,  DEFAULT_EPSILON));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  mean,  DEFAULT_EPSILON));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
379	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS));  [CE]  ';'  expected  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
380	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
381	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
382	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  parent  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  parent	134	None	replace
383	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  message	134	None	replace
384	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
385	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	134	1	replace
386	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
387	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	170	None	replace
388	[BUG]  [BUGGY]  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
389	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  mean);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	36	None	replace
390	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	36	None	replace
391	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	36	None	replace
392	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	91	None	replace
393	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  mean);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	91	None	replace
394	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  maxIterations);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	91	None	replace
395	[BUG]  [BUGGY]  Math.min(mean,  mean));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  mean));	  Math.max(mean,    mean));    	non-compiled	[CE]  ';'  expected	124	None	replace
396	[BUG]  [BUGGY]  Math.min(mean,  mean  -  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  mean  -  DEFAULT_EPSILON));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  mean  -  DEFAULT_EPSILON));	  Math.max(mean,    mean));    	non-compiled	[CE]  ';'  expected	124	None	replace
397	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
398	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  mean,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
399	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
400	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
401	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
402	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
403	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
404	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
405	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	183	None	replace
406	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
407	[BUG]  [BUGGY]  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
408	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	156	1	replace
409	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	156	1	replace
410	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	add
411	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
412	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	57	None	add
413	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(me  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(me  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(me	  	non-compiled	[CE]  ')'  expected	57	None	add
414	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean)  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean)  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean)	  	non-compiled	[CE]  ')'  expected	57	None	add
415	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  epsilon,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
416	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  epsilon);  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sint(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  message	53	None	replace
417	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean,  epsilon);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean,  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
418	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
419	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(m);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(m);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(m);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
420	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
421	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
422	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
423	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	74	1	add
424	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
425	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  minIterations;  [CE]  cannot  find  symbol  minIterations  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  minIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  minIterations;	  	non-compiled	[CE]  cannot  find  symbol  minIterations	74	None	add
426	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
427	[BUG]  [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
428	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
429	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sint(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sint(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
430	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	177	None	replace
431	[BUG]  [BUGGY]  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	138	None	replace
432	[BUG]  [BUGGY]  epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  defult_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	138	None	replace
433	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
434	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
435	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
436	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
437	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
438	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
439	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  e  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  e  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  e	  	non-compiled	[CE]  ';'  expected	207	None	add
440	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
441	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	207	1	add
442	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    mean,    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	18	None	replace
443	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	143	None	replace
444	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,double)	143	None	replace
445	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	143	None	replace
446	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	211	None	replace
447	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	211	None	replace
448	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	211	None	replace
449	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	211	None	replace
450	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	213	None	replace
451	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	213	None	replace
452	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
453	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
454	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  n	29	None	replace
455	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
456	[BUG]  [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
457	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	17	None	replace
458	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	17	None	replace
459	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)	17	None	replace
460	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  DEFAULT_EPSILON,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
461	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
462	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  DEFAULT_EPSILON,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
463	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	30	1	add
464	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	30	1	add
465	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	30	None	add
466	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	  	non-compiled	[CE]  ')'  expected	30	None	add
467	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath	  	non-compiled	[CE]  ')'  expected	30	None	add
468	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s	  	non-compiled	[CE]  ')'  expected	30	None	add
469	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	  	non-compiled	[CE]  ')'  expected	28	None	add
470	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	28	None	add
471	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
472	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	28	1	add
473	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath	  	non-compiled	[CE]  ')'  expected	28	None	add
474	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s	  	non-compiled	[CE]  ')'  expected	28	None	add
475	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  message	50	None	replace
476	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
477	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
478	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
479	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
480	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
481	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
482	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
483	[BUG]  [BUGGY]  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	79	2	replace
484	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	81	None	replace
485	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);	  epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	81	None	replace
486	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
487	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
488	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
489	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
490	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	75	2	replace
491	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;  [CE]  possible  loss  of  precision  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.maxIterations  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
492	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	48	None	add
493	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	48	2	add
494	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	48	2	add
495	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
496	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	48	None	add
497	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	48	None	add
498	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
499	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
500	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol	120	None	add
501	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
502	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	120	None	add
503	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	120	None	add
504	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	5	replace
505	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	5	replace
506	[BUG]  [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	83	None	replace
507	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	69	None	replace
508	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p,  DEFAULT_EPSILON),  mean,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	69	None	replace
509	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON  -  mean));  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON  -  mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON  -  mean));	  Math.min(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	10	None	replace
510	[BUG]  [BUGGY]  Math.min(mean,  MAX_ITERATIONS));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  MAX_ITERATIONS));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  MAX_ITERATIONS));	  Math.min(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	10	None	replace
511	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
512	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p.sqrt(mean));	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
513	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [CE]  double  cannot  be  dereferenced  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
514	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
515	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(message,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	172	None	replace
516	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)	68	None	replace
517	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)	68	None	replace
518	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	68	None	replace
519	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)  [FE]                            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)	68	None	replace
520	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
521	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
522	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
523	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
524	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
525	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
526	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
527	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
528	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
529	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
530	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
531	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
532	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
533	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
534	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
535	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p,  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
536	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p,  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
537	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_MAX_ITERATIONS,  deFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
538	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	174	None	replace
539	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
540	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
541	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
542	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  epsilon,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
543	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  mean,  maxIterations);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	173	None	replace
544	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	173	None	replace
545	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
546	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
547	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
548	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
549	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	add
550	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
551	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	26	1	add
552	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	46	2	replace
553	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	46	2	replace
554	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
555	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
556	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	130	1	add
557	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	130	1	add
558	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	130	None	add
559	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	  	non-compiled	[CE]  ')'  expected	130	None	add
560	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath	  	non-compiled	[CE]  ')'  expected	130	None	add
561	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastM  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastM  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastM	  	non-compiled	[CE]  ')'  expected	130	None	add
562	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(message));  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(message));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(message));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(message));    	non-compiled	[CE]  cannot  find  symbol  message	180	None	replace
563	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(message,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  message  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(message,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(message,  FastMath.sqrt(mean));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(message));    	non-compiled	[CE]  cannot  find  symbol  message	180	None	replace
564	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,double)	100	None	replace
565	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)	100	None	replace
566	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	100	None	replace
567	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    mean,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
568	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  p,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(normal,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  p,  maxIterations);	  PoissonDistributionImpl(p,    mean,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
569	[BUG]  [BUGGY]  PoissonDistributionImpl(epsilon,  p,  maxIterations);  [CE]  cannot  find  symbol  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(epsilon,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(epsilon,  p,  maxIterations);	  PoissonDistributionImpl(p,    mean,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
570	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON,  mean);	  Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	7	None	replace
571	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	7	None	replace
572	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	99	None	add
573	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	99	2	add
574	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	99	2	add
575	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
576	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	99	None	add
577	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	99	None	add
578	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	66	None	replace
579	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	66	None	replace
580	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definer,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  definer  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definer,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definer,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  definer	66	None	replace
581	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	66	None	replace
582	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	163	None	replace
583	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	163	None	replace
584	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	compilable	  [FE]  StackOverflowError  	163	12	replace
585	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  StackOverflowError  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	compilable	  [FE]  StackOverflowError  	163	12	replace
586	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
587	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
588	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
589	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
590	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)	  	non-compiled	[CE]  ')'  expected	150	None	add
591	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
592	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	150	1	add
593	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	150	None	add
594	[BUG]  [BUGGY]  double  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(DEFAULT_EPSILON,  mean);	  double    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
595	[BUG]  [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
596	[BUG]  [BUGGY]  double  epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(defult_EPSILON,  DEFAULT_MAX_ITERATIONS);	  double    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
597	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sint(p));  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	140	None	replace
598	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sint(p));  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
599	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sint(p));  [CE]  cannot  find  symbol  message  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  message	140	None	replace
600	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def.sint(p));  [CE]  cannot  find  symbol  def  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(def.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  def	140	None	replace
601	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(epsilon));  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
602	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
603	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Normal  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
604	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [CE]  cannot  find  symbol  Normal  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  epsilon);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
605	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
606	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
607	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
608	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
609	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
610	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
611	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
612	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_MAX_ITERATIONS);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	153	1	replace
613	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
614	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	27	2	replace
615	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	27	2	replace
616	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean,  maxIterations);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	38	None	replace
617	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  mean);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	38	None	replace
618	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sin(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sin(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	58	12	replace
619	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sin(mean));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sin(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sin(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	58	12	replace
620	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
621	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  this.epsilon  =  epsilon;  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  this.epsilon  =  epsilon;	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
622	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
623	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  incompatible  types  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PoissonDistributionImpl  Normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  incompatible  types	11	None	add
624	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
625	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
626	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
627	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
628	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
629	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  MAX_ITERATIONS;  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  MAX_ITERATIONS;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  MAX_ITERATIONS;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	33	None	replace
630	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	5	replace
631	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	5	replace
632	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	195	None	replace
633	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	149	2	replace
634	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	149	2	replace
635	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	149	None	replace
636	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
637	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
638	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
639	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
640	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  n	31	None	replace
641	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
642	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	31	1	replace
643	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	176	12	replace
644	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	176	12	replace
645	[BUG]  [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
646	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
647	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	121	2	replace
648	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	121	2	replace
649	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	35	None	replace
650	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
651	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	39	2	add
652	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	39	2	add
653	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
654	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
655	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
656	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
657	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	1	None	replace
658	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	141	None	replace
659	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	141	None	replace
660	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	141	None	replace
661	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	71	2	replace
662	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	71	2	replace
663	[BUG]  [BUGGY]  n(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n(mean,  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
664	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	193	None	replace
665	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  mean  +  1);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
666	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  ')'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	215	None	replace
667	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	215	None	replace
668	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL  [CE]  ')'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	215	None	replace
669	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	63	None	replace
670	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	63	None	replace
671	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	63	None	replace
672	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	59	1	add
673	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	59	1	add
674	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
675	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
676	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	59	None	add
677	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	59	None	add
678	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	145	None	add
679	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    StandardDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
680	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	145	2	add
681	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	145	2	add
682	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	145	None	add
683	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
684	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
685	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
686	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
687	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
688	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
689	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
690	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	185	None	replace
691	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
692	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
693	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
694	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
695	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
696	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
697	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	72	1	add
698	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
699	[BUG]  [BUGGY]  NormalDistribution  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [CE]  ')'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistribution  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistribution  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	198	None	replace
700	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
701	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
702	[BUG]  [BUGGY]  float  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  float  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	float  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON);	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
703	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
704	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
705	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
706	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
707	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	32	None	add
708	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
709	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	32	1	add
710	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
711	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
712	[BUG]  [BUGGY]  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
713	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
714	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations,  mean);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
715	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  normal,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  normal,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  normal,  epsilon,  maxIterations);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
716	[BUG]  [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  double    epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	37	None	replace
717	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
718	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
719	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	compilable	  [FE]  MathRuntimeException$4  	44	1	add
720	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	compilable	  [FE]  MathRuntimeException$4  	44	1	add
721	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	44	None	add
722	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	44	None	add
723	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	135	None	replace
724	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	135	None	replace
725	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	135	None	replace
726	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	189	12	replace
727	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	189	12	replace
728	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  incompatible  types  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  incompatible  types	189	None	replace
729	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
730	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
731	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
732	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
733	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	2	replace
734	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	2	replace
735	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
736	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
737	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    mean);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	13	None	replace
738	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(n,  FastMath.sqrt(mean),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(n,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	112	None	replace
739	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	65	None	replace
740	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definable,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  definable  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definable,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(definable,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  definable	65	None	replace
741	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations,  deFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations,  deFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  maxIterations,  deFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	3	None	replace
742	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Normal	169	None	replace
743	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  cannot  find  symbol  Normal  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Normal	169	None	replace
744	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [CE]  cannot  find  symbol  Normal  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Normal	169	None	replace
745	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0.0,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
746	[BUG]  [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0.0,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0.0,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
747	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
748	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
749	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
750	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	73	2	replace
751	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  this.epsilon  =  epsilon;  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    	non-compiled	[CE]  ';'  expected	73	None	replace
752	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
753	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
754	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  mean);  [CE]  double  cannot  be  dereferenced  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
755	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p.sqrt(mean));  [CE]  double  cannot  be  dereferenced  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
756	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p,  maxIterations);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
757	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);	  Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	171	None	replace
758	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  maxIterations,  mean);	  Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	171	None	replace
759	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  p,  maxIterations);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
760	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	42	2	replace
761	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  epsilon);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	42	2	replace
762	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	42	None	replace
763	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean));  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
764	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(epsilon));  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
765	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p,  mean));  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p,  mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
766	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean,  p));  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
767	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(epsilon));    	non-compiled	[CE]  double  cannot  be  dereferenced	147	None	replace
768	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(epsilon));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double)	147	None	replace
769	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(epsilon));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(epsilon));    	non-compiled	[CE]  double  cannot  be  dereferenced	147	None	replace
770	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  MAX_ITERATIONS);	  int    epsilon    =    Math.abs(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	86	None	replace
771	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
772	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
773	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
774	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
775	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
776	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
777	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
778	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
779	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
780	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
781	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
782	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
783	[BUG]  [BUGGY]  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	106	None	replace
784	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	51	None	replace
785	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  message  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  message	51	None	replace
786	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	51	None	replace
787	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	51	None	replace
788	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
789	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    PoissonDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
790	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  epsilon;  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  epsilon;	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
791	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.mean  =  epsilon;  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.mean  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  this.mean  =  epsilon;	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
792	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
793	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
794	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
795	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
796	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  Normal	209	None	add
797	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
798	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.min(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	209	1	add
799	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)	  	non-compiled	[CE]  ')'  expected	209	None	add
800	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(def,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  def  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(def,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(def,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	143	None	replace
801	[BUG]  [BUGGY]  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl(message,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
802	[BUG]  [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(deFAULT_EPSILON,  mean);	  double    epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	replace
803	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	40	None	replace
804	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sint(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	170	None	replace
805	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sint(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
806	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
807	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.s	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
808	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(message),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	173	None	replace
809	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  maxIterations  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean,  maxIterations  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  maxIterations  +  1);	  int    epsilon    =    Math.abs(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	86	None	replace
810	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  cannot  find  symbol  n	33	None	replace
811	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.min(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.min(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  cannot  find  symbol  n	33	None	replace
812	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	11	None	add
813	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  p,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  p,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  p,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
814	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Normal	169	None	replace
815	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
816	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	2	replace
817	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	5	replace
818	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	83	5	replace
819	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	177	None	replace
820	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
821	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
822	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	142	None	replace
823	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	142	None	replace
824	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
825	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
826	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
827	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
828	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  p));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
829	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)	174	None	replace
830	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(peer),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(peer),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sqrt(peer),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
831	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
832	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(message,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	172	None	replace
833	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON)+  1);  [CE]  not  a  statement  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON)+  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON)+  1);	  Math.min(mean,    DEFAULT_EPSILON));    	non-compiled	[CE]  not  a  statement	10	None	replace
834	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	140	None	replace
835	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [CE]  ')'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MA	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	198	None	replace
836	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)	  	non-compiled	[CE]  ')'  expected	154	None	add
837	[BUG]  [BUGGY]  PoissonDistributionImpl(message,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  message  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(message,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(message,  epsilon,  maxIterations);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  message	205	None	replace
838	[BUG]  [BUGGY]  PoissonDistributionImpl(null,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(null,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(null,  epsilon,  maxIterations);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
839	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(NormalDistribution,double)	34	None	replace
840	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  Normal	59	None	add
841	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	59	1	add
842	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	compilable	  [FE]  MathRuntimeException$4  	59	1	add
843	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	100	None	replace
844	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(message,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  message	100	None	replace
845	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double,int)	100	None	replace
846	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(peer),  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(peer),  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(peer),  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
847	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(message),  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(message),  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(message),  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(Math.sqrt(p),    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	111	None	replace
848	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_ITERATIONS);  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_ITERATIONS);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
849	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  cannot  find  symbol  Normal  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
850	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  Normal	39	None	add
851	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	136	None	replace
852	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	136	None	replace
853	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	136	None	replace
854	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	97	None	add
855	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
856	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	76	2	add
857	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	48	None	add
858	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	48	None	add
859	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
860	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
861	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  parent  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  parent	82	None	add
862	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(message,  FastMath.sint(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
863	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  psilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  psilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    psilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  psilon	26	None	add
864	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(epsilon),  DEFAULT_EPSILON,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	163	None	replace
865	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
866	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	131	2	replace
867	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  ')'  expected	131	None	replace
868	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	30	1	add
869	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	30	1	add
870	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  psilon  =  epsilon;  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  epsilon;  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  psilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  psilon  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  psilon	78	None	add
871	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  MAX_ITERATIONS);	  epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	81	None	replace
872	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Normal	115	None	add
873	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(mean,  p));  [CE]  cannot  find  symbol  Factory  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(mean,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	190	None	replace
874	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(men,  p));  [CE]  cannot  find  symbol  men  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(men,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(men,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  men	190	None	replace
875	[BUG]  [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
876	[BUG]  [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon)	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
877	[BUG]  [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(ep  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(ep  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  Math.max(0.0,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(ep	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
878	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	189	12	replace
879	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  MathRuntimeException$4  	189	12	replace
880	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sint(mean),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
881	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  DEFAULT_EPSILON));  [CE]  cannot  find  symbol  Factory  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(mean,  DEFAULT_EPSILON));	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
882	[BUG]  [BUGGY]  NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Factory  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(Factory.sqrt(mean),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
883	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  normal,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  normal,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  normal,  maxIterations);	  PoissonDistributionImpl(mean,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
884	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sint(mean));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sint(mean));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
885	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,double)	127	None	replace
886	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
887	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIters);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIters);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIters);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
888	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  maxIterations);	  PoissonDistributionImpl(mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
889	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(fastMath.sqrt(epsilon));    	non-compiled	[CE]  double  cannot  be  dereferenced	147	None	replace
890	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	50	None	replace
891	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	50	None	replace
892	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	replace
893	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	109	None	replace
894	[BUG]  [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	replace
895	[BUG]  [BUGGY]  if(mean  <  =  0)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
896	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN  [CE]  ')'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  ')'  expected	51	None	replace
897	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  message  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  message	51	None	replace
898	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
899	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(mean));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(message));    	compilable	  [FE]  StackOverflowError  	180	12	replace
900	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(mean));  [FE]  StackOverflowError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(mean));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(message));    	compilable	  [FE]  StackOverflowError  	180	12	replace
901	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(pe),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  cannot  find  symbol  pe  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(pe),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(pe),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  pe	68	None	replace
902	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
903	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
904	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
905	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p,  DEFAULT_EPSILON));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	41	None	replace
906	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
907	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  p  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  incompatible  types  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  p  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    p  =  new  NormalDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  incompatible  types	188	None	add
908	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	compilable	  [FE]  MathRuntimeException$4  	44	2	add
909	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	compilable	  [FE]  MathRuntimeException$4  	44	2	add
910	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  NormalDistributionImpl  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  NormalDistributionImpl  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    NormalDistributionImpl  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol  NormalDistributionImpl	44	None	add
911	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	42	None	replace
912	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	145	None	add
913	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
914	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    Normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  Normal	113	None	add
915	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(maxIterations));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
916	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	16	None	replace
917	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	176	12	replace
918	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sin(mean),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	176	12	replace
919	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(deFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(deFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(deFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
920	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
921	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
922	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	99	None	add
923	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  epsilon);  [CE]  not  a  statement  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON)+  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON)+  epsilon);	  Math.max(mean,    DEFAULT_EPSILON)+    1);    	non-compiled	[CE]  not  a  statement	160	None	replace
924	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  mean  +  1));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  mean  +  1));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  mean  +  1));	  Math.max(DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	186	None	replace
925	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
926	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
927	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	137	None	add
928	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  mean,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	162	None	replace
929	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
930	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
931	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	183	2	replace
932	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(message,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(message,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	104	None	replace
933	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
934	[BUG]  [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  p;  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  p;  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  p;	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	121	None	replace
935	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	2	replace
936	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	2	replace
937	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  mean);	  int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	19	None	replace
938	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	101	2	replace
939	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	101	2	replace
940	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	101	None	replace
941	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.	  	non-compiled	[CE]  ')'  expected	130	None	add
942	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
943	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Mat.max(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  Mat  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Mat.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Mat.max(mean,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  Mat	8	None	add
944	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MIN_ITERATIONS);  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.max(mean,  DEFAULT_MIN_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.max(mean,  DEFAULT_MIN_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	8	None	add
945	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	66	None	replace
946	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
947	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
948	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon);  [CE]  cannot  find  symbol  fastMath  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  fastMath	53	None	replace
949	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_MAX_ITERATIONS));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_MAX_ITERATIONS));	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ';'  expected	9	None	replace
950	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sint(p));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	54	None	replace
951	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
952	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(p,  epsilon));	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
953	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
954	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	compilable	  [FE]  MathRuntimeException$4  	208	1	replace
955	[BUG]  [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  Math.max(0.0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  }	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
956	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
957	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	197	None	replace
958	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  def,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  def  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  def,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  def,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    mean,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	18	None	replace
959	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    int  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	32	None	add
960	[BUG]  [BUGGY]  NormalDistributionImpl(Math.sqrt(mean,  p));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(Math.sqrt(mean,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(Math.sqrt(mean,  p));	  normal    =    new    NormalDistributionImpl(Math.sqrt(epsilon,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	43	None	replace
961	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Math.sqrt(epsilon,  mean));	  normal    =    new    NormalDistributionImpl(Math.sqrt(epsilon,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	43	None	replace
962	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	179	None	replace
963	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  incompatible  types	187	None	replace
964	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	116	None	replace
965	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	replace
966	[BUG]  [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  defult  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(defult,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(defult,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defult	107	None	replace
967	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sint(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
968	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  DEFAULT_EPSILON));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	200	None	replace
969	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
970	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  DEFAULT_EPSILON,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	200	2	replace
971	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  ')'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	215	None	replace
972	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL  [CE]  ')'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAUL	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	215	None	replace
973	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  p,  maxIterations);	  Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	171	None	replace
974	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    mean,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	67	None	replace
975	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean  *  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean  *  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean  *  1);	  int    epsilon    =    Math.abs(mean    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	161	None	replace
976	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	141	None	replace
977	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean),  DEFAULT_EPSILON,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
978	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p  +  1);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  p  +  1);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
979	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
980	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  mean);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
981	[BUG]  [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(deFAULT_EPSILON,  DEFAULT_EPSILON);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
982	[BUG]  [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(deFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(deFAULT_EPSILON,  MAX_ITERATIONS);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	144	None	replace
983	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.	  	non-compiled	[CE]  ')'  expected	132	None	add
984	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFA  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFA  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFA	  	non-compiled	[CE]  ')'  expected	184	None	add
985	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  maxIterations);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
986	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  0,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  0,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(message,  0,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
987	[BUG]  [BUGGY]  epsilon  =  Math.min(deFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(deFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(deFAULT_EPSILON,  epsilon);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	138	None	replace
988	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  maxIterations);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	138	2	replace
989	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  maxIterations);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	138	2	replace
990	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  super  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  '.'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  super  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  super  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  '.'  expected	80	None	add
991	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(p),  mean);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
992	[BUG]  [BUGGY]  float  epsilon  =  Math.abs(mean  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  float  epsilon  =  Math.abs(mean  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	float  epsilon  =  Math.abs(mean  +  1);	  float    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	87	None	replace
993	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON)+  mean;  [CE]  not  a  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON)+  mean;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON)+  mean;	  Math.min(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  not  a  statement	7	None	replace
994	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.	  	non-compiled	[CE]  ')'  expected	28	None	add
995	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean)+  1;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(mean)+  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean)+  1;	  double    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	85	None	replace
996	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  p);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	5	None	replace
997	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath,  FastMath.sint(p));  [CE]  cannot  find  symbol  fastMath  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  fastMath	52	None	replace
998	[BUG]  [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS));    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
999	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
1000	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
1001	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
1002	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
1003	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(mean));	  normal    =    new    NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	206	None	replace
1004	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  Normal	120	None	add
1005	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	2	add
1006	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	2	add
1007	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	120	None	add
1008	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(message,  p));  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(message,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(message,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  message	149	None	replace
1009	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
1010	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	152	1	add
1011	[BUG]  [BUGGY]  int  epsilon  =  Math.min(Math.abs(mean),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(Math.abs(mean),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(Math.abs(mean),  DEFAULT_EPSILON);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	21	None	replace
1012	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	118	None	add
1013	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  mean,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	88	None	replace
1014	[BUG]  [BUGGY]  NormalDistributionImpl(mean,  mean.sqrt(p));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean,  mean.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean,  mean.sqrt(p));	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
1015	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(peer));  [CE]  cannot  find  symbol  peer  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(peer));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(peer));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(m));    	non-compiled	[CE]  cannot  find  symbol  peer	181	None	replace
1016	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    deFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	4	None	replace
1017	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double,double)	129	None	replace
1018	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	129	None	replace
1019	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(DEFAULT_EPSILON,  mean);	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
1020	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON)+  1;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON)+  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  DEFAULT_EPSILON)+  1;	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
1021	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFA  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFA  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(epsilon,  DEFA	  	non-compiled	[CE]  ')'  expected	182	None	add
1022	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(mean,  DEFAULT_EPSILON  +  1);	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	193	5	replace
1023	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON  +  1);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_EPSILON  +  1);	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	193	5	replace
1024	[BUG]  [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS  +  1);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	213	None	replace
1025	[BUG]  [BUGGY]  double  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.min(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	213	None	replace
1026	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
1027	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
1028	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  ')'  expected	29	None	replace
1029	[BUG]  [BUGGY]  epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(int,double,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(maxIterations,  DEFAULT_EPSILON,  epsilon);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double)	84	None	replace
1030	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	146	None	replace
1031	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(maxIterations));  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sint(maxIterations));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1032	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sint(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
1033	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	211	None	replace
1034	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  mean,  maxIterations));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
1035	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	48	None	add
1036	[BUG]  [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl        normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	48	None	add
1037	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(message,  p));  [CE]  cannot  find  symbol  message  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(message,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(message,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Factory.sint(p,    mean));    	non-compiled	[CE]  cannot  find  symbol  message	190	None	replace
1038	[BUG]  [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	=  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1039	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  StackOverflowError  	189	12	replace
1040	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	compilable	  [FE]  StackOverflowError  	189	12	replace
1041	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  epsilon  =  epsilon;  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON));  epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,  DEFAULT_EPSILON));  epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    epsilon    =    epsilon;    	non-compiled	[CE]  ';'  expected	79	None	replace
1042	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	113	None	add
1043	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	113	None	add
1044	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
1045	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
1046	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
1047	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  MathRuntimeException$4  	70	1	add
1048	[BUG]  [BUGGY]  if(mean  <  =  DEFAULT_EPSILON)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  DEFAULT_EPSILON)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  DEFAULT_EPSILON)  {  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1049	[BUG]  [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(DEFAULT_EPSILON,  mean);	  int    epsilon    =    Math.max(DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	168	None	replace
1050	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  Normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  Normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    Normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol  Normal	44	None	add
1051	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	44	None	add
1052	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	44	None	add
1053	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	44	None	add
1054	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	184	6	add
1055	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	184	6	add
1056	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
1057	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    StandardDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	compilable	  [FE]  MathRuntimeException$4  	47	2	replace
1058	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
1059	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
1060	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
1061	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    epsilon  =  Math.min(mean,  DEFAULT_EPSILON);  this.epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
1062	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.sqrt(epsilon);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.sqrt(epsilon);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	4	add
1063	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.sqrt(epsilon);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.sqrt(epsilon);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.sqrt(epsilon);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  MathRuntimeException$4  	120	4	add
1064	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	120	None	add
1065	[BUG]  [BUGGY]  double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.max(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	179	None	replace
1066	[BUG]  [BUGGY]  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	9	None	replace
1067	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  defULT_EPSILON);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(defULT_EPSILON,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	158	None	replace
1068	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1069	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1070	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MEMBER);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MEMBER);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  MEMBER);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	195	None	replace
1071	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(defULT_EPSILON,  FastMath.sint(p));  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(defULT_EPSILON,  FastMath.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(defULT_EPSILON,  FastMath.sint(p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(message,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	54	None	replace
1072	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean.sqrt(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
1073	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON)-  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(mean,  DEFAULT_EPSILON)-  1;	  epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	81	5	replace
1074	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON)-  1;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON)-  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON)-  1;	  epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	81	5	replace
1075	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	171	None	replace
1076	[BUG]  [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  pe  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(pe,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  pe	106	None	replace
1077	[BUG]  [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	153	None	replace
1078	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	123	None	replace
1079	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mElement),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  mElement  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mElement),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(mElement),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  mElement	163	None	replace
1080	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(random),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  random  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(random),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(random),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  random	163	None	replace
1081	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(def)+  mean,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  def  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(def)+  mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(def)+  mean,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(peer),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  def	163	None	replace
1082	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(mean)/  DEFAULT_EPSILON;  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(mean)/  DEFAULT_EPSILON;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(mean)/  DEFAULT_EPSILON;	  double    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	85	None	replace
1083	[BUG]  [BUGGY]  double  epsilon  =  Math.abs(Math.abs(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  double  epsilon  =  Math.abs(Math.abs(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	double  epsilon  =  Math.abs(Math.abs(mean));	  double    epsilon    =    Math.abs(mean);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	85	None	replace
1084	[BUG]  [BUGGY]  Math.max(MAX_ITERATIONS,  mean));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(MAX_ITERATIONS,  mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(MAX_ITERATIONS,  mean));	  Math.max(DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	186	None	replace
1085	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)-  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(mean,  DEFAULT_EPSILON)-  1;	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  FunctionEvaluationException  	193	9	replace
1086	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)-  1;  [FE]  FunctionEvaluationException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)-  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_EPSILON)-  1;	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  FunctionEvaluationException  	193	9	replace
1087	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)+  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(mean,  DEFAULT_EPSILON)+  1;	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	193	5	replace
1088	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)+  1;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(mean,  DEFAULT_EPSILON)+  1;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(mean,  DEFAULT_EPSILON)+  1;	  epsilon    =    Math.min(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	193	5	replace
1089	[BUG]  [BUGGY]  Math.max(DEFAULT_EPSILON,  mean)+  1);  [CE]  not  a  statement  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(DEFAULT_EPSILON,  mean)+  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(DEFAULT_EPSILON,  mean)+  1);	  Math.max(mean,    DEFAULT_EPSILON)+    1);    	non-compiled	[CE]  not  a  statement	160	None	replace
1090	[BUG]  [BUGGY]  epsilon  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	84	None	replace
1091	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
1092	[BUG]  [BUGGY]  Math.max(0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(0,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	210	1	replace
1093	[BUG]  [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.max(mean,  DEFAULT_EPSILON,  epsilon);	  int    epsilon    =    Math.max(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	35	None	replace
1094	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
1095	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  this.epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	137	1	add
1096	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	14	None	replace
1097	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(mean));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol  Normal	57	None	add
1098	[BUG]  [BUGGY]  Math.max(mean,  normal));  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  normal));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  normal));	  Math.max(mean,    mean));    	non-compiled	[CE]  ';'  expected	124	None	replace
1099	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	2	None	replace
1100	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1101	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(message));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  message	50	None	replace
1102	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(m));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  m  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(m));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(m));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  m	50	None	replace
1103	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(mean));  [CE]  cannot  find  symbol  fastMath  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  fastMath	52	None	replace
1104	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  FastMath.sint(mean));  [CE]  cannot  find  symbol  fastMath  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  FastMath.sint(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  fastMath	52	None	replace
1105	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean  -  1));  [CE]  ';'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  mean  -  1));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  mean  -  1));	  Math.max(mean,    DEFAULT_EPSILON,    mean));    	non-compiled	[CE]  ';'  expected	125	None	replace
1106	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
1107	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
1108	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
1109	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	82	4	add
1110	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_MAX_ITERATIONS);    epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  this.epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	82	None	add
1111	[BUG]  [BUGGY]  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  parent  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.normal  =  new  NormalDistributionImpl(parent,  FastMath.sqrt(p));	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(parent,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  parent	134	None	replace
1112	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [CE]  cannot  find  symbol  defsilon  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defsilon	128	None	replace
1113	[BUG]  [BUGGY]  PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  m  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(m,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  m	105	None	replace
1114	[BUG]  [BUGGY]  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);	  PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1115	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	129	None	replace
1116	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	130	None	add
1117	[BUG]  [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1118	[BUG]  [BUGGY]  PoissonDistributionImpl(message,  normal,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  message  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(message,  normal,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(message,  normal,  epsilon,  maxIterations);	  PoissonDistributionImpl(normal,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  message	205	None	replace
1119	[BUG]  [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl(mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1120	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
1121	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	40	2	replace
1122	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	40	None	replace
1123	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(defULT_EPSILON));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	40	None	replace
1124	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	17	None	replace
1125	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	135	None	replace
1126	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(this.mean,  epsilon,  maxIterations);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	135	None	replace
1127	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    StandardDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
1128	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	99	None	add
1129	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  incompatible  types	99	None	add
1130	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));	  normal    =    new    NormalDistributionImpl(deFAULT_EPSILON.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	206	None	replace
1131	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1132	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  0,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  0,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(mean,  0,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(mean,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	94	None	replace
1133	[BUG]  [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	156	None	replace
1134	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  StackOverflowError  	176	12	replace
1135	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.pow(10,  p),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  StackOverflowError  	176	12	replace
1136	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  Standard  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Standard  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  Standard  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    Standard  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  Standard	39	None	add
1137	[BUG]  [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1138	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,NormalDistributionImpl)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  normal);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,NormalDistributionImpl)	49	None	replace
1139	[BUG]  [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean));  }	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1140	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
1141	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	185	7	replace
1142	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	45	None	replace
1143	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
1144	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sin(mean),  p);	  normal    =    new    NormalDistributionImpl(Math.sqrt(mean),    p);    	compilable	  [FE]  MathRuntimeException$4  	45	2	replace
1145	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(comment));  [CE]  cannot  find  symbol  comment  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(comment));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(comment));	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(message));    	non-compiled	[CE]  cannot  find  symbol  comment	180	None	replace
1146	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  def);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  def);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  def);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    mean);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	103	None	replace
1147	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  	non-compiled	[CE]  incompatible  types	115	None	add
1148	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean),    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	115	None	add
1149	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_EPSILON,  epsilon);	  int    epsilon    =    Math.min(mean,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	19	None	replace
1150	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    mean);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	13	None	replace
1151	[BUG]  [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(MAX_ITERATIONS,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	155	None	replace
1152	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  p);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	110	None	replace
1153	[BUG]  [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.min(deFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	20	None	replace
1154	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  MAX_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	197	None	replace
1155	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [CE]  incompatible  types  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  incompatible  types	197	None	replace
1156	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
1157	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(epsilon));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
1158	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
1159	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	146	2	replace
1160	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Factory  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  epsilon,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Factory	53	None	replace
1161	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  fastMath  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon,  maxIterations);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  epsilon,  maxIterations);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  fastMath	53	None	replace
1162	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  mean,  epsilon);  [CE]  cannot  find  symbol  Factory  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  mean,  epsilon);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  mean,  epsilon);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Factory	53	None	replace
1163	[BUG]  [BUGGY]  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [CE]  double  cannot  be  dereferenced  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl(mean.sqrt(p,  epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl(mean.sqrt(p,  epsilon));	  NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
1164	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean  /  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean  /  1);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean  /  1);	  int    epsilon    =    Math.abs(mean    +    1);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	161	None	replace
1165	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(mean,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(mean,  epsilon);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(mean,  epsilon);	  int    epsilon    =    Math.abs(mean,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	86	None	replace
1166	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
1167	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	80	4	add
1168	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.message  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  message  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.message  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon    =    Math.max(mean,    DEFAULT_EPSILON);    epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  this.message  =  Math.max(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  message	80	None	add
1169	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sint(p),  FastMath.sint(mean));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sint(p),  FastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(Math.sint(p),  FastMath.sint(mean));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(p,    FastMath.sint(mean));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	96	None	replace
1170	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	51	None	replace
1171	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Math.sqrt(mean,  p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(Math.sqrt(mean,    p));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	164	None	replace
1172	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(Math.abs(p)));  [CE]  double  cannot  be  dereferenced  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(Math.abs(p)));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(Math.abs(p)));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
1173	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message,  p));  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(mean.sqrt(message,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(mean.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol  message	148	None	replace
1174	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(fastMath.sqrt(p),    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	212	None	replace
1175	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(Math.abs(mean)));  [CE]  cannot  find  symbol  Factory  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sqrt(Math.abs(mean)));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sqrt(Math.abs(mean)));	  normal    =    new    NormalDistributionImpl(Factory.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	178	None	replace
1176	[BUG]  [BUGGY]  int  epsilon  =  Math.abs(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  int  epsilon  =  Math.abs(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	int  epsilon  =  Math.abs(deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  int    epsilon    =    Math.abs(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	202	None	replace
1177	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(comment,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  FastMath.sqrt(comment,  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  FastMath.sqrt(comment,  p);	  NormalDistributionImpl    epsilon    =    FastMath.sqrt(message,    p);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	93	None	replace
1178	[BUG]  [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	p  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    p    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	187	None	replace
1179	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(defULT_EPSILON));	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  Normal	169	None	replace
1180	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Factory  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  Factory	170	None	replace
1181	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  fastMath  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  fastMath	170	None	replace
1182	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [CE]  ')'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFA	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  ')'  expected	198	None	replace
1183	[BUG]  [BUGGY]  Math.max(normal,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [CE]  no  suitable  method  found  for  max(NormalDistribution,double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(normal,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(normal,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;	          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    this.epsilon    =    epsilon;    	non-compiled	[CE]  no  suitable  method  found  for  max(NormalDistribution,double)	208	None	replace
1184	[BUG]  [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [CE]  cannot  find  symbol  Normal  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(mean),  p);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    Normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Normal	157	None	replace
1185	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  maxIterations);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	175	None	add
1186	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));  [CE]  cannot  find  symbol  Factory  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sqrt(mean));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(n,    FastMath.sqrt(mean));    	non-compiled	[CE]  cannot  find  symbol  Factory	102	None	replace
1187	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [CE]  cannot  find  symbol  defsilon  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    mean,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defsilon	69	None	replace
1188	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  Math.max(mean,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	5	None	replace
1189	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	114	1	replace
1190	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(mean,  FastMath.sqrt(mean));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sqrt(p));    	compilable	  [FE]  MathRuntimeException$4  	114	1	replace
1191	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1192	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.s	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1193	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PsilonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  PsilonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    PsilonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
1194	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [CE]  incompatible  types  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean));    p  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean));	  	non-compiled	[CE]  incompatible  types	11	None	add
1195	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(message,  p));  [CE]  cannot  find  symbol  message  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(message,  p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(message,  p));	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  message	191	None	replace
1196	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean),  p);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean),  p);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(FastMath.sint(mean),  p);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1197	[BUG]  [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  p  =  new  PoissonDistributionImpl(mean,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  DEFAULT_EPSILON);	  PoissonDistributionImpl    p    =    new    PoissonDistributionImpl(mean,    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS,    DEFAULT_EPSILON);    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	141	None	replace
1198	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  Factory  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  Factory	55	None	replace
1199	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Factory  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(Factory.sint(p),  DEFAULT_EPSILON);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  Factory	55	None	replace
1200	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  fastMath  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(fastMath.sint(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sint(mean),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  fastMath	55	None	replace
1201	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	138	2	replace
1202	[BUG]  [BUGGY]  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	epsilon  =  Math.min(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.min(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	138	2	replace
1203	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(deFAULT_EPSILON.sint(p));	  normal    =    new    NormalDistributionImpl(fastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	194	None	replace
1204	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,int)	127	None	replace
1205	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  mean,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	127	None	replace
1206	[BUG]  [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(mean  <  =  0)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1207	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  p,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  p,  epsilon,  maxIterations);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(mean),  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(mean),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	126	None	replace
1208	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(Math.sqrt(p),    DEFAULT_EPSILON,    DEFAULT_MAX_ITERATIONS);    PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(Math.sqrt(p),  deFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  	non-compiled	[CE]  variable  normal  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	188	None	add
1209	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  MEAN  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  MEAN  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    p    =    FastMath.sqrt(p);    MEAN  =  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  p  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  MEAN	76	None	add
1210	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
1211	[BUG]  [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  Math.min(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.max(mean,    DEFAULT_MAX_ITERATIONS);    Math.min(mean,  DEFAULT_MAX_ITERATIONS);	  	compilable	  [FE]  MathRuntimeException$4  	8	1	add
1212	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int,int)	143	None	replace
1213	[BUG]  [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	PoissonDistributionImpl  normal  =  new  PoissonDistributionImpl(mean,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);	  PoissonDistributionImpl    normal    =    new    PoissonDistributionImpl(mean,    FastMath.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	143	None	replace
1214	[BUG]  [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  if(mean  <  =  0)  {  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          Math.max(mean,    DEFAULT_EPSILON);    Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  if(mean  <  =  0)  {  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                Math.max(mean,        DEFAULT_EPSILON);        Math.max(mean,    DEFAULT_EPSILON);    this.epsilon    =    epsilon;    if(mean  <  =  0)  {  Math.max(mean,  DEFAULT_EPSILON);  Math.max(mean,  DEFAULT_EPSILON);  this.epsilon  =  epsilon;  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
1215	[BUG]  [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  Normal  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal        =        new        NormalDistributionImpl(p,        FastMath.sqrt(epsilon));        NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    Normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol  Normal	118	None	add
1216	[BUG]  [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  epsilon  =  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));	  NormalDistributionImpl    epsilon    =    new    NormalDistributionImpl(message,    FastMath.sqrt(p));    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	172	None	replace
1217	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqr  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqr  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(p,  FastMath.sqr	  	non-compiled	[CE]  ')'  expected	30	None	add
1218	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	6	None	add
1219	[BUG]  [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  Math.min(mean,  DEFAULT_EPSILON);  Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	Math.min(mean,    DEFAULT_EPSILON);    Math.min(mean,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p)	  	non-compiled	[CE]  ')'  expected	6	None	add
1220	[BUG]  [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(mean));  [CE]  cannot  find  symbol  fastMath  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  normal  =  new  NormalDistributionImpl(fastMath.sint(mean));  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	normal  =  new  NormalDistributionImpl(fastMath.sint(mean));	  normal    =    new    NormalDistributionImpl(mean,    FastMath.sint(p));    	non-compiled	[CE]  cannot  find  symbol  fastMath	95	None	replace
1221	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  }  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p));  }	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1222	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  normal  =  new  NormalDistributionImpl(normal,  FastMath.sqrt(p	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    normal    =    new    NormalDistributionImpl(normal,    FastMath.sqrt(p));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1223	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
1224	[BUG]  [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	NormalDistributionImpl  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    NormalDistributionImpl    normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  MathRuntimeException$4  	119	2	replace
1225	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqr  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqr  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	                epsilon        =        Math.max(epsilon,        DEFAULT_EPSILON);        epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.normal    =    new    NormalDistributionImpl(p,    FastMath.sqrt(p));    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.normal  =  new  NormalDistributionImpl(p,  FastMath.sqr	  	non-compiled	[CE]  ')'  expected	28	None	add
1226	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	add	this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
1227	[BUG]  [BUGGY]  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;      [BUGGY]  this.maxIterations  =  maxIterations;  [BUGGY]      normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	97	97	1	replace	this.maxIterations  =  maxIterations;	          epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.maxIterations    =    maxIterations;    	compilable	  [FE]  MathRuntimeException$4  	33	2	replace
