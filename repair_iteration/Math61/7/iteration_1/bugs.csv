bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    super(p,  epsilon,  maxIterations);  [CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super(p,  epsilon,  maxIterations);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super(p,  epsilon,  maxIterations);		non-compiled	[CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;	14	None	add
2	[BUG]  [BUGGY]    this(null,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(<null>,double,int)  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this(null,  epsilon,  maxIterations);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    this(null,  epsilon,  maxIterations);		non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(<null>,double,int)	14	None	add
3	[BUG]  [BUGGY]    this(null,  null,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(<null>,<null>,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this(null,  null,  epsilon,  maxIterations);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    this(null,  null,  epsilon,  maxIterations);		non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(<null>,<null>,double,int)	14	None	add
4	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	    this.mean  =  Math.max(0.0,  epsilon);		compilable	  [FE]  MathRuntimeException$4  	14	1	add
5	[BUG]  [BUGGY]    this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    this.mean  =  Math.max(0.0,  epsilon);		compilable	  [FE]  MathRuntimeException$4  	14	1	add
6	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  p;  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	    this.mean  =  p;		compilable	  [FE]  MathRuntimeException$4  	14	1	add
7	[BUG]  [BUGGY]    this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  p;  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    this.mean  =  p;		compilable	  [FE]  MathRuntimeException$4  	14	1	add
8	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  0)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0)  {	if  (p  <=  0)  {  	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
9	[BUG]  [BUGGY]  if(p  <  0)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  0)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0)  {	if  (p  <=  0)  {  	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
10	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  =  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  ==  maxIterations)  {	if  (p  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  =  0  ||  epsilon  <  maxIterations)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  <  maxIterations)  {	if  (p  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  =  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  >=  maxIterations)  {	if  (p  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  =  0  ||  epsilon  >  maxIterations)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  >  maxIterations)  {	if  (p  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]    super(epsilon,  maxIterations);  [CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super(epsilon,  maxIterations);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super(epsilon,  maxIterations);		non-compiled	[CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;	14	None	add
15	[BUG]  [BUGGY]    super(null,  epsilon,  maxIterations);  [CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super(null,  epsilon,  maxIterations);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super(null,  epsilon,  maxIterations);		non-compiled	[CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;	14	None	add
16	[BUG]  [BUGGY]    super(p,  epsilon);  [CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super(p,  epsilon);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super(p,  epsilon);		non-compiled	[CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;	14	None	add
17	[BUG]  [BUGGY]    super(epsilon);  [CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super(epsilon);  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super(epsilon);		non-compiled	[CE]  constructor  AbstractIntegerDistribution  in  class  AbstractIntegerDistribution  cannot  be  applied  to  given  types;	14	None	add
18	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  epsilon;  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	    this.mean  =  epsilon;		compilable	  [FE]  MathRuntimeException$4  	14	1	add
19	[BUG]  [BUGGY]    this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    this.mean  =  epsilon;  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    this.mean  =  epsilon;		compilable	  [FE]  MathRuntimeException$4  	14	1	add
20	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super();  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	    super();		compilable	  [FE]  MathRuntimeException$4  	14	1	add
21	[BUG]  [BUGGY]    super();  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]    super();  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	    super();		compilable	  [FE]  MathRuntimeException$4  	14	1	add
22	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON)  {	if  (p  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  epsilon)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon)  {	if  (p  <=  0)  {  	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
24	[BUG]  [BUGGY]  if(p  <  epsilon)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  [BUGGY]  if(p  <  epsilon)  {  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon)  {	if  (p  <=  0)  {  	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
