bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(null,  epsilon);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(null,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon);	      super(epsilon);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  super(null,  p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(null,  p,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  epsilon,  maxIterations);	      super(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      super(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  super(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      super(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
6	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
7	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
8	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  }  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  }  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  }	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
9	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  }	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
10	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN  +  DEFAULT_MAX_ITERATIONS);  }  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN  +  DEFAULT_MAX_ITERATIONS);  }  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN  +  DEFAULT_MAX_ITERATIONS);  }	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
11	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  Math.max(0.0,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  p);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  +  1);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  maxIterations);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  *  maxIterations);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  this.mean  =  p  +  1;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  p  +  1;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  +  1;	      this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  +  DEFAULT_EPSILON;	      this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  =  0  ||  p  >  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  >  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  >  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
18	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  >  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
19	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	1	replace
20	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	1	replace
21	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
22	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	1	replace
23	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	1	replace
24	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	12	replace
25	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	22	12	replace
26	[BUG]  [BUGGY]  this(p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(p,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon,  maxIterations);	      this(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  this(null,  p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  p,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  p,  epsilon,  maxIterations);	      this(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  this(p,  null,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(p,  null,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  epsilon,  maxIterations);	      this(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  this(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      this(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  this(null,  null,  p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  null,  p,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  epsilon,  maxIterations);	      this(null,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  this(null,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      this(null,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);	      this(null,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  =  0  ||  p  ==  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  ==  maxIterations)  {	  if(p    <    =    0    ||    epsilon    ==    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  ==  maxIterations)  {	  if(p    <    =    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
35	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  ==  maxIterations)  {	  if(p    <    =    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	10	1	replace
36	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  ==  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  =  0  ||  epsilon  ==  DEFAULT_EPSILON)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  ==  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  >=  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
38	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  >=  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
39	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  =  0  ||  p  >=  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  >=  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >=    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	18	1	add
41	[BUG]  [BUGGY]      this.mean  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	18	1	add
42	[BUG]  [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	18	None	add
43	[BUG]  [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	18	None	add
44	[BUG]  [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	18	None	add
45	[BUG]  [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	18	None	add
46	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  <  maxIterations)  {	  if(p    <    0)    {    	compilable	  [FE]  MathRuntimeException$4  	9	12	replace
47	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  <  maxIterations)  {	  if(p    <    0)    {    	compilable	  [FE]  MathRuntimeException$4  	9	12	replace
48	[BUG]  [BUGGY]  if(p  <  0)  {  if(p  <  0)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0)  {  if(p  <  0)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0)    {    if(p  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
49	[BUG]  [BUGGY]  if(p  <  0)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0)  {  If(p  <  0)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0)    {    If(p  <  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
50	[BUG]  [BUGGY]  if(p  <  0)  {  if(p  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0)  {  if(p  >=  0)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0)    {    if(p  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
51	[BUG]  [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  maxIterations,  DEFAULT_EPSILON);	      super(epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_EPSILON,  maxIterations);	      super(epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
53	[BUG]  [BUGGY]  super(epsilon,  maxIterations,  p);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(epsilon,  maxIterations,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  maxIterations,  p);	      super(epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
54	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  DEFAULT_EPSILON;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;	      this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
55	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  =  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {	  if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  ==  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  ==  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
57	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  ==  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  ==  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
58	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  >  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
59	[BUG]  [BUGGY]  if(p  >  epsilon)  {  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  >  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
60	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  >=  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >=  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
61	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  >=  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >=  epsilon)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
62	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  =  0  ||  p  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  <  maxIterations)  {	  if(p    <    =    0    ||    epsilon    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  =  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
64	[BUG]  [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
65	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	      super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  super(p,  epsilon,  MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  epsilon,  MAX_ITERATIONS,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  MAX_ITERATIONS,  maxIterations);	      super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]      super();  super();  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  super();  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    super();	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	20	None	add
69	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
70	[BUG]  [BUGGY]      super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
71	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.maxIterations  =  maxIterations;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
72	[BUG]  [BUGGY]      super();  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.maxIterations  =  maxIterations;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
73	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.epsilon  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
74	[BUG]  [BUGGY]      super();  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.epsilon  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
75	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
76	[BUG]  [BUGGY]      super();  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
77	[BUG]  [BUGGY]  if(p  <  epsilon)  {  if(p  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon)  {  if(p  <  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon)    {    if(p  <  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
78	[BUG]  [BUGGY]  if(p  <  epsilon)  {  If(p  <  epsilon)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon)  {  If(p  <  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon)    {    If(p  <  epsilon)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
79	[BUG]  [BUGGY]  if(p  <  epsilon)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon)  {  if(p  >=  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon)    {    if(p  >=  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
80	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
81	[BUG]  [BUGGY]      this.mean  =  p;  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	6	1	add
82	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	6	None	add
83	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	6	None	add
84	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	6	None	add
85	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	add
86	[BUG]  [BUGGY]  super(epsilon,  p);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(epsilon,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  p);	      super(p,    epsilon);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
87	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  epsilon);	      super(p,    epsilon);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
88	[BUG]  [BUGGY]  super(p,  maxIterations,  epsilon);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  maxIterations,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  maxIterations,  epsilon);	      super(p,    epsilon);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
89	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  p)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  p)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
90	[BUG]  [BUGGY]  if(epsilon  <  p)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(epsilon  <  p)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  p)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
91	[BUG]  [BUGGY]  super(epsilon,  p,  maxIterations);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(epsilon,  p,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  p,  maxIterations);	      super(epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  this(null,  null,  p,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  null,  p,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  maxIterations);	      this(null,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
93	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
94	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(DEFAULT_EPSILON,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  epsilon);	      super(epsilon);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  p);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(DEFAULT_EPSILON,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  p);	      super(epsilon);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
96	[BUG]  [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  incompatible  types	20	None	add
97	[BUG]  [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  incompatible  types  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  	non-compiled	[CE]  incompatible  types	20	None	add
98	[BUG]  [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [CE]  incompatible  types  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);	  	non-compiled	[CE]  incompatible  types	20	None	add
99	[BUG]  [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,int,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations);	  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,int,int)	20	None	add
100	[BUG]  [BUGGY]  super(p,  epsilon,  0,  maxIterations);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  epsilon,  0,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  maxIterations);	      super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
101	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
102	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	4	None	add
103	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	4	None	add
104	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	4	None	add
105	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	6	None	add
106	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	add
107	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  epsilon  <  maxIterations)  {	  if(p    <    =    0    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	11	12	replace
108	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  epsilon  <  maxIterations)  {	  if(p    <    =    0    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	11	12	replace
109	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
110	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	12	1	replace
111	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(1.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
112	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  =  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
113	[BUG]  [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	18	None	add
114	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  p  >  epsilon)  {	  if(p    <    0)    {    	compilable	  [FE]  MathRuntimeException$4  	9	12	replace
115	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  p  >  epsilon)  {	  if(p    <    0)    {    	compilable	  [FE]  MathRuntimeException$4  	9	12	replace
116	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
117	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
118	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	4	None	add
119	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	4	None	add
120	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
121	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	4	1	add
122	[BUG]  [BUGGY]  this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations);	      this(null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
123	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  maxIterations);	      super(p,    epsilon);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
124	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
125	[BUG]  [BUGGY]      super();  this.mean  =  Math.max(this.epsilon,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
126	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
127	[BUG]  [BUGGY]      super();  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  epsilon;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
128	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	        super();    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
129	[BUG]  [BUGGY]      super();  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]      super();  this.mean  =  p;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	        super();    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	20	1	add
130	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  maxIterations)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
131	[BUG]  [BUGGY]  if(p  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  maxIterations)  {	  if(p    <    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	24	12	replace
132	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  epsilon  >  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
133	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  epsilon  >  maxIterations)  {	  if(p    <    =    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	13	1	replace
134	[BUG]  [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  *  DEFAULT_EPSILON;	      this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
135	[BUG]  [BUGGY]  super(DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {    [BUGGY]  super(DEFAULT_EPSILON);  [BUGGY]    if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON);	      super();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
