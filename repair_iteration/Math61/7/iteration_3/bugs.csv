bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this(p,  epsilon);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon);	  super(epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
2	[BUG]  [BUGGY]  super(p,  epsilon.maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon.maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon.maxIterations);	  super(epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
3	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
4	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  this.epsilon  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  this.epsilon  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon);  this.epsilon  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
5	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  ==  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  p  ==  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  ==  epsilon)  {	  if(epsilon    <    =    0    ||    p    >=    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
6	[BUG]  [BUGGY]  this(null,  null,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  DEFAULT_EPSILON,  maxIterations);	  this(null,    null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
7	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  DEFAULT_EPSILON,  p,  maxIterations);	  this(null,    null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
8	[BUG]  [BUGGY]  this(null,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this(null,    null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
9	[BUG]  [BUGGY]  this(p,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this(null,    null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
10	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
11	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
12	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  super(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
13	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.epsilon  =  epsilon;	          super();    this.epsilon    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
14	[BUG]  [BUGGY]  super();  this.epsilon  =  p;  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super();  this.epsilon  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super();  this.epsilon  =  p;	          super();    this.epsilon    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
15	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
16	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
17	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  DEFAULT_EPSILON,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
18	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  maxIterations,  DEFAULT_EPSILON);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
19	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
20	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon));	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
21	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
22	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
23	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
24	[BUG]  [BUGGY]  this(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
25	[BUG]  [BUGGY]  this(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
26	[BUG]  [BUGGY]  this(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
27	[BUG]  [BUGGY]  this(p,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  epsilon,  DEFAULT_EPSILON);	  this(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
28	[BUG]  [BUGGY]  this.mean  =  Math.ceil(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.ceil(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.ceil(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN    +    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);	  super(p,    epsilon,    MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
30	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MASK_ITERATIONS,  maxIterations);	  super(p,    epsilon,    MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
31	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  p  +  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
32	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  1);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  *  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
33	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  2);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  2);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  +  2);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0)  {	  if(p    <    0)    {    if(p    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(Math.abs(p)  <  epsilon)  {	  if(p    <    0)    {    if(p    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
36	[BUG]  [BUGGY]  if(Math.abs(p)  <  epsilon)  {  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(Math.abs(p)  <  epsilon)  {	  if(p    <    0)    {    if(p    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
37	[BUG]  [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	This.mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
38	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(1.0,  p);	  this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
39	[BUG]  [BUGGY]  this(p,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this(null,    null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
40	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  this(null,    null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
41	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    if(p  <  epsilon  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
42	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  If(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  If(p  <  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    If(p  <  epsilon  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
43	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  >=  epsilon  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  >=  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    if(p  >=  epsilon  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
44	[BUG]  [BUGGY]  this(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
45	[BUG]  [BUGGY]  this(null,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  p,  DEFAULT_EPSILON,  maxIterations);	  this(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
46	[BUG]  [BUGGY]  this(null,  p,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  p,  epsilon,  DEFAULT_EPSILON);	  this(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
47	[BUG]  [BUGGY]  if(p  >  epsilon)  {  if(p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon)  {  if(p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >    epsilon)    {    if(p  >  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
48	[BUG]  [BUGGY]  if(p  >  epsilon)  {  If(p  >  epsilon)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon)  {  If(p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >    epsilon)    {    If(p  >  epsilon)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
49	[BUG]  [BUGGY]  if(p  >  epsilon)  {  when(p  >  epsilon)  {  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon)  {  when(p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >    epsilon)    {    when(p  >  epsilon)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
50	[BUG]  [BUGGY]  n  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  n  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	n  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
51	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  ==  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	36	12	replace
52	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  ==  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	36	12	replace
53	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
54	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon!=  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon!=  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon!=  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
55	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
56	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  0  ||  p  ==  maxIterations)  {	  if(p    <    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
58	[BUG]  [BUGGY]  if(epsilon  <  0  ||  p  ==  maxIterations)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  0  ||  p  ==  maxIterations)  {	  if(p    <    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	35	2	replace
59	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
60	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
61	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
62	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	          super();    this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
63	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  DEFAULT_EPSILON;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.epsilon  =  epsilon;  this.maxIterations  =  DEFAULT_EPSILON;	          super();    this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
64	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  epsilon;  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.epsilon  =  epsilon;  this.maxIterations  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.epsilon  =  epsilon;  this.maxIterations  =  epsilon;	          super();    this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
65	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >=    maxIterations)    {    if(p  <  0  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
66	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon!=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon!=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >=    maxIterations)    {    if(p  <  0  ||  epsilon!=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
67	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  >>  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  >>  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >=    maxIterations)    {    if(p  <  0  ||  epsilon  >>  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
68	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >=    maxIterations)    {    if(p  <  0  ||  epsilon  ==  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
69	[BUG]  [BUGGY]  this.mean  =  p  +  2;  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p  +  2;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  +  2;	  this.mean    =    p    +    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  this.mean  =  p  +  3;  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p  +  3;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  +  3;	  this.mean    =    p    +    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  super(p,  0,  epsilon);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  0,  epsilon);	  super(p,    maxIterations,    epsilon);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
72	[BUG]  [BUGGY]  this(null,  null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this(null,    null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
73	[BUG]  [BUGGY]  this(null,  null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this(null,    null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
74	[BUG]  [BUGGY]  this(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this(null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
75	[BUG]  [BUGGY]  this.mean  =  p;  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  this.mean  =  epsilon;	          this.mean    =    epsilon;    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
76	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >=  epsilon)  {  if(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >=    epsilon)    {    if(p  >=  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
77	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  if(p!=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >=  epsilon)  {  if(p!=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >=    epsilon)    {    if(p!=  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
78	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  if(p  >>  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >=  epsilon)  {  if(p  >>  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >=    epsilon)    {    if(p  >>  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
79	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  if(p  ==  epsilon)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >=  epsilon)  {  if(p  ==  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >=    epsilon)    {    if(p  ==  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
80	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  If(p  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  If(p  <  =  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  If(p  <  =  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
81	[BUG]  [BUGGY]  If(p  <  epsilon)  {  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  If(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	If(p  <  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
82	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  If(p  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0)  {  If(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0)  {  If(p  <  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
83	[BUG]  [BUGGY]  If(p  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  If(p  <  =  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	If(p  <  =  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
84	[BUG]  [BUGGY]  this(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this(null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
85	[BUG]  [BUGGY]  this(null,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  DEFAULT_EPSILON,  p,  maxIterations);	  this(null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
86	[BUG]  [BUGGY]  this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  this(null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
87	[BUG]  [BUGGY]  super(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  super(null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
88	[BUG]  [BUGGY]  super(null,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  DEFAULT_EPSILON,  maxIterations);	  super(null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
89	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  epsilon,  maxIterations);	          super();    super();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
90	[BUG]  [BUGGY]  if(epsilon  <  p)  {  if(epsilon  <  p)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  p)  {  if(epsilon  <  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon    <    p)    {    if(epsilon  <  p)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
91	[BUG]  [BUGGY]  if(epsilon  <  p)  {  If(epsilon  <  p)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  p)  {  If(epsilon  <  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon    <    p)    {    If(epsilon  <  p)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
92	[BUG]  [BUGGY]  if(epsilon  <  p)  {  if(epsilon  >=  p)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  p)  {  if(epsilon  >=  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon    <    p)    {    if(epsilon  >=  p)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
93	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
94	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);	  super(p,    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
95	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MIN_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_MIN_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MIN_ITERATIONS,  maxIterations);	  super(p,    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
96	[BUG]  [BUGGY]  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  epsilon;  this.maxIterations  =  maxIterations;	          super();    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
97	[BUG]  [BUGGY]  this.maxIterations  =  epsilon;  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.maxIterations  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.maxIterations  =  epsilon;	          super();    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
98	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
99	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
100	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    if(p  <  epsilon  ||  epsilon  <  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
101	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  If(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  If(p  <  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    If(p  <  epsilon  ||  epsilon  <  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	107	None	add
102	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  <  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
103	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    super();  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	69	None	add
104	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	69	None	add
105	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
106	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
107	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	69	None	add
108	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	69	None	add
109	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
110	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
111	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
112	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
113	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
114	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	108	12	replace
115	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	108	12	replace
116	[BUG]  [BUGGY]  if(p  <  =  epsilon  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon  ||  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
117	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
118	[BUG]  [BUGGY]  this.mean  =  epsilon;  this.mean  =  p;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  epsilon;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  epsilon;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
119	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	110	1	replace
120	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	110	1	replace
121	[BUG]  [BUGGY]  if(p  <  =  epsilon  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon  ||  epsilon  >=  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
122	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  p);	  this.mean    =    Math.min(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
123	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon  +  1);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon  +  1);	  this.mean    =    Math.min(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
124	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon,  maxIterations);	  this.mean    =    Math.min(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
125	[BUG]  [BUGGY]  this(null,  null,  p,  epsilon);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  epsilon);	  this(null,    null,    p,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
126	[BUG]  [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    This.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
127	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.epsilon    =    epsilon;    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	73	1	add
128	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	73	1	add
129	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	73	None	add
130	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	73	None	add
131	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  super();  this.epsilon  =  epsilon;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  super();  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    super();  this.epsilon  =  epsilon;	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	73	None	add
132	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	73	None	add
133	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon  +  1);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(1.0,  epsilon  +  1);	  this.mean    =    Math.max(1.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
134	[BUG]  [BUGGY]  this.mean  =  Math.max(0.5,  epsilon);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.5,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.5,  epsilon);	  this.mean    =    Math.max(1.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
135	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  =  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  <  =  epsilon)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
136	[BUG]  [BUGGY]  if(p  <  =  MAX_EPSILON)  {  if(p  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  MAX_EPSILON)  {  if(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  MAX_EPSILON)  {  if(p  <  epsilon)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
137	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  <  epsilon)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
138	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  <  maxIterations)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
139	[BUG]  [BUGGY]  this.mean  =  Math.max(this.epsilon,  p);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(this.epsilon,  p);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
140	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  epsilon);  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(p,  epsilon);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
141	[BUG]  [BUGGY]  this.mean  =  Math.max(this.epsilon,  0);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(this.epsilon,  0);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(this.epsilon,  0);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
142	[BUG]  [BUGGY]  this.mean  =  Math.max(this.epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(this.epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(this.epsilon,  maxIterations);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
143	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
144	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
145	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  if(p  <  0  ||  p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  if(p  <  0  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    p    >    epsilon)    {    if(p  <  0  ||  p  >  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
146	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  If(p  <  0  ||  p  >  epsilon)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  If(p  <  0  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    p    >    epsilon)    {    If(p  <  0  ||  p  >  epsilon)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
147	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  if(p  >=  0  ||  p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  if(p  >=  0  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    p    >    epsilon)    {    if(p  >=  0  ||  p  >  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
148	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  <  0  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  <  0  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    <    maxIterations)    {    if(p  <  0  ||  epsilon  <  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
149	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  If(p  <  0  ||  epsilon  <  maxIterations)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  If(p  <  0  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    <    maxIterations)    {    If(p  <  0  ||  epsilon  <  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
150	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  >=  0  ||  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  >=  0  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    <    maxIterations)    {    if(p  >=  0  ||  epsilon  <  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
151	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    <    maxIterations)    {    if(p  <  0  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
152	[BUG]  [BUGGY]  super(p,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);	  super(p,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
153	[BUG]  [BUGGY]  super(p,  epsilon,  0,  epsilon.maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  0,  epsilon.maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  epsilon.maxIterations);	  super(p,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
154	[BUG]  [BUGGY]  super(p,  epsilon,  0,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  0,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  DEFAULT_MAX_ITERATIONS);	  super(p,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
155	[BUG]  [BUGGY]  super(p,  epsilon,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  0,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  DEFAULT_EPSILON);	  super(p,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
156	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
157	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  If(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  If(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    If(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
158	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  >=  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  >=  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    if(p  >=  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
159	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    if(p  <  DEFAULT_EPSILON  ||  epsilon  >=  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
160	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
161	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
162	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
163	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
164	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
165	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
166	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  mean  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	5	None	add
167	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	5	None	add
168	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
169	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  super(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
170	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  super(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
171	[BUG]  [BUGGY]  super(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  super(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
172	[BUG]  [BUGGY]  super(null,  p,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  epsilon,  DEFAULT_EPSILON);	  super(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
173	[BUG]  [BUGGY]  super(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  super(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
174	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
175	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
176	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
177	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
178	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  mean  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    Math.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	116	None	add
179	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
180	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
181	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	116	None	add
182	[BUG]  [BUGGY]  if(p  <  =  epsilon  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon  ||  epsilon  >  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
183	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  >  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	133	1	replace
184	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  >  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	133	1	replace
185	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  maxIterations  ||  p  >  epsilon)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	133	12	replace
186	[BUG]  [BUGGY]  if(epsilon  <  maxIterations  ||  p  >  epsilon)  {  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  maxIterations  ||  p  >  epsilon)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	133	12	replace
187	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  /  maxIterations);	  this.mean    =    Math.max(0.0,    epsilon    *    maxIterations);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
188	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  *  DEFAULT_EPSILON);	  this.mean    =    Math.max(0.0,    epsilon    *    maxIterations);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
189	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  *  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  *  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  p  *  maxIterations);	  this.mean    =    Math.max(0.0,    epsilon    *    maxIterations);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
190	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  *  epsilon);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  *  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  p  *  epsilon);	  this.mean    =    Math.max(0.0,    epsilon    *    maxIterations);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
191	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
192	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
193	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  super();  this.mean  =  Math.max(0.0,  epsilon);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  super();  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    super();  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	75	None	add
194	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	75	None	add
195	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	75	None	add
196	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	75	None	add
197	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_EPSILON);	  super(DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
198	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON);	  super(DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
199	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  epsilon,  maxIterations);	  super(DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
200	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	128	1	add
201	[BUG]  [BUGGY]          super();    this.mean  =  p;  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	128	1	add
202	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	128	None	add
203	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	128	None	add
204	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	128	None	add
205	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	128	None	add
206	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  if(p  ==  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  if(p  ==  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    ==    epsilon)    {    if(p  ==  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
207	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  If(p  ==  epsilon)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  If(p  ==  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    ==    epsilon)    {    If(p  ==  epsilon)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
208	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  if(p!=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  if(p!=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    ==    epsilon)    {    if(p!=  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
209	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  if(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    ==    epsilon)    {    if(p  >=  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
210	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	63	12	replace
211	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  epsilon  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	63	12	replace
212	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  <  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  p  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
213	[BUG]  [BUGGY]  this(p,  null,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this(p,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
214	[BUG]  [BUGGY]  this(p,  null,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  DEFAULT_EPSILON,  maxIterations);	  this(p,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
215	[BUG]  [BUGGY]  this(p,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this(p,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
216	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        epsilon;        this.mean    =    epsilon;    this.mean  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	40	1	add
217	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  this.mean  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    this.mean  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	40	1	add
218	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	40	None	add
219	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	40	None	add
220	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	40	None	add
221	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	40	None	add
222	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
223	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
224	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  if(p  <  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  if(p  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON)    {    if(p  <  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
225	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  If(p  <  DEFAULT_EPSILON)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  If(p  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON)    {    If(p  <  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
226	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  if(p  >=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON)  {  if(p  >=  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON)    {    if(p  >=  DEFAULT_EPSILON)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
227	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(this.epsilon,    p);    this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
228	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
229	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	124	None	add
230	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  super();  this.mean  =  Math.max(this.epsilon,  p);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  super();  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    super();  this.mean  =  Math.max(this.epsilon,  p);	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	124	None	add
231	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	124	None	add
232	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	124	None	add
233	[BUG]  [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  super(null,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
234	[BUG]  [BUGGY]  if(epsilon  <  =  p)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  p)  {	  if(epsilon    <    p)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
235	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  maxIterations)  {	  if(epsilon    <    p)    {    	compilable	  [FE]  MathRuntimeException$4  	90	12	replace
236	[BUG]  [BUGGY]  if(epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  maxIterations)  {	  if(epsilon    <    p)    {    	compilable	  [FE]  MathRuntimeException$4  	90	12	replace
237	[BUG]  [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  super(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
238	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  super(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
239	[BUG]  [BUGGY]  super(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  super(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
240	[BUG]  [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  super(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
241	[BUG]  [BUGGY]  if(p  <  =  0)  {  If(p  <  0)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
242	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  ==  epsilon)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
243	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  epsilon)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  p  >  epsilon)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
244	[BUG]  [BUGGY]  if(p  <  0)  {  If(p  >  0)  {  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0)  {  If(p  >  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0)  {  If(p  >  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
245	[BUG]  [BUGGY]  if(p  <  =  0  ||  p  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  p  >  maxIterations)  {	  if(epsilon    <    =    0    ||    p    >    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
246	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  if(p  <  0  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  if(p  <  0  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >    maxIterations)    {    if(p  <  0  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
247	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  If(p  <  0  ||  epsilon  >  maxIterations)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  If(p  <  0  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >    maxIterations)    {    If(p  <  0  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
248	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  if(p  >=  0  ||  epsilon  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >  maxIterations)  {  if(p  >=  0  ||  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >    maxIterations)    {    if(p  >=  0  ||  epsilon  >  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
249	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
250	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >>  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >>  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    if(p  <  epsilon  ||  epsilon  >>  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
251	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon!=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon!=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    if(p  <  epsilon  ||  epsilon!=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
252	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
253	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
254	[BUG]  [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
255	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
256	[BUG]  [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
257	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  epsilon  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_MAX_ITERATIONS  ||  epsilon  <  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
258	[BUG]  [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  epsilon  <  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_MAX_ITERATIONS  ||  epsilon  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_MAX_ITERATIONS  ||  epsilon  <  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	112	12	replace
259	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_MAX_ITERATIONS  ||  p  >  DEFAULT_EPSILON)  {	  if(p    <    =    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
260	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
261	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
262	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
263	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	126	1	add
264	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	126	1	add
265	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	126	None	add
266	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	126	None	add
267	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	126	None	add
268	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	126	None	add
269	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  <  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    ==    maxIterations)    {    if(p  <  0  ||  epsilon  ==  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
270	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    ==    maxIterations)    {    if(p  <  0  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
271	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  >=  0  ||  epsilon  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  if(p  >=  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    ==    maxIterations)    {    if(p  >=  0  ||  epsilon  ==  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
272	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  If(p  <  0  ||  epsilon  ==  maxIterations)  {  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  ==  maxIterations)  {  If(p  <  0  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    ==    maxIterations)    {    If(p  <  0  ||  epsilon  ==  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
273	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  >=  epsilon)  {	  if(p    <    epsilon)    {    if(p    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
274	[BUG]  [BUGGY]  if(p  >  epsilon)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon)  {  if(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  epsilon)  {  if(p  >=  epsilon)  {	  if(p    <    epsilon)    {    if(p    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
275	[BUG]  [BUGGY]  if(epsilon  <  =  p)  {  if(p  >=  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  p)  {  if(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  p)  {  if(p  >=  epsilon)  {	  if(p    <    epsilon)    {    if(p    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
276	[BUG]  [BUGGY]  if(p  <  maxIterations)  {  if(p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  maxIterations)  {  if(p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  maxIterations)  {  if(p  >  epsilon)  {	  if(p    <    epsilon)    {    if(p    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
277	[BUG]  [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  super(epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
278	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  super(epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
279	[BUG]  [BUGGY]  super(p,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  maxIterations,  DEFAULT_EPSILON);	  super(epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
280	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
281	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  If(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  If(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    If(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
282	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  >=  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  >=  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    if(p  >=  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
283	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  0  ||  p  >  maxIterations)  {	  if(p    <    0    ||    p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	115	1	replace
284	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  p  >  maxIterations)  {	  if(p    <    0    ||    p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	115	1	replace
285	[BUG]  [BUGGY]  if(p  <  =  0  ||  p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  p  >  epsilon)  {	  if(p    <    0    ||    p    >    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
286	[BUG]  [BUGGY]  if(p  <  0  ||  p  >  MAX_ITERATIONS)  {  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  p  >  MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  0  ||  p  >  MAX_ITERATIONS)  {	  if(p    <    0    ||    p    >    epsilon)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	115	None	replace
287	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  0  ||  p  <  maxIterations)  {	  if(p    <    0    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	47	12	replace
288	[BUG]  [BUGGY]  if(epsilon  <  0  ||  p  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  0  ||  p  <  maxIterations)  {	  if(p    <    0    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	47	12	replace
289	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        p;        this.mean    =    p;    this.mean  =  p;  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
290	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    this.mean  =  p;  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
291	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	80	None	add
292	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
293	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	80	None	add
294	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	80	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  0  ||  p  >  maxIterations)  {	  if(p    <    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
296	[BUG]  [BUGGY]  if(epsilon  <  0  ||  p  >  maxIterations)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0  ||  p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  0  ||  p  >  maxIterations)  {	  if(p    <    0    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
297	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  ==  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  p  ==  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  ==  DEFAULT_EPSILON)  {	  if(epsilon    <    =    0    ||    p    ==    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  ==  DEFAULT_EPSILON)  {	  if(p    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
299	[BUG]  [BUGGY]  if(p  ==  DEFAULT_EPSILON)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  ==  DEFAULT_EPSILON)  {	  if(p    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
300	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  p  <  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  p  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  p  <  DEFAULT_EPSILON)  {	  if(epsilon    <    =    0    ||    p    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
301	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  maxIterations  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  maxIterations  <  epsilon)  {	  if(epsilon    <    =    0    ||    p    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
302	[BUG]  [BUGGY]  if(p  <  =  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  maxIterations)  {	  if(p    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
303	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  =  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  =  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  epsilon  <  =  maxIterations)  {	  if(p    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
304	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
305	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
306	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
307	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	120	1	add
308	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);This.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);This.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);This.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	120	None	add
309	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  e  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	120	None	add
310	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	20	None	replace
311	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	20	12	replace
312	[BUG]  [BUGGY]  if(p  >  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	20	12	replace
313	[BUG]  [BUGGY]  super(epsilon,  null);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  null);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  null);	  super(null,    epsilon);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
314	[BUG]  [BUGGY]  super(null,  p);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p);	  super(null,    epsilon);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
315	[BUG]  [BUGGY]  this.mean  =  p  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  /  DEFAULT_EPSILON;	  this.mean    =    p    *    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	134	None	replace
316	[BUG]  [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON  +  1;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  *  DEFAULT_EPSILON  +  1;	  this.mean    =    p    *    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	134	None	replace
317	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  epsilon);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
318	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  super();  this.maxIterations  =  maxIterations;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  super();  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    super();  this.maxIterations  =  maxIterations;	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	71	None	add
319	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
320	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
321	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.maxIterations    =    maxIterations;    this.mean  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
322	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.mean  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
323	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  normal;  this.epsilon  =  epsilon;  [CE]  incompatible  types  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  normal;  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.mean  =  normal;  this.epsilon  =  epsilon;	  	non-compiled	[CE]  incompatible  types	71	None	add
324	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
325	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
326	[BUG]  [BUGGY]  if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	21	None	replace
327	[BUG]  [BUGGY]  super(epsilon,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  epsilon,  maxIterations);	  super(epsilon,    maxIterations,    p);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  0)  {	  if(p    <    0)    {    if(p    <    0)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
329	[BUG]  [BUGGY]  if(epsilon  <  0)  {  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  0)  {	  if(p    <    0)    {    if(p    <    0)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
330	[BUG]  [BUGGY]  super(p);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p);	  super(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
331	[BUG]  [BUGGY]  if(p  <  maxIterations)  {  if(p  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  maxIterations)  {  if(p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    maxIterations)    {    if(p  <  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
332	[BUG]  [BUGGY]  if(p  <  maxIterations)  {  If(p  <  maxIterations)  {  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  maxIterations)  {  If(p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    maxIterations)    {    If(p  <  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
333	[BUG]  [BUGGY]  if(p  <  maxIterations)  {  if(p  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  maxIterations)  {  if(p  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    maxIterations)    {    if(p  >=  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
334	[BUG]  [BUGGY]  this.mean  =  psilon;  this.mean  =  p;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  psilon;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  psilon;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
335	[BUG]  [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    This.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
336	[BUG]  [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }	          super();    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
337	[BUG]  [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }	          super();    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
338	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  >  maxIterations)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
339	[BUG]  [BUGGY]  if(Math.abs(p)  <  =  Math.abs(epsilon))  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  =  Math.abs(epsilon))  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(Math.abs(p)  <  =  Math.abs(epsilon))  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
340	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  if(p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  if(p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  if(p  >  epsilon)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
341	[BUG]  [BUGGY]  super(p,  epsilon,  0,  DEFAULT_EPSILON.maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  0,  DEFAULT_EPSILON.maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  0,  DEFAULT_EPSILON.maxIterations);	  super(p,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
342	[BUG]  [BUGGY]  Super(p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Super(p,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	Super(p,  epsilon,  maxIterations);	  super(epsilon,    maxIterations,    p);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
343	[BUG]  [BUGGY]  if(p  ==  epsilon)  {  if(p  {  epsilon)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  ==  epsilon)  {  if(p  {  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    ==    epsilon)    {    if(p  {  epsilon)  {	  	non-compiled	[CE]  ')'  expected	56	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  ==  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  ==  p)  {	  if(p    ==    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
345	[BUG]  [BUGGY]  if(epsilon  ==  p)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  ==  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  ==  p)  {	  if(p    ==    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
346	[BUG]  [BUGGY]  if(p  >=  epsilon)  {  If(p  >=  epsilon)  {  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >=  epsilon)  {  If(p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    >=    epsilon)    {    If(p  >=  epsilon)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
347	[BUG]  [BUGGY]  this(null,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  this(null,    null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
348	[BUG]  [BUGGY]  this(null,  null,  p,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  epsilon,  DEFAULT_EPSILON);	  this(null,    null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
349	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon!=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon!=  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon!=  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
350	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  >=  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon  >=  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  >=  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
351	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  DEFAULT_EPSILON  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
352	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  DEFAULT_EPSILON  ||  epsilon  ==  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	25	1	replace
353	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >  DEFAULT_EPSILON)  {	  if(p    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	23	12	replace
354	[BUG]  [BUGGY]  if(p  >  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  DEFAULT_EPSILON)  {	  if(p    <    DEFAULT_EPSILON)    {    	compilable	  [FE]  MathRuntimeException$4  	23	12	replace
355	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
356	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	5	1	add
357	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	5	None	add
358	[BUG]  [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  super(null,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
359	[BUG]  [BUGGY]  super(null,  p,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  p,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  p,  maxIterations,  DEFAULT_EPSILON);	  super(null,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
360	[BUG]  [BUGGY]  this(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  DEFAULT_EPSILON,  maxIterations);	  this(p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
361	[BUG]  [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >  maxIterations)  {	  if(p    <    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	131	1	replace
363	[BUG]  [BUGGY]  if(p  >  maxIterations)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  maxIterations)  {	  if(p    <    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	131	1	replace
364	[BUG]  [BUGGY]  if(epsilon  <  =  0  &&  p  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  &&  p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  &&  p  <  maxIterations)  {	  if(epsilon    <    =    0    ||    p    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
365	[BUG]  [BUGGY]  this(p,  null,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  null,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  null,  epsilon,  DEFAULT_EPSILON);	  this(p,    null,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
366	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  epsilon;	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
367	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
368	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  p  >  epsilon)  {	  if(p    <    0    ||    p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	115	12	replace
369	[BUG]  [BUGGY]  if(p  <  epsilon  ||  p  >  epsilon)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  p  >  epsilon)  {	  if(p    <    0    ||    p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	115	12	replace
370	[BUG]  [BUGGY]  if(epsilon  <  p)  {  If(p  <  epsilon)  {  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  p)  {  If(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  p)  {  If(p  <  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
371	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
372	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	126	None	add
373	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  super();  this.mean  =  epsilon;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  super();  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    super();  this.mean  =  epsilon;	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	126	None	add
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  &&  epsilon  >  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	133	1	replace
375	[BUG]  [BUGGY]  if(p  <  epsilon  &&  epsilon  >  maxIterations)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  >  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  &&  epsilon  >  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	133	1	replace
376	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  epsilon;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  this.mean  =  epsilon;	          this.mean    =    epsilon;    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
377	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  psilon);	  this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
378	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
379	[BUG]  [BUGGY]  super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super();  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  0,  epsilon,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
380	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
381	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats  [CE]  ')'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
382	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats  [CE]  ')'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
383	[BUG]  [BUGGY]  super();  this.maxIterations  =  epsilon;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super();  this.maxIterations  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super();  this.maxIterations  =  epsilon;	          super();    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
384	[BUG]  [BUGGY]  this(p,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(p,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(p,  DEFAULT_EPSILON);	  super(DEFAULT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
385	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON.doubleValue());  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON.doubleValue());  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON.doubleValue());	  super(DEFAULT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
386	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  maxIterations);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  maxIterations);	          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
387	[BUG]  [BUGGY]  this(0.0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(0.0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(0.0,  epsilon,  maxIterations);	          super();    this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
388	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON  [CE]  ')'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN    +    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
389	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT  [CE]  ')'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(0.0,  epsilon);  if(mean  ==  0.0)  {  this.mean  =  Math.max(0.0,  epsilon);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT	          this.mean    =    Math.max(0.0,    epsilon);    if(mean    ==    0.0)    {    this.mean    =    Math.max(0.0,    epsilon);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN    +    DEFAULT_MAX_ITERATIONS);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
390	[BUG]  [BUGGY]  this.mean  =  Math.min(this.epsilon,  p);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.min(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.min(this.epsilon,  p);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
391	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >  maxIters)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >  maxIterations)  {  if(p  <  epsilon  ||  epsilon  >  maxIters)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >    maxIterations)    {    if(p  <  epsilon  ||  epsilon  >  maxIters)  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
392	[BUG]  [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
393	[BUG]  [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  super(epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
394	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  &&  epsilon  >=  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	110	1	replace
396	[BUG]  [BUGGY]  if(p  <  epsilon  &&  epsilon  >=  maxIterations)  {  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  &&  epsilon  >=  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    	compilable	  [FE]  AssertionFailedError  	110	1	replace
397	[BUG]  [BUGGY]  this(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this(null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
398	[BUG]  [BUGGY]  if(epsilon  <  =  0  &&  p  >=  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  &&  p  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  &&  p  >=  maxIterations)  {	  if(epsilon    <    =    0    ||    p    >=    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
399	[BUG]  [BUGGY]  if(epsilon  <  =  0  ||  maxIterations  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  ||  maxIterations  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  ||  maxIterations  >  epsilon)  {	  if(epsilon    <    =    0    ||    p    >=    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
400	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  >  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  >  p)  {	  if(epsilon    <    p)    {    	compilable	  [FE]  MathRuntimeException$4  	90	1	replace
401	[BUG]  [BUGGY]  if(epsilon  >  p)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  >  p)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  >  p)  {	  if(epsilon    <    p)    {    	compilable	  [FE]  MathRuntimeException$4  	90	1	replace
402	[BUG]  [BUGGY]  if(epsilon  <  =  0  &&  p  ==  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0  &&  p  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0  &&  p  ==  maxIterations)  {	  if(epsilon    <    =    0    ||    p    ==    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
403	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	71	None	add
404	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	71	None	add
405	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	71	None	add
406	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	40	None	add
407	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	40	None	add
408	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        epsilon;        this.mean    =    epsilon;    epsilon  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	40	1	add
409	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  epsilon  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    epsilon  =  epsilon;  this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	40	1	add
410	[BUG]  [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  This.mean  =  epsilon;  this.mean  =  epsilon;  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    epsilon;    this.mean  =  epsilon;  This.mean  =  epsilon;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        epsilon;        this.mean    =    epsilon;    This.mean  =  epsilon;  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  This	40	None	add
411	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    =    0    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
412	[BUG]  [BUGGY]  this(null,  null,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this(null,    null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
413	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  >  epsilon  ||  epsilon  <  maxIterations)  {	  if(p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	59	12	replace
414	[BUG]  [BUGGY]  if(p  >  epsilon  ||  epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon  ||  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  epsilon  ||  epsilon  <  maxIterations)  {	  if(p    >    epsilon)    {    	compilable	  [FE]  MathRuntimeException$4  	59	12	replace
415	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	20	1	replace
416	[BUG]  [BUGGY]  if(p  <  epsilon  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	compilable	  [FE]  MathRuntimeException$4  	20	1	replace
417	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_EPSILON,  maxIterations,  mean);	  super(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
418	[BUG]  [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  super(epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
419	[BUG]  [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  If(p  <  0  ||  epsilon  >=  maxIterations)  {  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  0  ||  epsilon  >=  maxIterations)  {  If(p  <  0  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    0    ||    epsilon    >=    maxIterations)    {    If(p  <  0  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
420	[BUG]  [BUGGY]  if(Math.abs(p)  <  epsilon)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  epsilon)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(Math.abs(p)  <  epsilon)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
421	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  If(p  <  0)  {  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  =  0)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  =  0)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
422	[BUG]  [BUGGY]  if(Math.abs(p)  <  epsilon)  {  If(p  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  epsilon)  {  If(p  <  =  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(Math.abs(p)  <  epsilon)  {  If(p  <  =  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
423	[BUG]  [BUGGY]  this(null,  0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  0,  epsilon,  maxIterations);	  this(null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
424	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
425	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        epsilon    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  epsilon  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	116	1	add
426	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  &&  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	108	1	replace
427	[BUG]  [BUGGY]  if(p  <  epsilon  &&  epsilon  <  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  &&  epsilon  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  &&  epsilon  <  maxIterations)  {	  if(p    <    epsilon    ||    epsilon    <    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	108	1	replace
428	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	128	None	add
429	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
430	[BUG]  [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  }	          super();    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
431	[BUG]  [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.UNKNOWN_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.UNKNOWN_MEAN,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  super();  this.mean  =  p;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.UNKNOWN_MEAN,  p);  }	          super();    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
432	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  super(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(Math.abs(p)  <  DEFAULT_EPSILON)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
434	[BUG]  [BUGGY]  if(Math.abs(p)  <  DEFAULT_EPSILON)  {  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(Math.abs(p)  <  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(Math.abs(p)  <  DEFAULT_EPSILON)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
435	[BUG]  [BUGGY]  if(p  <  =  MAX_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  MAX_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  MAX_EPSILON)  {	  if(p    <    epsilon)    {    if(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
436	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_MAX_ITERATIONS);	  super(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
437	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations  ||  p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(epsilon  <  maxIterations  ||  p  >=  epsilon)  {	  if(epsilon    <    =    0    ||    p    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	39	12	replace
438	[BUG]  [BUGGY]  if(epsilon  <  maxIterations  ||  p  >=  epsilon)  {  [FE]  MathRuntimeException$4  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(epsilon  <  maxIterations  ||  p  >=  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(epsilon  <  maxIterations  ||  p  >=  epsilon)  {	  if(epsilon    <    =    0    ||    p    >=    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	39	12	replace
439	[BUG]  [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	128	None	add
440	[BUG]  [BUGGY]  if(p  <  =  epsilon)  {  If(p  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon)  {  If(p  <  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon)  {  If(p  <  epsilon)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
441	[BUG]  [BUGGY]  If(p  <  maxIterations)  {  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  If(p  <  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	If(p  <  maxIterations)  {	  if(p    <    epsilon)    {    If(p    <    epsilon)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
442	[BUG]  [BUGGY]  this.mean  =  Math.max(this.epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(this.epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(this.epsilon,  DEFAULT_EPSILON);	          super();    this.mean    =    Math.max(this.epsilon,    p);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
443	[BUG]  [BUGGY]  this.epsilon  =  epsilon;  super();  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.epsilon  =  epsilon;  super();  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.epsilon  =  epsilon;  super();	          super();    super();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
444	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  epsilon;  }	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    epsilon;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
445	[BUG]  [BUGGY]  if(p  >  epsilon)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  epsilon)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  epsilon)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
446	[BUG]  [BUGGY]  if(p  <  epsilon)  {  If(p  <  0)  {  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon)  {  If(p  <  0)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon)  {  If(p  <  0)  {	  if(p    <    0)    {    If(p    <    0)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
447	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
448	[BUG]  [BUGGY]  if(p  <  =  0  ||  epsilon  >  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0  ||  epsilon  >  DEFAULT_EPSILON)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0  ||  epsilon  >  DEFAULT_EPSILON)  {	  if(p    <    =    0    ||    epsilon    ==    DEFAULT_EPSILON)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
449	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  return  null;  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  return  null;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
450	[BUG]  [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  DEFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    if(p  <  deFAULT_EPSILON  ||  p  >  DEFAULT_MAX_ITERATIONS)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
451	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  /  maxIterations);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  /  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  p  /  maxIterations);	  this.mean    =    Math.max(0.0,    epsilon    *    maxIterations);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
452	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
453	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
454	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
455	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_EPSILON);	  super(epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
456	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }	  	non-compiled	[CE]  illegal  start  of  expression	126	None	add
457	[BUG]  [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	126	None	add
458	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  p  >  epsilon)  {	  if(p    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
459	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.maxIterations    =    maxIterations;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
460	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.mean  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
461	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
462	[BUG]  [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.maxIterations  =  maxIterations;  this.epsilon  =  epsilon;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.maxIterations    =    maxIterations;    this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	71	1	add
463	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
464	[BUG]  [BUGGY]  super(null,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(null,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(null,  DEFAULT_EPSILON);	  super(null,    epsilon);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
465	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  If(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  If(p  <  epsilon  ||  epsilon  >=  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p    <    epsilon    ||    epsilon    >=    maxIterations)    {    If(p  <  epsilon  ||  epsilon  >=  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	109	None	add
466	[BUG]  [BUGGY]  this(null,  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this(null,    null,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
467	[BUG]  [BUGGY]  if(p  <  deFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  deFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  deFAULT_EPSILON  ||  epsilon  >  DEFAULT_MAX_ITERATIONS)  {	  if(p    <    DEFAULT_EPSILON    ||    epsilon    <    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	25	None	replace
468	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  DEFAULT_EPSILON,  maxIterations);	  this(null,    null,    p,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
469	[BUG]  [BUGGY]  this(null,  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this(null,    null,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
470	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  this.maxIterations  =  Math.max(0.0,  epsilon);  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  this.maxIterations  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    this.maxIterations  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	75	None	add
471	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(0.0,    epsilon);    Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
472	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
473	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(0.0,    epsilon);    Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
474	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(0.0,  epsilon);  Math.max(0.0,  epsilon);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(0.0,    epsilon);    Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	75	1	add
475	[BUG]  [BUGGY]  this(null,  null,  0,  p,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this(null,  null,  0,  p,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this(null,  null,  0,  p,  epsilon,  maxIterations);	  this(null,    null,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
476	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    this.mean  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
477	[BUG]  [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  this.mean  =  epsilon;  this.maxIterations  =  maxIterations;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.epsilon    =    epsilon;    this.maxIterations    =    maxIterations;    this.mean  =  epsilon;  this.maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
478	[BUG]  [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  epsilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	          this.mean    =    epsilon;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    epsilon;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
479	[BUG]  [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_MASK);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_MASK);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  maxIterations,  DEFAULT_MASK);	  super(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
480	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
481	[BUG]  [BUGGY]  if(p  <  =  epsilon  ||  p  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  epsilon  ||  p  >  epsilon)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  epsilon  ||  p  >  epsilon)  {	  if(p    ==    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
482	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  super(DEFAULT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
483	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  super(DEFAULT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
484	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  p,  maxIterations);  [CE]  <identifier>  expected  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_EPSILON,  p,  maxIterations);	  super(DEFAULT_EPSILON,    p);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
485	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  =  DEFAULT_EPSILON  ||  p  >  MAX_ITERATIONS)  {	  if(p    <    =    DEFAULT_EPSILON    ||    p    >    DEFAULT_MAX_ITERATIONS)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
486	[BUG]  [BUGGY]  super(DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(DEFAULT_MAX_ITERATIONS);	  super(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
487	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {	  if(p    <    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	35	1	replace
488	[BUG]  [BUGGY]  if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  <  epsilon  ||  epsilon  ==  maxIterations)  {	  if(p    <    0    ||    epsilon    ==    maxIterations)    {    	compilable	  [FE]  MathRuntimeException$4  	35	1	replace
489	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  0,  epsilon,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
490	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(peer),  0,  epsilon,  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(peer),  0,  epsilon,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(peer),  0,  epsilon,  maxIterations);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    0,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
491	[BUG]  [BUGGY]  if(p  >  MAX_ITERATIONS)  {  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(p  >  MAX_ITERATIONS)  {  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	if(p  >  MAX_ITERATIONS)  {	  if(p    >    epsilon)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	59	None	replace
492	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon  +  maxIterations);  [CE]  <identifier>  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon  +  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  DEFAULT_EPSILON,  epsilon  +  maxIterations);	  super(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
493	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  1);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  1);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  Math.max(0.0,  epsilon  /  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
494	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_PESILON,  maxIterations);  [CE]  <identifier>  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_PESILON,  maxIterations);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	super(p,  epsilon,  DEFAULT_PESILON,  maxIterations);	  super(p,    epsilon,    MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
495	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  this.maxIterations  =  Math.max(this.epsilon,  p);  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  this.maxIterations  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    this.maxIterations  =  Math.max(this.epsilon,  p);	  	non-compiled	[CE]  possible  loss  of  precision	124	None	add
496	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(this.epsilon,    p);    Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
497	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    Math.max(this.epsilon,  p);  this.mean  =  Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
498	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	add	                super();        this.mean    =    Math.max(this.epsilon,    p);    Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
499	[BUG]  [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          super();    this.mean  =  Math.max(this.epsilon,  p);  Math.max(this.epsilon,  p);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                super();        this.mean    =    Math.max(this.epsilon,    p);    Math.max(this.epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	124	1	add
500	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  def);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  def);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  def);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
501	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  DEFAULT_EPSILON);  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(epsilon),  p,  DEFAULT_EPSILON);	          super();    this.mean    =    new    NormalDistributionImpl(p,    FastMath.sqrt(epsilon),    p);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
502	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	93	93	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
