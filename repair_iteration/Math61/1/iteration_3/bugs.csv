bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double,int,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,double)	50	None	replace
2	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,int)	50	None	replace
3	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  ')'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  ')'  expected	50	None	replace
4	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double,int)	50	None	replace
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(1.0,    epsilon);    this.mean  =  Math.max(1.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	88	1	add
6	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    epsilon);    this.mean  =  Math.max(1.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	88	1	add
7	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  This.mean  =  Math.max(1.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  This.mean  =  Math.max(1.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    epsilon);    This.mean  =  Math.max(1.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	88	None	add
8	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  int  mean  =  Math.max(1.0,  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  int  mean  =  Math.max(1.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    epsilon);    int  mean  =  Math.max(1.0,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	88	None	add
9	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
10	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
11	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
12	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
13	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	137	None	replace
14	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	12	None	replace
15	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]                StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	12	None	replace
16	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]                  StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	12	None	replace
17	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
18	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
19	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  Math.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  mean  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  Math.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	95	None	add
20	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
21	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
22	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	95	None	add
23	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
24	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	95	1	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    minIterations);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
26	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    minIterations);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
27	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	94	None	replace
28	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	94	None	replace
29	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
30	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
31	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
32	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
33	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    This.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	261	None	add
34	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
35	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p,  epsilon);  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p,  epsilon);	  	non-compiled	[CE]  ')'  expected	261	None	add
36	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  incompatible  types	267	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	267	1	replace
38	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	267	1	replace
39	[BUG]  [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	267	None	replace
40	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        p;        this.mean    =    p;    this.mean  =  p;  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	160	1	add
41	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    this.mean  =  p;  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	160	1	add
42	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	160	None	add
43	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	160	None	add
44	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	160	None	add
45	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	160	None	add
46	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	39	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0,  DEFAULT_EPSILON);	  this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
48	[BUG]  [BUGGY]  this.mean  =  Math.max(0,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0,  DEFAULT_EPSILON);	  this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
49	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	206	1	add
50	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	206	1	add
51	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  This.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  This.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    This.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  This	206	None	add
52	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	206	None	add
53	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	206	1	add
54	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	206	1	add
55	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	107	1	add
56	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	107	1	add
57	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  This.mean  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  This.mean  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    maxIterations);    This.mean  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  This	107	None	add
58	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(psilon,  maxIterations);  [CE]  cannot  find  symbol  psilon  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(psilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.max(psilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  psilon	107	None	add
59	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
60	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
61	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  fastMath.sqrt(p);  [CE]  cannot  find  symbol  fastMath  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  fastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  fastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	215	None	add
62	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p));  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p));	  	non-compiled	[CE]  ';'  expected	215	None	add
63	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p;  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p;	  	non-compiled	[CE]  ')'  expected	215	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  3;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  +  3;	  this.mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	178	1	replace
65	[BUG]  [BUGGY]  this.mean  =  p  +  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  3;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  +  3;	  this.mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	178	1	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	263	1	replace
67	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	263	1	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p);  if(epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	263	1	replace
69	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(epsilon  <  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	263	1	replace
70	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	263	None	replace
71	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	279	12	add
72	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	279	12	add
73	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	279	None	add
74	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	279	None	add
75	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	279	None	add
76	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	279	12	add
77	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	279	12	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(mean,  p);	  this.mean    =    Math.max(epsilon,    p);    	compilable	  [FE]  AssertionFailedError  	106	1	replace
79	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  p);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  p);	  this.mean    =    Math.max(epsilon,    p);    	compilable	  [FE]  AssertionFailedError  	106	1	replace
80	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);  [CE]  cannot  find  symbol  Epsilon  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(Epsilon),    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  Epsilon	122	None	replace
81	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Epsilon  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(Epsilon),    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  Epsilon	122	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.0,  epsilon  +  1);	  this.mean    =    Math.min(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	239	1	replace
83	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  epsilon  +  1);	  this.mean    =    Math.min(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	239	1	replace
84	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
85	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
86	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    This.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	271	None	add
87	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    int  mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  possible  loss  of  precision	271	None	add
88	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
89	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
90	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	30	None	add
91	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	30	None	add
92	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  ';'  expected	30	None	add
93	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	30	None	add
94	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	30	None	add
95	[BUG]  [BUGGY]  This.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    This.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  This	278	None	replace
96	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	128	None	replace
97	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	128	None	replace
98	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                  StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	128	None	replace
99	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	256	1	add
100	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	256	1	add
101	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	256	None	add
102	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	256	1	add
103	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	256	1	add
104	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);	  	non-compiled	[CE]  illegal  start  of  expression	256	None	add
105	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  unreachable  statement	56	None	add
106	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  unreachable  statement	56	None	add
107	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	56	None	add
108	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  ';'  expected	56	None	add
109	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  unreachable  statement	56	None	add
110	[BUG]  [BUGGY]  This.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    This.mean    =    Math.max(Math.abs(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  This	15	None	replace
111	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    2;    this.mean  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
112	[BUG]  [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  2;  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    this.mean  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
113	[BUG]  [BUGGY]  this.mean  =  p  +  2;  This.mean  =  p  +  2;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  This.mean  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    This.mean  =  p  +  2;	  	non-compiled	[CE]  cannot  find  symbol  This	177	None	add
114	[BUG]  [BUGGY]  this.mean  =  p  +  2;  int  this.mean  =  p  +  2;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  int  this.mean  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    int  this.mean  =  p  +  2;	  	non-compiled	[CE]  not  a  statement	177	None	add
115	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  p  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    2;    p  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
116	[BUG]  [BUGGY]  this.mean  =  p  +  2;  p  =  p  +  2;  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  p  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    p  =  p  +  2;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
117	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	75	None	replace
118	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	75	None	replace
119	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	75	None	replace
120	[BUG]  [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]          AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	super(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	          super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	217	None	replace
121	[BUG]  [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	super(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	          super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	217	None	replace
122	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	super(p,  DEFAULT_EPSILON,  maxIterations);	          super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	217	None	replace
123	[BUG]  [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	super(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	          super(p,    epsilon,    maxIterations);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	217	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(1.0,  p  +  1);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
125	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  p  +  1);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(1.0,  mean);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
127	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  mean);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  mean);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
128	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  ')'  expected	53	None	replace
129	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	53	None	replace
130	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIters);    	non-compiled	[CE]  cannot  find  symbol  maxIters	204	None	replace
131	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);  [CE]  cannot  find  symbol  fastMath  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIters);    	non-compiled	[CE]  cannot  find  symbol  fastMath	204	None	replace
132	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	139	None	replace
133	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]                StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	139	None	replace
134	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
135	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
136	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    This.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	273	None	add
137	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  (.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  (.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    (.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  illegal  start  of  expression	273	None	add
138	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    int  mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  possible  loss  of  precision	273	None	add
139	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	non-compiled	[CE]  ';'  expected	270	None	replace
140	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations));  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	non-compiled	[CE]  ';'  expected	270	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(1.0,  epsilon  +  1);	  this.mean    =    Math.max(1.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	89	1	replace
142	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  epsilon  +  1);	  this.mean    =    Math.max(1.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	89	1	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.5,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.5,  epsilon);	  this.mean    =    Math.max(1.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	89	1	replace
144	[BUG]  [BUGGY]  this.mean  =  Math.max(0.5,  epsilon);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.5,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.5,  epsilon);	  this.mean    =    Math.max(1.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	89	1	replace
145	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	add
146	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p),  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p),  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	add
147	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	add
148	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p),  maxIterations);  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p),  maxIterations);	  	non-compiled	[CE]  ';'  expected	58	None	add
149	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	add
150	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	116	None	add
151	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	116	None	add
152	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  Throwables  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	116	None	add
153	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  ';'  expected	116	None	add
154	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	116	None	add
155	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	255	None	replace
156	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  1,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	compilable	  [FE]  StackOverflowError  	255	1	replace
157	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  1,  maxIterations);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  1,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	compilable	  [FE]  StackOverflowError  	255	1	replace
158	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	255	None	replace
159	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	255	None	replace
160	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
161	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
162	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);  this.mean  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
163	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  Math.max(mean,  p);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);  this.mean  =  Math.max(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
164	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
165	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
166	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.message  =  Math.max(mean,  p);  [CE]  cannot  find  symbol  message  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p);  this.message  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p);  this.message  =  Math.max(mean,  p);	  	non-compiled	[CE]  cannot  find  symbol  message	249	None	add
167	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  int  epsilon  =  Math.max(mean,  p);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  int  epsilon  =  Math.max(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    int  epsilon  =  Math.max(mean,  p);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	249	None	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
169	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
170	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	22	None	replace
171	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	22	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
173	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
174	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	143	None	replace
175	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	143	None	replace
176	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	143	None	replace
177	[BUG]  [BUGGY]  n  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  n  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	133	None	replace
178	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	125	None	replace
179	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	125	None	replace
180	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);  [CE]  cannot  find  symbol  enpsilon  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    enpsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  enpsilon	241	None	replace
181	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	202	None	replace
182	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	202	None	replace
183	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	202	None	replace
184	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	202	None	replace
185	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	226	None	replace
186	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  DEFAULT_EPSILON,  p,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	226	None	replace
187	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  mean,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  mean,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  mean,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	226	None	replace
188	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MAX_ITERATIONS);  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MAX_ITERATIONS  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MAX_ITERATIONS);	  this.mean    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MAX_ITERATIONS	108	None	replace
189	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.max(p,  epsilon));  [CE]  no  suitable  method  found  for  min(double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.max(p,  epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.max(p,  epsilon));	  this.mean    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	108	None	replace
190	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	63	None	replace
191	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1),  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	63	None	replace
192	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    minIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	123	None	replace
193	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]                StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  minIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    minIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	123	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  epsilon  +  1);	          this.mean    =    Math.max(p,    epsilon);    this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	70	1	replace
195	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  epsilon  +  1);	          this.mean    =    Math.max(p,    epsilon);    this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	70	1	replace
196	[BUG]  [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    This.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  This	290	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
198	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
200	[BUG]  [BUGGY]  p  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  p  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  p  =  Math.max(0.0,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
202	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  p  =  Math.max(0.0,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  p  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  p  =  Math.max(0.0,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
204	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
206	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
207	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	79	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
209	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
210	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  normal));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  normal));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  normal));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	244	None	replace
211	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,NormalDistribution)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,NormalDistribution)	244	None	replace
212	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(normal,  FastMath.sqrt(p));  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(NormalDistribution,double)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(normal,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(normal,  FastMath.sqrt(p));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(NormalDistribution,double)	244	None	replace
213	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int)	83	None	replace
214	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	83	None	replace
215	[BUG]  [BUGGY]  n  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  n	168	None	replace
216	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  MathRuntimeException$4  	168	1	replace
217	[BUG]  [BUGGY]  p  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  MathRuntimeException$4  	168	1	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
219	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
221	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
223	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	148	1	replace
224	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
225	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  ')'  expected	266	None	replace
226	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.s  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.s  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.s	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  ')'  expected	266	None	replace
227	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  unreachable  statement	26	None	add
228	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	26	None	add
229	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  ';'  expected	26	None	add
230	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  unreachable  statement	26	None	add
231	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  unreachable  statement	26	None	add
232	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.s  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.s  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.s	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  ')'  expected	103	None	replace
233	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.  [CE]  <identifier>  expected  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
234	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	5	None	add
235	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
236	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  unreachable  statement  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	5	None	add
237	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  ';'  expected	5	None	add
238	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	5	None	add
239	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	237	None	replace
240	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NONE  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NONE	237	None	replace
241	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	237	None	replace
242	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	237	None	replace
243	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  mean);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	74	None	replace
244	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	74	None	replace
245	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  mean,  maxIterations,  epsilon);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	74	None	replace
246	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
247	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
248	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	169	None	add
249	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
250	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
251	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
252	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	169	1	add
253	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	169	None	add
254	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    	compilable	  [FE]  MathRuntimeException$4  	236	1	replace
255	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  2);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    	compilable	  [FE]  MathRuntimeException$4  	236	1	replace
256	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	291	1	add
257	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	291	1	add
258	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	291	1	add
259	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(.00,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	291	1	add
260	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	291	None	add
261	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [CE]  cannot  find  symbol  mean  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    Math.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	291	None	add
262	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon));  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p,  epsilon));	  this.mean    =    Math.max(Math.mean(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	282	None	replace
263	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.mean(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	282	None	replace
264	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon),  maxIterations);  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p,  epsilon),  maxIterations);	  this.mean    =    Math.max(Math.mean(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	282	None	replace
265	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon);  [CE]  ')'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p,  epsilon);	  this.mean    =    Math.max(Math.mean(p),    epsilon);    	non-compiled	[CE]  ')'  expected	282	None	replace
266	[BUG]  [BUGGY]  int  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  int  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	int  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
267	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	159	None	replace
268	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	159	None	replace
269	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	159	None	replace
270	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
271	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
272	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.maxIterations));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
273	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.maxIterations));  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.maxIterations));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
274	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	253	1	replace
275	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	253	1	replace
276	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	253	None	replace
277	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	253	None	replace
278	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	120	None	replace
279	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  incompatible  types	285	None	replace
280	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  incompatible  types  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  incompatible  types	285	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	285	1	replace
282	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	285	1	replace
283	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  incompatible  types  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  incompatible  types	285	None	replace
284	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	76	1	add
285	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	76	1	add
286	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    int  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	76	None	add
287	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	76	None	add
288	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	76	None	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	275	1	replace
290	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	275	1	replace
291	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	275	None	replace
292	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon)/  epsilon);  [CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon)/  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  epsilon)/  epsilon);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	non-compiled	[CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;	275	None	replace
293	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(epsilon)/  p);  [CE]  no  suitable  method  found  for  max(double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(epsilon)/  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(epsilon)/  p);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	275	None	replace
294	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	183	None	replace
295	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	183	None	replace
296	[BUG]  [BUGGY]  This.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    This.mean    =    Math.max(p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  This	71	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
298	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
299	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
300	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
301	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
302	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
303	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
304	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  MathRuntimeException$4  	172	1	replace
305	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Throwables	41	None	replace
306	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Throwables	41	None	replace
307	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	52	None	replace
308	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	52	None	replace
309	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  ')'  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  ')'  expected	52	None	replace
310	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	214	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  +  2);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
312	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  +  2);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  *  1);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
314	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  *  1);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  3);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  +  3);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
316	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  3);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  +  3);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
317	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  ')'  expected	34	None	replace
318	[BUG]  [BUGGY]  this.mean  =  Math.max(defult_EPSILON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  defult_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(defult_EPSILON,  p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(defult_EPSILON,  p,  DEFAULT_EPSILON);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	34	None	replace
319	[BUG]  [BUGGY]  this.mean  =  Math.max(definable,  DEFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  definable  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(definable,  DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(definable,  DEFAULT_EPSILON,  p);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  definable	34	None	replace
320	[BUG]  [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(deFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	34	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.0,  p  +  1);	  this.mean    =    Math.min(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
322	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  p  +  1);	  this.mean    =    Math.min(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
324	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  /  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
325	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  p);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  p);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	37	None	replace
326	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
327	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
328	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
329	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	268	None	replace
330	[BUG]  [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
331	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	268	None	replace
332	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Throwables	110	None	replace
333	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  Throwables	110	None	replace
334	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	7	None	add
335	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	add
336	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  	non-compiled	[CE]  ';'  expected	7	None	add
337	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	7	None	add
338	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);  [CE]  cannot  find  symbol  psilon  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  psilon	7	None	add
339	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    this.mean  =  Math.max(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
340	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    this.mean  =  Math.max(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
341	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  This.mean  =  Math.max(DEFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  This.mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    This.mean  =  Math.max(DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	294	None	add
342	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  int  mean  =  Math.max(DEFAULT_EPSILON,  p);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  int  mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    int  mean  =  Math.max(DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  possible  loss  of  precision	294	None	add
343	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  p  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    p  =  Math.max(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
344	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  p  =  Math.max(DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  p  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    p  =  Math.max(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
345	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMathRuntimeException  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ThrowsMathRuntimeException	246	None	replace
346	[BUG]  [BUGGY]  throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  throwsMathRuntimeException  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  throwsMathRuntimeException	246	None	replace
347	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	246	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	288	1	replace
349	[BUG]  [BUGGY]  p  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	288	1	replace
350	[BUG]  [BUGGY]  n  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	288	None	replace
351	[BUG]  [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.min(0.0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.min(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.min(0.0,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	288	None	replace
352	[BUG]  [BUGGY]  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    This.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  This	97	None	replace
353	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon,  maxIterations));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	100	None	replace
354	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	100	1	replace
355	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon  +  1));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	100	1	replace
356	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)	11	None	replace
357	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)	11	None	replace
358	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
359	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
360	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
361	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
362	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	17	None	add
363	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon  *  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
365	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon  *  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon  +  2);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
367	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon  +  2);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
368	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
369	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
370	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0,  0);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	80	None	add
371	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  int  epsilon  =  Math.max(epsilon,  0);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  int  epsilon  =  Math.max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    int  epsilon  =  Math.max(epsilon,  0);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	80	None	add
372	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0));	  	non-compiled	[CE]  ';'  expected	80	None	add
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  maxIterations);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	199	1	replace
374	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  maxIterations);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	199	1	replace
375	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  incompatible  types	302	None	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	302	1	replace
377	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	302	1	replace
378	[BUG]  [BUGGY]  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	=  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	302	None	replace
379	[BUG]  [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  n  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  n	302	None	replace
380	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  cannot  find  symbol  Throwables  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  Throwables	153	None	replace
381	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  cannot  find  symbol  Throwables  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  Throwables	153	None	replace
382	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  incompatible  types	304	None	replace
383	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  incompatible  types  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  incompatible  types	304	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	304	1	replace
385	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	304	1	replace
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	304	1	replace
387	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	304	1	replace
388	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
389	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
390	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  This.mean  =  FastMath.sqrt(p);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  This.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    This.mean  =  FastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  This	24	None	add
391	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  fastMath.sqrt(p);  [CE]  cannot  find  symbol  fastMath  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  fastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  fastMath.sqrt(p);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	24	None	add
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON  +  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
393	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON  +  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON  +  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  +  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
395	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  +  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  *  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
397	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  maxIterations);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  *  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  *  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
399	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
401	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
402	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon)/  p);  [CE]  no  suitable  method  found  for  max(double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon)/  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(epsilon)/  p);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	23	None	replace
403	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    p    +    1);    this.mean  =  Math.max(0.0,  p  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
404	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.0,  p  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    p    +    1);    this.mean  =  Math.max(0.0,  p  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
405	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  This.mean  =  Math.max(0.0,  p  +  1);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  This.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    p    +    1);    This.mean  =  Math.max(0.0,  p  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	1	None	add
406	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	287	1	add
407	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	287	1	add
408	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	287	None	add
409	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	287	1	add
410	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	287	1	add
411	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  illegal  start  of  expression	287	None	add
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
413	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  0.0);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  0.0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  0.0);	          Preconditions.checkState(epsilon    <    =    0.0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	221	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  =  0.0  ||  epsilon  >  maxIterations);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  =  0.0  ||  epsilon  >  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  =  0.0  ||  epsilon  >  maxIterations);	          Preconditions.checkState(epsilon    <    =    0.0);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(p  <  =  0.0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(p  <  =  0.0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(p  <  =  0.0);	          Preconditions.checkState(epsilon    <    =    0.0);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
417	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    p);    this.mean  =  Math.max(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
418	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.max(epsilon,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    this.mean  =  Math.max(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
419	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  This.mean  =  Math.max(epsilon,  p);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  This.mean  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    This.mean  =  Math.max(epsilon,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	105	None	add
420	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  int  mean  =  Math.max(epsilon,  p);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  int  mean  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    int  mean  =  Math.max(epsilon,  p);	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.sin(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.min(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
422	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sin(p),  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sin(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.min(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	mean  =  Math.min(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.min(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
424	[BUG]  [BUGGY]  mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.min(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.min(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	262	1	replace
425	[BUG]  [BUGGY]  this.mean  =  Math.ceil(0.0,  p);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.ceil(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.ceil(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	280	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	284	1	replace
427	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	284	1	replace
428	[BUG]  [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(deFAULT_EPSILON,  p);	  this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	284	None	replace
429	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON));  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.max(p,  DEFAULT_EPSILON));	  this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	284	None	replace
430	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(1.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(1.0,    p);    this.mean  =  Math.max(1.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	306	1	add
431	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(1.0,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(1.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    p);    this.mean  =  Math.max(1.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	306	1	add
432	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  This.mean  =  Math.max(1.0,  p);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  This.mean  =  Math.max(1.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    p);    This.mean  =  Math.max(1.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	306	None	add
433	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(2.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(1.0,    p);    this.mean  =  Math.max(2.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	306	1	add
434	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(2.0,  p);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  this.mean  =  Math.max(2.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    p);    this.mean  =  Math.max(2.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	306	1	add
435	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  ';'  expected	111	None	replace
436	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  ';'  expected	111	None	replace
437	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
438	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
439	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
440	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
441	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	90	None	add
442	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
443	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	90	1	add
444	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  minIterations  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	90	None	add
445	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  ')'  expected	85	None	replace
446	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [CE]  no  suitable  method  found  for  max(double,double,int,int,double)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations,  mean);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int,double)	85	None	replace
447	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	157	None	replace
448	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	157	1	replace
449	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON  +  1);  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	157	1	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0,  p);	  this.mean    =    Math.min(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	195	1	replace
451	[BUG]  [BUGGY]  this.mean  =  Math.max(0,  p);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0,  p);	  this.mean    =    Math.min(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	195	1	replace
452	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon));	          this.mean    =    Math.max(p,    epsilon);    this.mean    =    Math.max(p,    epsilon));    	non-compiled	[CE]  ';'  expected	258	None	replace
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  AssertionFailedError  	201	1	replace
454	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  AssertionFailedError  	201	1	replace
455	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
456	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  mean);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  mean);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
457	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);  [CE]  no  suitable  method  found  for  abs(double,double,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations),  mean);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double,int)	84	None	replace
458	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));  [CE]  no  suitable  method  found  for  abs(double,double,double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON,  epsilon,  maxIterations));	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double,int)	84	None	replace
459	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  mean,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
460	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	231	None	replace
461	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  mean);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	231	None	replace
462	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	118	None	add
463	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	118	None	add
464	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	118	None	add
465	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	118	None	add
466	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  psilon  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  psilon	118	None	add
467	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
468	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
469	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  This.mean  =  Math.min(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  This.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    This.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	38	None	add
470	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
471	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  1);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
473	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  1);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
474	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  0,  maxIterations);	  epsilon    =    Math.max(epsilon,    0);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	81	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  2);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
476	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  2);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  2);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(0.0,  epsilon);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
478	[BUG]  [BUGGY]  epsilon  =  Math.max(0.0,  epsilon);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(0.0,  epsilon);	  epsilon    =    Math.max(epsilon,    0);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	298	1	replace
480	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	298	1	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(mean,  DEFAULT_EPSILON);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	298	1	replace
482	[BUG]  [BUGGY]  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(mean,  DEFAULT_EPSILON);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	298	1	replace
483	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  p);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  p);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	298	None	replace
484	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,double,int)	259	None	replace
485	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  normal,  epsilon,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  normal,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  normal,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	259	None	replace
486	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  normal,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,NormalDistribution,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  normal,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  normal,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,NormalDistribution,double,int)	259	None	replace
487	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	228	None	add
488	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	228	None	add
489	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  ';'  expected	228	None	add
490	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	228	None	add
491	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	228	None	add
492	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	32	None	add
493	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	32	None	add
494	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  cannot  find  symbol  Throwables  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	32	None	add
495	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  ';'  expected	32	None	add
496	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  unreachable  statement	32	None	add
497	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	144	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	171	1	replace
499	[BUG]  [BUGGY]  mean  =  Math.max(0.0,  p);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	171	1	replace
500	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  Throwables	156	None	replace
501	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  MutableFormats  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MutableFormats	156	None	replace
502	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	156	None	replace
503	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    epsilon);    this.mean  =  Math.max(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
504	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.max(Math.sin(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    epsilon);    this.mean  =  Math.max(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
505	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  This.mean  =  Math.max(Math.sin(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  This.mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    epsilon);    This.mean  =  Math.max(Math.sin(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	179	None	add
506	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  int  mean  =  Math.max(Math.sin(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  int  mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    epsilon);    int  mean  =  Math.max(Math.sin(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	179	None	add
507	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	303	None	replace
508	[BUG]  [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON));    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
509	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	303	None	replace
510	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    DEFAULT_EPSILON;    this.mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	175	1	add
511	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    this.mean  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	175	1	add
512	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  This.mean  =  p  +  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  This.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    This.mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	175	None	add
513	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	175	1	add
514	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  p  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    p  =  p  +  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	175	1	add
515	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    int  mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	175	None	add
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(epsilon,  maxIterations  +  1);	  epsilon    =    Math.max(epsilon,    maxIterations    +    1);    	compilable	  [FE]  AssertionFailedError  	211	1	replace
517	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(epsilon,  maxIterations  +  1);	  epsilon    =    Math.max(epsilon,    maxIterations    +    1);    	compilable	  [FE]  AssertionFailedError  	211	1	replace
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  maxIterations  *  1);	  epsilon    =    Math.max(epsilon,    maxIterations    +    1);    	compilable	  [FE]  AssertionFailedError  	211	1	replace
519	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  *  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  *  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  maxIterations  *  1);	  epsilon    =    Math.max(epsilon,    maxIterations    +    1);    	compilable	  [FE]  AssertionFailedError  	211	1	replace
520	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	102	None	add
521	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	102	None	add
522	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
523	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e	  	non-compiled	[CE]  ')'  expected	102	None	add
524	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	102	None	add
525	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	208	1	add
526	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	208	1	add
527	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  This.mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  This.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(Math.abs(p),    epsilon);    This.mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	208	None	add
528	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	208	1	add
529	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	208	1	add
530	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  int  mean  =  Math.min(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  int  mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(Math.abs(p),    epsilon);    int  mean  =  Math.min(Math.abs(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	208	None	add
531	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN	222	None	replace
532	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN	222	None	replace
533	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON	222	None	replace
534	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN	222	None	replace
535	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  mean,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	51	None	replace
536	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  ';'  expected	43	None	replace
537	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  ';'  expected	43	None	replace
538	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	254	None	add
539	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	254	None	add
540	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  epsilon);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	254	None	add
541	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)+  1,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)+  1,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	254	None	add
542	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	254	None	add
543	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  quickMath.sqrt(epsilon),  maxIterations);  [CE]  cannot  find  symbol  quickMath  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  quickMath.sqrt(epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  quickMath.sqrt(epsilon),  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    fastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  quickMath	121	None	replace
544	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
545	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
546	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  This.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  This.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    This.mean  =  Math.max(0.0,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	36	None	add
547	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.0,  deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.0,  deFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    this.mean  =  Math.max(0.0,  deFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	36	None	add
548	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
549	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
550	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
551	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	64	1	add
552	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	64	None	add
553	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	64	None	add
554	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  ==  0);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  ==  0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  ==  0);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	218	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(p  <  =  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(p  <  =  0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(p  <  =  0);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  0);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  0);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	218	None	replace
557	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p),  epsilon,  maxIterations);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	18	None	replace
558	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	142	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	305	1	replace
560	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	305	1	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	305	1	replace
562	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	305	1	replace
563	[BUG]  [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  cannot  find  symbol  m  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  m	305	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.abs(p  +  1);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
565	[BUG]  [BUGGY]  this.mean  =  Math.abs(p  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.abs(p  +  1);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
566	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	compilable	  [FE]  MathRuntimeException$4  	264	1	add
567	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	compilable	  [FE]  MathRuntimeException$4  	264	1	add
568	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  This.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  This.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    This.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	non-compiled	[CE]  cannot  find  symbol  This	264	None	add
569	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  }  [CE]  cannot  find  symbol  maxIters  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIters  =  DEFAULT_MAX_ITERATIONS;  }	  	non-compiled	[CE]  cannot  find  symbol  maxIters	264	None	add
570	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMathRuntimeException  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ThrowsMathRuntimeException	203	None	replace
571	[BUG]  [BUGGY]  throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  throwsMathRuntimeException  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throwsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  throwsMathRuntimeException	203	None	replace
572	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	203	None	replace
573	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
574	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
575	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	129	None	add
576	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	129	None	add
577	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	129	None	add
578	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
579	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
580	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
581	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
582	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    This.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	67	None	add
583	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON;	  	non-compiled	[CE]  ')'  expected	67	None	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  DEFAULT_EPSILON  +  1;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	213	1	replace
585	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  DEFAULT_EPSILON  +  1;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	213	1	replace
586	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  1,  epsilon);	  this.mean    =    Math.max(0.0,    p    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	2	None	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  p  +  2);	  this.mean    =    Math.max(0.0,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
588	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  2);	  this.mean    =    Math.max(0.0,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
589	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  incompatible  types	247	None	replace
590	[BUG]  [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  cannot  find  symbol  n  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  n	247	None	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	247	1	replace
592	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	247	1	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.00,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
594	[BUG]  [BUGGY]  this.mean  =  Math.max(0.00,  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.00,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
595	[BUG]  [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [CE]  cannot  find  symbol  n  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	292	None	replace
596	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [CE]  no  suitable  method  found  for  max(double,double,double,int,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  mean);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,double)	82	None	replace
597	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,int)	82	None	replace
598	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  mean,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double,int)	82	None	replace
599	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	57	1	replace
600	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	57	1	replace
601	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	9	None	replace
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);	  this.mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	209	1	replace
603	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);	  this.mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	209	1	replace
604	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
605	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
606	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,int)	127	None	replace
607	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	add
608	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	add
609	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	add
610	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	add
611	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	124	None	add
612	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	126	None	replace
613	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	126	None	replace
614	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	126	None	replace
615	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    this.mean  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
616	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    this.mean  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
617	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  This.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  This.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    This.mean  =  Math.max(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	297	None	add
618	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  it.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  it  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  it.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    it.mean  =  Math.max(mean,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  it	297	None	add
619	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    this.mean  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
620	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.min(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    this.mean  =  Math.min(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	158	1	replace
622	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	158	1	replace
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	158	1	replace
624	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	158	1	replace
625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
626	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(DEFAULT_EPSILON,  p  +  1);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
628	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  p  +  1);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(DEFAULT_EPSILON,  p);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
630	[BUG]  [BUGGY]  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(DEFAULT_EPSILON,  p);	  this.mean    =    Math.max(DEFAULT_EPSILON,    p);    	compilable	  [FE]  AssertionFailedError  	295	1	replace
631	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    	compilable	  [FE]  MathRuntimeException$4  	117	1	replace
632	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    	compilable	  [FE]  MathRuntimeException$4  	117	1	replace
633	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
634	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
635	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	272	None	replace
636	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	272	None	replace
637	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIterations  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	210	1	add
638	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIterations  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	210	1	add
639	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIterations  +  1));	  	non-compiled	[CE]  ';'  expected	210	None	add
640	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  int  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  int  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    int  epsilon  =  Math.max(epsilon,  maxIterations  +  1);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	210	None	add
641	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIterations  +  2);	  	compilable	  [FE]  MathRuntimeException$4  	210	1	add
642	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  2);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIterations  +  2);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIterations  +  2);	  	compilable	  [FE]  MathRuntimeException$4  	210	1	add
643	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	114	None	add
644	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	114	None	add
645	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  unreachable  statement  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	114	None	add
646	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  ';'  expected	114	None	add
647	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	114	None	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	compilable	  [FE]  AssertionFailedError  	248	1	replace
649	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	compilable	  [FE]  AssertionFailedError  	248	1	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	compilable	  [FE]  AssertionFailedError  	248	1	replace
651	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	compilable	  [FE]  AssertionFailedError  	248	1	replace
652	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	286	None	replace
653	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	286	None	replace
654	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  Throwables	146	None	replace
655	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	146	None	replace
656	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	112	1	replace
657	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	112	1	replace
658	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	112	None	replace
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	274	1	replace
660	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	274	1	replace
661	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	274	None	replace
662	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	274	None	replace
663	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  maxIterations);	          this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	187	1	replace
664	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  maxIterations);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  maxIterations);	          this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);    this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	187	1	replace
665	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	155	None	replace
666	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	233	None	add
667	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	233	None	add
668	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  unreachable  statement  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	233	None	add
669	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  ';'  expected	233	None	add
670	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	233	None	add
671	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,int)	181	None	replace
672	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,int)	181	None	replace
673	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	181	None	replace
674	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int,int)	181	None	replace
675	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
676	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
677	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
678	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	69	1	add
679	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    This.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	69	None	add
680	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	69	None	add
681	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  ';'  expected	152	None	replace
682	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	149	None	replace
683	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	149	None	replace
684	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,int,double)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  maxIterations,  epsilon);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIters);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,int,double)	138	None	replace
685	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIters);    	non-compiled	[CE]  cannot  find  symbol  maxIters	138	None	replace
686	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	add
687	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p  +  1));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p  +  1));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	add
688	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
689	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
690	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	compilable	  [FE]  StackOverflowError  	62	1	add
691	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	compilable	  [FE]  StackOverflowError  	62	1	add
692	[BUG]  [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(deFAULT_EPSILON,  p,  maxIterations);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	35	None	replace
693	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  p,  maxIterations);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	35	None	replace
694	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  unreachable  statement	235	None	add
695	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  unreachable  statement	235	None	add
696	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  ';'  expected	235	None	add
697	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	235	None	add
698	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwables.throwMaskError(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  cannot  find  symbol  Throwables  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwables.throwMaskError(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    Throwables.throwMaskError(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	235	None	add
699	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	145	1	replace
700	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON  +  1);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	145	1	replace
701	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    	compilable	  [FE]  MathRuntimeException$4  	55	1	replace
702	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    	compilable	  [FE]  MathRuntimeException$4  	55	1	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  ==  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  ==  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	265	1	replace
704	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  ==  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  ==  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  ==  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	265	1	replace
705	[BUG]  [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	163	None	replace
706	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	260	None	replace
707	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.s  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.s  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.s	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  ')'  expected	289	None	replace
708	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(e	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  ')'  expected	289	None	replace
709	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  unreachable  statement	28	None	add
710	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  ';'  expected	28	None	add
711	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  Throwables  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	28	None	add
712	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  unreachable  statement	28	None	add
713	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	28	None	add
714	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    	compilable	  [FE]  MathRuntimeException$4  	33	1	replace
715	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    	compilable	  [FE]  MathRuntimeException$4  	33	1	replace
716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	double  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
717	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	double  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
718	[BUG]  [BUGGY]  int  mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  int  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	int  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
719	[BUG]  [BUGGY]  float  mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  float  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	float  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Double  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
721	[BUG]  [BUGGY]  Double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Double  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Double  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
722	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	301	1	replace
723	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	301	1	replace
724	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	301	1	replace
725	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	301	1	replace
726	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
727	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
728	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  This.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  This.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    This.mean  =  Math.max(Math.abs(p),  epsilon  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	19	None	add
729	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    this.mean  =  Math.max(Math.abs(p),  epsilon  +  1));	  	non-compiled	[CE]  ';'  expected	19	None	add
730	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  int  mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  int  mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    int  mean  =  Math.max(Math.abs(p),  epsilon  +  1);	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
731	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
732	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
733	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  This.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  This.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    This.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	283	None	add
734	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(psilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  psilon  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.max(psilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean  =  Math.max(psilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  psilon	283	None	add
735	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
736	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
737	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
738	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
739	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  poissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
740	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon,  normal);  [CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon,  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon,  normal);	  this.mean    =    Math.max(0.0,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)	299	None	replace
741	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  mean,  normal);  [CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  mean,  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  mean,  normal);	  this.mean    =    Math.max(0.0,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)	299	None	replace
742	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  normal,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  normal,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  normal,  DEFAULT_EPSILON);	  this.mean    =    Math.max(0.0,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double)	299	None	replace
743	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  normal);  [CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  normal);	  this.mean    =    Math.max(0.0,    normal);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,NormalDistribution)	299	None	replace
744	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p  +  1);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
745	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p  +  1);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
746	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p,  DEFAULT_EPSILON);	          this.mean    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	25	None	replace
747	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p,  epsilon);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p,  epsilon);	          this.mean    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	25	None	replace
748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(mean,  p);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
749	[BUG]  [BUGGY]  epsilon  =  Math.min(mean,  p);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(mean,  p);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
750	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(mean,  p  +  1);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
751	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(mean,  p  +  1);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
752	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(mean,  epsilon);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
753	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(mean,  epsilon);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
754	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	196	None	replace
755	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	196	None	replace
756	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  epsilon);  [CE]  cannot  find  symbol  NONE  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NONE	196	None	replace
757	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;	182	None	replace
758	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon,    maxIterations);    	non-compiled	[CE]  ')'  expected	182	None	replace
759	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	182	None	replace
760	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	182	None	replace
761	[BUG]  [BUGGY]  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  This	66	None	replace
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	mean  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
763	[BUG]  [BUGGY]  mean  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.max(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  *  DEFAULT_EPSILON;	  this.mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	176	1	replace
765	[BUG]  [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  *  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  *  DEFAULT_EPSILON;	  this.mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	176	1	replace
766	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
767	[BUG]  [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
768	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
769	[BUG]  [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
770	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	242	None	add
771	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PosedDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PosedDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PosedDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  cannot  find  symbol	242	None	add
772	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(this.epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	242	None	add
773	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  cannot  find  symbol	242	None	add
774	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,int,double,int)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,int,double,int)	136	None	replace
775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	240	1	replace
776	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	240	1	replace
777	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p    epsilon,    maxIterations);    	non-compiled	[CE]  ')'  expected	240	None	replace
778	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	151	1	replace
779	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  AssertionFailedError  	151	1	replace
780	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	238	1	add
781	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	238	1	add
782	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  This.mean  =  Math.min(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  This.mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    epsilon);    This.mean  =  Math.min(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	238	None	add
783	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	238	1	add
784	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	238	1	add
785	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  int  mean  =  Math.min(0.0,  epsilon);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  int  mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    epsilon);    int  mean  =  Math.min(0.0,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	238	None	add
786	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.mean(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
787	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON));  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON));	  this.mean    =    Math.max(Math.mean(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
788	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p,  DEFAULT_EPSILON),  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.mean(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
789	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.mean(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
790	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.min(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(0.0,    p);    this.mean  =  Math.min(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
791	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.min(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.min(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    p);    this.mean  =  Math.min(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
792	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  This.mean  =  Math.min(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  This.mean  =  Math.min(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    p);    This.mean  =  Math.min(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	3	None	add
793	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
794	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
795	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  p  =  Math.min(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(0.0,    p);    p  =  Math.min(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
796	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  p  =  Math.min(0.0,  p);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  p  =  Math.min(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    p);    p  =  Math.min(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	3	1	add
797	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
798	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
799	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    int  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	192	None	add
800	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
801	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	192	1	add
802	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  minIterations  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  minIterations);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	192	None	add
803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
804	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
806	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
807	[BUG]  [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  m  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  m	269	None	replace
808	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	61	None	replace
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
810	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  epsilon);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  epsilon);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
812	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
814	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
815	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
816	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
817	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    int  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	78	None	add
818	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
819	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	78	1	add
820	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	double  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
821	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	double  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
822	[BUG]  [BUGGY]  int  mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  int  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	int  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
824	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
825	[BUG]  [BUGGY]  float  mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  float  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	float  mean  =  Math.max(Math.abs(p),  epsilon);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    int    mean    =    Math.max(Math.abs(p),    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
826	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	10	None	replace
827	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double,int)	10	None	replace
828	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,double)	10	None	replace
829	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	227	None	replace
830	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	227	None	replace
831	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  MAX_ITERATIONS);	          this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(Math.abs(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	197	None	replace
832	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
833	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
834	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  This.mean  =  Math.min(p,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  This.mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    This.mean  =  Math.min(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	194	None	add
835	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
836	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
837	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  int  mean  =  Math.min(p,  epsilon);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  int  mean  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    int  mean  =  Math.min(p,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	194	None	add
838	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    DEFAULT_EPSILON;    this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	212	1	add
839	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    DEFAULT_EPSILON;    this.mean  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	212	1	add
840	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  This.mean  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  This.mean  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    DEFAULT_EPSILON;    This.mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  This	212	None	add
841	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    DEFAULT_EPSILON;    p  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	212	1	add
842	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  [FE]  MathRuntimeException$4  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  p  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    DEFAULT_EPSILON;    p  =  DEFAULT_EPSILON;	  	compilable	  [FE]  MathRuntimeException$4  	212	1	add
843	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
844	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
845	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
846	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
847	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    This.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	13	None	add
848	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  Math.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  mean  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  Math.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    Math.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	13	None	add
849	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p,  epsilon);  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p,  epsilon);	  	non-compiled	[CE]  ')'  expected	13	None	add
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	193	1	replace
851	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	193	1	replace
852	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.min(epsilon,  MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	193	None	replace
853	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	193	None	replace
854	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);  [CE]  cannot  find  symbol  epsileon  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsileon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  epsileon	251	None	replace
855	[BUG]  [BUGGY]  this.mean  =  Math.ceil(p,  DEFAULT_EPSILON);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.ceil(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.ceil(p,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	65	None	replace
856	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  DEFAULT_EPSILON  +  1);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
857	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON  +  1);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON  +  1);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
858	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    epsilon    +    1);    this.mean  =  Math.max(0.0,  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	86	1	add
859	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.0,  epsilon  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    epsilon    +    1);    this.mean  =  Math.max(0.0,  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	86	1	add
860	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  This.mean  =  Math.max(0.0,  epsilon  +  1);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  This.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    epsilon    +    1);    This.mean  =  Math.max(0.0,  epsilon  +  1);	  	non-compiled	[CE]  cannot  find  symbol  This	86	None	add
861	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  int  mean  =  Math.max(0.0,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  int  mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    epsilon    +    1);    int  mean  =  Math.max(0.0,  epsilon  +  1);	  	non-compiled	[CE]  possible  loss  of  precision	86	None	add
862	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	147	None	replace
863	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	162	None	replace
864	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	162	None	replace
865	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
866	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));  [CE]  cannot  find  symbol  Epsilon  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(Epsilon));    	non-compiled	[CE]  cannot  find  symbol  Epsilon	104	None	replace
867	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  FastMath.sqrt(p  +  1);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	216	1	replace
868	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p  +  1);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  FastMath.sqrt(p  +  1);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  MathRuntimeException$4  	216	1	replace
869	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  FastMath.sqrt(p,  DEFAULT_EPSILON);	          p    =    FastMath.sqrt(p);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	216	None	replace
870	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  3);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  FastMath.sqrt(p  +  3);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
871	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p  +  3);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  3);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  FastMath.sqrt(p  +  3);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
872	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	add
873	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	add
874	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
875	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoetryDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
876	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  StackOverflowError  	60	1	add
877	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	compilable	  [FE]  StackOverflowError  	60	1	add
878	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	252	None	add
879	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	252	None	add
880	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	252	None	add
881	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)/  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(p)/  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	252	None	add
882	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON;	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON;    	non-compiled	[CE]  ')'  expected	224	None	replace
883	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
884	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
885	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  This.mean  =  Math.abs(p);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  This.mean  =  Math.abs(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    This.mean  =  Math.abs(p);	  	non-compiled	[CE]  cannot  find  symbol  This	219	None	add
886	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p;  [CE]  ')'  expected  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p;	  	non-compiled	[CE]  ')'  expected	219	None	add
887	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p));  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p));	  	non-compiled	[CE]  ';'  expected	219	None	add
888	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	134	None	add
889	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	134	None	add
890	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	134	None	add
891	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	134	None	add
892	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	134	None	add
893	[BUG]  [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    this.mean    =    Math.min(p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	257	None	replace
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	99	1	replace
895	[BUG]  [BUGGY]  mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	99	1	replace
896	[BUG]  [BUGGY]  mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	99	None	replace
897	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	double  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
898	[BUG]  [BUGGY]  double  mean  =  Math.max(p,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	double  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
899	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  DEFAULT_EPSILON);  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
900	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  mean  =  Math.max(p,  epsilon);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON);  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
901	[BUG]  [BUGGY]  int  mean  =  Math.max(p,  epsilon);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  int  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	int  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
902	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	205	1	replace
903	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	205	1	replace
904	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon),  maxIterations);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon),  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
905	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
906	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
907	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  This.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    This.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	21	None	add
908	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  int  mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    int  mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
909	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    1;    this.mean  =  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	173	1	add
910	[BUG]  [BUGGY]  this.mean  =  p  +  1;  this.mean  =  p  +  1;  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    this.mean  =  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	173	1	add
911	[BUG]  [BUGGY]  this.mean  =  p  +  1;  This.mean  =  p  +  1;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  This.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    This.mean  =  p  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	173	None	add
912	[BUG]  [BUGGY]  this.mean  =  p  +  1;  int  this.mean  =  p  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  int  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    int  this.mean  =  p  +  1;	  	non-compiled	[CE]  not  a  statement	173	None	add
913	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  p  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    1;    p  =  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	173	1	add
914	[BUG]  [BUGGY]  this.mean  =  p  +  1;  p  =  p  +  1;  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  p  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    p  =  p  +  1;	  	compilable	  [FE]  MathRuntimeException$4  	173	1	add
915	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  fastMath  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    fastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  fastMath	101	None	replace
916	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	73	None	replace
917	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	73	None	replace
918	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	73	None	replace
919	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  	non-compiled	[CE]  unreachable  statement	54	None	add
920	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	add
921	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [CE]  unreachable  statement  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  	non-compiled	[CE]  unreachable  statement	54	None	add
922	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  	non-compiled	[CE]  ';'  expected	54	None	add
923	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));	  	non-compiled	[CE]  ';'  expected	54	None	add
924	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
925	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	165	None	replace
926	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
927	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
928	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);This.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);This.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);This.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	276	None	add
929	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
930	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
931	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p;this.mean  =  Math.max(0.0,  p);  [CE]  ')'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p;this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p;this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  ')'  expected	276	None	add
932	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	276	None	add
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	double  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
934	[BUG]  [BUGGY]  double  mean  =  Math.max(0.0,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  double  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	double  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon);  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
936	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  mean  =  Math.max(0.0,  epsilon);  [FE]  AssertionFailedError  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon);  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon);  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
937	[BUG]  [BUGGY]  int  mean  =  Math.max(0.0,  epsilon);  [CE]  possible  loss  of  precision  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  int  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	int  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	293	None	replace
938	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
939	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
940	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
941	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
942	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  This.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  cannot  find  symbol  This  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  This.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    This.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	200	None	add
943	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  incompatible  types  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	non-compiled	[CE]  incompatible  types	200	None	add
944	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
945	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	200	1	add
946	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
947	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
948	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	166	None	add
949	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  Math.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  mean  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  Math.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    Math.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  mean	166	None	add
950	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
951	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
952	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon));  [CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  epsilon));	  this.mean    =    Math.max(Math.sin(p),    epsilon);    	non-compiled	[CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;	180	None	replace
953	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sin(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sin(p),  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	180	None	replace
954	[BUG]  [BUGGY]  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    This.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  This	281	None	replace
955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    This.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	281	1	replace
956	[BUG]  [BUGGY]  mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    This.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	281	1	replace
957	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	300	None	add
958	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	300	None	add
959	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	300	None	add
960	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	300	None	add
961	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]            MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	300	None	add
962	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  -  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p  -  1);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
963	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p  -  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  -  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p  -  1);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
964	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  /  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p  /  DEFAULT_EPSILON);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
965	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p  /  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  /  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p  /  DEFAULT_EPSILON);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
966	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	142	None	replace
967	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	142	None	replace
968	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,double)	286	None	replace
969	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(epsilon,  0);	  this.mean    =    Math.max(epsilon,    p);    	compilable	  [FE]  AssertionFailedError  	106	1	replace
970	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  0);	  this.mean    =    Math.max(epsilon,    p);    	compilable	  [FE]  AssertionFailedError  	106	1	replace
971	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(maxIterations,  epsilon);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
972	[BUG]  [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(maxIterations,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(maxIterations,  epsilon);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
973	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p));  [CE]  no  suitable  method  found  for  min(double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p));	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.min(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	262	None	replace
974	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
975	[BUG]  [BUGGY]  this.mean  =  Math.max(0,  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  FastMath.sqrt(p  +  2);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
977	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p  +  2);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  FastMath.sqrt(p  +  2);	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
978	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  mean);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  mean);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    mean);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	74	None	replace
979	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
980	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_M  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_M  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_M	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
981	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO  [CE]  illegal  start  of  expression  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
982	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	31	None	replace
983	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	247	None	replace
984	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON_MEAN);	  this.mean    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	108	None	replace
985	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.max(epsilon,  maxIterations));  [CE]  no  suitable  method  found  for  min(double)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.max(epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.max(epsilon,  maxIterations));	  this.mean    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	108	None	replace
986	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  }  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MIN_ITERATIONS;  }	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	264	None	add
987	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon));  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(epsilon));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
988	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  ';'  expected	111	None	replace
989	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.5,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.5,  p);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
990	[BUG]  [BUGGY]  this.mean  =  Math.max(0.5,  p);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.5,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.5,  p);	  this.mean    =    Math.max(1.0,    p);    	compilable	  [FE]  AssertionFailedError  	307	1	replace
991	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sin(p),    epsilon,    maxIterations);    	non-compiled	[CE]  ')'  expected	182	None	replace
992	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	254	None	add
993	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  enpsilon,  maxIterations);  [CE]  cannot  find  symbol  enpsilon  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  enpsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  enpsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    enpsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  enpsilon	241	None	replace
994	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	269	None	replace
995	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	51	None	replace
996	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	51	None	replace
997	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(this.epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(this.epsilon);	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	265	1	replace
998	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(this.epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(this.epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(this.epsilon);	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    >    DEFAULT_EPSILON)    {    this.maxIterations    =    DEFAULT_MAX_ITERATIONS;    }    	compilable	  [FE]  AssertionFailedError  	265	1	replace
999	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	27	None	replace
1000	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	27	None	replace
1001	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	9	None	replace
1002	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    MAX_ITERATIONS);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	183	None	replace
1003	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  p  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    epsilon);    p  =  Math.max(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
1004	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  p  =  Math.max(Math.sin(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  p  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    epsilon);    p  =  Math.max(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
1005	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	154	None	replace
1006	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p).  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p).  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p).	  	non-compiled	[CE]  <identifier>  expected	215	None	add
1007	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	284	None	replace
1008	[BUG]  [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);  this.mean  =  p  +  1;  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    int  mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);  this.mean  =  p  +  1;	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	173	None	add
1009	[BUG]  [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  p  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    int  mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  p  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	173	None	add
1010	[BUG]  [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p));  this.mean  =  p  +  1;  [CE]  no  suitable  method  found  for  min(double)  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p));  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    int  mean  =  Math.min(Math.sqrt(p));  this.mean  =  p  +  1;	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	173	None	add
1011	[BUG]  [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon  +  1);  this.mean  =  p  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  1;  int  mean  =  Math.min(Math.sqrt(p),  epsilon  +  1);  this.mean  =  p  +  1;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    1;    int  mean  =  Math.min(Math.sqrt(p),  epsilon  +  1);  this.mean  =  p  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	173	None	add
1012	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  ';'  expected	47	None	replace
1013	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	47	None	replace
1014	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [CE]  ';'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  ';'  expected	47	None	replace
1015	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	156	None	replace
1016	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1017	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	148	None	replace
1018	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	148	None	replace
1019	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	148	None	replace
1020	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  FastMath.sqrt(p);  this.mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  FastMath.sqrt(p);  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    int  mean  =  FastMath.sqrt(p);  this.mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	175	None	add
1021	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  this.mean  =  p  +  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  int  mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    DEFAULT_EPSILON;    int  mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  this.mean  =  p  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	175	None	add
1022	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
1023	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
1024	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  cannot  find  symbol  ThrowsMathRuntimeException  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMathRuntimeException	56	None	add
1025	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,double,int,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,int)	83	None	replace
1026	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,NormalDistribution,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  normal,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,NormalDistribution,int)	11	None	replace
1027	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NONE  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  NONE	202	None	replace
1028	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  int  mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    int  mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  possible  loss  of  precision	283	None	add
1029	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  p  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    p  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
1030	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  p  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  p  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    p  =  Math.max(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
1031	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  DEFAULT_EPSILON);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	144	None	replace
1032	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	144	None	replace
1033	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
1034	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
1035	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  maxIterations));	          this.mean    =    Math.max(p,    epsilon);    this.mean    =    Math.max(p,    epsilon));    	non-compiled	[CE]  ';'  expected	258	None	replace
1036	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  StackOverflowError  	125	1	replace
1037	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  0,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	compilable	  [FE]  StackOverflowError  	125	1	replace
1038	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	267	None	replace
1039	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1040	[BUG]  [BUGGY]  p  =  Math.max(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1041	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    p  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
1042	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    DEFAULT_EPSILON);    p  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	38	1	add
1043	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	58	None	add
1044	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  psilon);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  psilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  psilon);	  	non-compiled	[CE]  cannot  find  symbol  psilon	26	None	add
1045	[BUG]  [BUGGY]  MutablePosition  mean  =  new  MutablePoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MutablePosition  mean  =  new  MutablePoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MutablePosition  mean  =  new  MutablePoissonDistributionImpl(p,  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1046	[BUG]  [BUGGY]  this.mean  =  p  +  2;  int  mean  =  p  +  2;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  int  mean  =  p  +  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    int  mean  =  p  +  2;	  	non-compiled	[CE]  possible  loss  of  precision	177	None	add
1047	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon,  maxIterations));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon,  maxIterations));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon,  maxIterations));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	243	None	replace
1048	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  AssertionFailedError  	243	1	replace
1049	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p));  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(this.epsilon,  FastMath.sqrt(p));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  AssertionFailedError  	243	1	replace
1050	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon  +  1));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
1051	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon  +  1));  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon  +  1));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
1052	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	10	None	replace
1053	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.min(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	39	None	replace
1054	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [CE]  incompatible  types  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  incompatible  types	165	None	replace
1055	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [CE]  incompatible  types  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  epsilon);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  incompatible  types	165	None	replace
1056	[BUG]  [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  incompatible  types	165	None	replace
1057	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	76	1	add
1058	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	76	1	add
1059	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	203	None	replace
1060	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	203	None	replace
1061	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	253	None	replace
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(p,  0);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
1063	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  0);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  0);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
1064	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	157	None	replace
1065	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIters  +  1);  [CE]  cannot  find  symbol  maxIters  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  epsilon  =  Math.max(epsilon,  maxIters  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    maxIterations    +    1);    epsilon  =  Math.max(epsilon,  maxIters  +  1);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	210	None	add
1066	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  p  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.min(p,    epsilon);    p  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
1067	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  p  =  Math.min(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  p  =  Math.min(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    p  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	194	1	add
1068	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  [CE]  cannot  find  symbol  psilon  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  psilon);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	168	None	replace
1069	[BUG]  [BUGGY]  epsilon  =  Math.max(peer,  p);  [CE]  cannot  find  symbol  peer  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(peer,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(peer,  p);	  epsilon    =    Math.max(mean,    p);    	non-compiled	[CE]  cannot  find  symbol  peer	250	None	replace
1070	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	303	None	replace
1071	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	48	None	replace
1072	[BUG]  [BUGGY]  if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(epsilon  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
1073	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
1074	[BUG]  [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [FE]  AssertionFailedError  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	48	1	replace
1075	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
1076	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p,  epsilon);  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p,  epsilon);	  	non-compiled	[CE]  ')'  expected	95	None	add
1077	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p);  [CE]  cannot  find  symbol  NONE  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NONE,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p);    	non-compiled	[CE]  cannot  find  symbol  NONE	227	None	replace
1078	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
1079	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	271	1	add
1080	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1081	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1082	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1083	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1084	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean  ==  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean  ==  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1085	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean  ==  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean  ==  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean  ==  DEFAULT_EPSILON)  {  this.mean  =  Math.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1086	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  FastMath.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  FastMath.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1087	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  FastMath.abs(p);  }  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  FastMath.abs(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  if(this.mean!=  DEFAULT_EPSILON)  {  this.mean  =  FastMath.abs(p);  }	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1088	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	305	None	replace
1089	[BUG]  [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  m  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  m	305	None	replace
1090	[BUG]  [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	44	None	replace
1091	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  p,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  p,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    mean,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	226	None	replace
1092	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1093	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1094	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)+  1,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	compilable	  [FE]  StackOverflowError  	255	1	replace
1095	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)+  1,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)+  1,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    	compilable	  [FE]  StackOverflowError  	255	1	replace
1096	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,int,double,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,double)	230	None	replace
1097	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	42	None	replace
1098	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	42	None	replace
1099	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  ';'  expected	205	None	replace
1100	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon,  maxIterations);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	205	None	replace
1101	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  psilon  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  psilon);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  psilon);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    This.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	281	None	replace
1102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  mean);	  this.mean    =    Math.max(0.0,    normal);    	compilable	  [FE]  AssertionFailedError  	299	1	replace
1103	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  mean);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  mean);	  this.mean    =    Math.max(0.0,    normal);    	compilable	  [FE]  AssertionFailedError  	299	1	replace
1104	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(epsilon),  DEFAULT_MAX_ITERATIONS,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	85	None	replace
1105	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  deFAULT_EPSILON,  p);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  deFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  deFAULT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	28	None	add
1106	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	30	None	add
1107	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	add
1108	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1109	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p;  FastMath.sqrt(p));  [CE]  ')'  expected  [FE]        StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p;  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p;  FastMath.sqrt(p));	  	non-compiled	[CE]  ')'  expected	60	None	add
1110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1111	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1112	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	41	None	replace
1113	[BUG]  [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	246	None	replace
1114	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(deFAULT_EPSILON,  epsilon,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	73	None	replace
1115	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.max(mean,  DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  this.mean  =  Math.max(mean,  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    this.mean  =  Math.max(mean,  DEFAULT_EPSILON;	  	non-compiled	[CE]  ')'  expected	297	None	add
1116	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  p  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    p  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
1117	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  p  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  p  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    p  =  Math.max(mean,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	297	1	add
1118	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.min(p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	287	None	add
1119	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  >=  0);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  >=  0);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  >=  0);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	218	None	replace
1120	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	117	None	replace
1121	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
1122	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.min(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
1123	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	129	None	add
1124	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	159	None	replace
1125	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  ';'  expected	152	None	replace
1126	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.min(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	256	None	add
1127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	274	1	replace
1128	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p  +  1),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	274	1	replace
1129	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	40	None	replace
1130	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	79	None	replace
1131	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    DEFAULT_EPSILON,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	124	None	add
1132	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  DEFAULT_EPSILON,  p,  maxIterations);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	143	None	replace
1133	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  int  mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  int  mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    int  mean  =  Math.max(0.0,  DEFAULT_EPSILON);	  	non-compiled	[CE]  possible  loss  of  precision	36	None	add
1134	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	285	None	replace
1135	[BUG]  [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
1136	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  maxIterations),  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  maxIterations),  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  maxIterations),  epsilon,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	52	None	replace
1137	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	52	None	replace
1138	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon),  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  epsilon),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  epsilon),  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	52	None	replace
1139	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
1140	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(ep  [CE]  ')'  expected  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(ep  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        FastMath.sqrt(epsilon));        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(ep	  	non-compiled	[CE]  ')'  expected	102	None	add
1141	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	158	None	replace
1142	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	158	None	replace
1143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  -  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.abs(p  -  1);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1144	[BUG]  [BUGGY]  this.mean  =  Math.abs(p  -  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  -  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.abs(p  -  1);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  /  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.abs(p  /  DEFAULT_EPSILON);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1146	[BUG]  [BUGGY]  this.mean  =  Math.abs(p  /  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.abs(p  /  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.abs(p  /  DEFAULT_EPSILON);	          this.mean    =    Math.abs(p);    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1147	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,double,int,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,int)	50	None	replace
1148	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	50	None	replace
1149	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON	222	None	replace
1150	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	155	None	replace
1151	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	155	None	replace
1152	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  =  0.0,  maxIterations);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  =  0.0,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  =  0.0,  maxIterations);	          Preconditions.checkState(epsilon    <    =    0.0);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1153	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  ';'  expected	43	None	replace
1154	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	46	None	replace
1155	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  deFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  deFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	78	None	add
1156	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON;	  	non-compiled	[CE]  ')'  expected	78	None	add
1157	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	112	None	replace
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	112	1	replace
1159	[BUG]  [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }  [FE]  AssertionFailedError  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(epsilon  >  maxIterations)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  AssertionFailedError  	112	1	replace
1160	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  p  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    p);    p  =  Math.max(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
1161	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  p  =  Math.max(epsilon,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  p  =  Math.max(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    p  =  Math.max(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
1162	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	160	None	add
1163	[BUG]  [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	149	None	replace
1164	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	90	None	add
1165	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	166	None	add
1166	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	8	None	replace
1167	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	302	None	replace
1168	[BUG]  [BUGGY]  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	=  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	302	None	replace
1169	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	116	None	add
1170	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);  [CE]  cannot  find  symbol  psilon  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  psilon	45	None	replace
1171	[BUG]  [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	201	None	replace
1172	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	replace
1173	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	107	1	add
1174	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	107	1	add
1175	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  this.mean  =  Math.max(epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    maxIterations);    this.mean  =  Math.max(epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	107	None	add
1176	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	37	None	replace
1177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	275	1	replace
1178	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p)/  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	275	1	replace
1179	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	151	None	replace
1180	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	151	None	replace
1181	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  int  mean  =  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    DEFAULT_EPSILON;    int  mean  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  possible  loss  of  precision	212	None	add
1182	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  epsilon),  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
1183	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
1184	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  maxIterations),  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  abs(double,int)  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  maxIterations),  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  maxIterations),  epsilon,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,int)	84	None	replace
1185	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  MAX_ITERATIONS);  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	94	None	replace
1186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  /  DEFAULT_EPSILON;	  this.mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	176	1	replace
1187	[BUG]  [BUGGY]  this.mean  =  p  /  DEFAULT_EPSILON;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  /  DEFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  /  DEFAULT_EPSILON;	  this.mean    =    p    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	176	1	replace
1188	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  cannot  find  symbol	242	None	add
1189	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(This.epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(This.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(This.epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	242	None	add
1190	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	34	None	replace
1191	[BUG]  [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  epsilon);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(deFAULT_EPSILON,  p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(deFAULT_EPSILON,  p,  epsilon);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	34	None	replace
1192	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  p,  epsilon);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	34	None	replace
1193	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
1194	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEan,  p);  [CE]  cannot  find  symbol  NOT_MEan  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEan,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEan,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_MEan	200	None	add
1195	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	200	None	add
1196	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEAN,  p);  [CE]  cannot  find  symbol  NOT_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_MEAN	200	None	add
1197	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(mean,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	298	None	replace
1198	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.max(mean,  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.max(mean,  p;	  	non-compiled	[CE]  ')'  expected	249	None	add
1199	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.min(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.min(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
1200	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.min(mean,  p);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  p);  epsilon  =  Math.min(mean,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(mean,    p);    epsilon  =  Math.min(mean,  p);	  	compilable	  [FE]  MathRuntimeException$4  	249	1	add
1201	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(epsilon,  maxIterations);  n  =  Math.min(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	193	None	replace
1202	[BUG]  [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  psilon  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  psilon;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	163	None	replace
1203	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	150	None	replace
1204	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIters);  epsilon  =  Math.min(epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	192	None	add
1205	[BUG]  [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                epsilon        =        Math.max(epsilon,        maxIterations);        epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	192	None	add
1206	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  minIterations);  [CE]  cannot  find  symbol  fastMath  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  minIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    minIterations);    	non-compiled	[CE]  cannot  find  symbol  fastMath	123	None	replace
1207	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int,double)	259	None	replace
1208	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  ';'  expected  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  ';'  expected	13	None	add
1209	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
1210	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
1211	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,double,int,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,int)	82	None	replace
1212	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	82	None	replace
1213	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	non-compiled	[CE]  ';'  expected	248	None	replace
1214	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1));  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p  +  1));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1));    	non-compiled	[CE]  ';'  expected	248	None	replace
1215	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon  +  1);  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  epsilon  +  1);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	20	None	replace
1216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIters);    	compilable	  [FE]  AssertionFailedError  	93	1	replace
1217	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  epsilon  =  Math.max(epsilon,  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.max(epsilon,    maxIters);    	compilable	  [FE]  AssertionFailedError  	93	1	replace
1218	[BUG]  [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	153	None	replace
1219	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  min(double,double,int,double)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int,double)	181	None	replace
1220	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON_MEAN,  maxIterations);  [CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON_MEAN,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON_MEAN,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON_MEAN	181	None	replace
1221	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.METHOD_NAME,  p,  epsilon);  [CE]  cannot  find  symbol  METHOD_NAME  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.METHOD_NAME,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.METHOD_NAME,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  METHOD_NAME	196	None	replace
1222	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_STRING_AS_NULL_OBJECT,  p,  epsilon);  [CE]  cannot  find  symbol  EMPTY_STRING_AS_NULL_OBJECT  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_STRING_AS_NULL_OBJECT,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.EMPTY_STRING_AS_NULL_OBJECT,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING_AS_NULL_OBJECT	196	None	replace
1223	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p)/  epsilon);  [CE]  no  suitable  method  found  for  min(double)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p)/  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p)/  epsilon);	  this.mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	209	None	replace
1224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);	  this.mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	209	1	replace
1225	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p),  epsilon  +  maxIterations);	  this.mean    =    Math.min(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	209	1	replace
1226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p)/  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
1227	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
1228	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
1229	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  p  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    p  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
1230	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	229	None	replace
1231	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	231	None	replace
1232	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	231	None	replace
1233	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.00,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	291	None	add
1234	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTAL_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_IMPLEMENTAL_POISSON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTAL_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTAL_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTAL_POISSON_MEAN	5	None	add
1235	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN	5	None	add
1236	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	304	None	replace
1237	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	304	None	replace
1238	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  psilon  +  1);  [CE]  cannot  find  symbol  psilon  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  psilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  psilon  +  1);	  this.mean    =    Math.max(0.0,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol  psilon	2	None	replace
1239	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  1,  maxIterations);	  this.mean    =    Math.max(0.0,    p    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	2	None	replace
1240	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
1241	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
1242	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	261	None	add
1243	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  2));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  2));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  2));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	62	None	add
1244	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p  +  1));  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p  +  1));	  	non-compiled	[CE]  ';'  expected	62	None	add
1245	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	134	None	add
1246	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  e  [CE]  ')'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  e  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  e	  	non-compiled	[CE]  ')'  expected	134	None	add
1247	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	57	None	replace
1248	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	145	None	replace
1249	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [CE]  no  suitable  method  found  for  max(double,double,int,double,double)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON,  mean);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,double)	188	None	replace
1250	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	147	None	replace
1251	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN));  [CE]  ';'  expected  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	268	None	replace
1252	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	114	None	add
1253	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	127	None	replace
1254	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double,double)	127	None	replace
1255	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  psilon);  [CE]  cannot  find  symbol  psilon  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  psilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  psilon);	  this.mean    =    Math.min(0.0,    p);    	non-compiled	[CE]  cannot  find  symbol  psilon	4	None	replace
1256	[BUG]  [BUGGY]  this.mean  =  FastMath.sint(p);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sint(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sint(p);	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
1257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sin(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sin(p);	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	compilable	  [FE]  AssertionFailedError  	266	1	replace
1258	[BUG]  [BUGGY]  this.mean  =  FastMath.sin(p);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sin(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sin(p);	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	compilable	  [FE]  AssertionFailedError  	266	1	replace
1259	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
1260	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        p    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	67	1	add
1261	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  int  mean  =  Math.max(0.0,  p  +  1);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  int  mean  =  Math.max(0.0,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    p    +    1);    int  mean  =  Math.max(0.0,  p  +  1);	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
1262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  0;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  0;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1263	[BUG]  [BUGGY]  this.mean  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  0;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  0;	  this.mean    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionFailedError  	213	1	replace
1264	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	169	None	add
1265	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  1);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
1266	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  1);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
1267	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0.0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0.0);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
1268	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0.0);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0.0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0.0);	  	compilable	  [FE]  MathRuntimeException$4  	80	1	add
1269	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  int  mean  =  Math.max(1.0,  p);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  p);  int  mean  =  Math.max(1.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    p);    int  mean  =  Math.max(1.0,  p);	  	non-compiled	[CE]  possible  loss  of  precision	306	None	add
1270	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	69	None	add
1271	[BUG]  [BUGGY]  float  mean  =  Math.max(p,  epsilon);  [CE]  possible  loss  of  precision  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  float  mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	float  mean  =  Math.max(p,  epsilon);	          this.mean    =    Math.max(p,    epsilon);    int    mean    =    Math.max(p,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
1272	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
1273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1274	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p  +  1),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1275	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
1276	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.abs(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	21	1	add
1277	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
1278	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.sqrt(p),        epsilon);        this.mean    =    Math.min(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	261	1	add
1279	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  Math.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  mean  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);  Math.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        epsilon);        this.mean    =    Math.max(p,    epsilon);    Math.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	69	None	add
1280	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	114	None	add
1281	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  incompatible  types	235	None	add
1282	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    2);    Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  	non-compiled	[CE]  unreachable  statement	235	None	add
1283	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  3;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    p    +    2;    this.mean  =  p  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
1284	[BUG]  [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  3;  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  2;  this.mean  =  p  +  3;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    p    +    2;    this.mean  =  p  +  3;	  	compilable	  [FE]  MathRuntimeException$4  	177	1	add
1285	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.min(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    p);    this.mean  =  Math.min(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
1286	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.min(epsilon,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.min(epsilon,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    this.mean  =  Math.min(epsilon,  p);	  	compilable	  [FE]  MathRuntimeException$4  	105	1	add
1287	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.max(epsilon,  p));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  p);  this.mean  =  Math.max(epsilon,  p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    p);    this.mean  =  Math.max(epsilon,  p));	  	non-compiled	[CE]  ';'  expected	105	None	add
1288	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  psilon  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  psilon	118	None	add
1289	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  	non-compiled	[CE]  incompatible  types	233	None	add
1290	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	233	None	add
1291	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  p);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	100	None	replace
1292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	223	1	replace
1293	[BUG]  [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  }  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	223	1	replace
1294	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  IllegalArgumentException  	223	1	replace
1295	[BUG]  [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  IllegalArgumentException  	223	1	replace
1296	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  incompatible  types	267	None	replace
1297	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  enpsilon  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  DEFAULT_EPSILON);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    enpsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  enpsilon	241	None	replace
1298	[BUG]  [BUGGY]  Integer  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Integer  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Integer  epsilon  =  Math.max(epsilon,  maxIterations);	          epsilon    =    Math.max(epsilon,    maxIterations);    int    epsilon    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	92	None	replace
1299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon  /  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
1300	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  /  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon  /  1);	  this.mean    =    Math.max(0.0,    epsilon    +    1);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
1301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	compilable	  [FE]  AssertionFailedError  	268	1	replace
1302	[BUG]  [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	compilable	  [FE]  AssertionFailedError  	268	1	replace
1303	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  DEFAULT_EPSILON));	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON));    	non-compiled	[CE]  ';'  expected	268	None	replace
1304	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p));  [CE]  no  suitable  method  found  for  max(double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p));	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	96	None	replace
1305	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int,int)	10	None	replace
1306	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	10	None	replace
1307	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  incompatible  types	228	None	add
1308	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    maxIterations);    Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	228	None	add
1309	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	148	None	replace
1310	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    }    else    {    this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	279	None	add
1311	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  normal);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  normal);	  this.mean    =    Math.max(Math.mean(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol	282	None	replace
1312	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1313	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(	          this.mean    =    FastMath.sqrt(p);    if(this.epsilon    <    =    DEFAULT_EPSILON)    {    return    new    NormalDistributionImpl(DEFAULT_EPSILON,    FastMath.sqrt(p));    }    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1314	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  deFAULT_EPSILON;  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  DEFAULT_EPSILON;  this.mean  =  deFAULT_EPSILON;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    DEFAULT_EPSILON;    this.mean  =  deFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	212	None	add
1315	[BUG]  [BUGGY]  Math.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  mean  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Math.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Math.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  mean	99	None	replace
1316	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p    +    1));    PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
1317	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1318	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon,    maxIterations);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  	non-compiled	[CE]  incompatible  types	7	None	add
1319	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)/  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	253	1	replace
1320	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)/  epsilon,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1)/  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	253	1	replace
1321	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.00,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    p    +    1);    this.mean  =  Math.max(0.00,  p  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
1322	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.00,  p  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  this.mean  =  Math.max(0.00,  p  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    p    +    1);    this.mean  =  Math.max(0.00,  p  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	1	1	add
1323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
1324	[BUG]  [BUGGY]  this.mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  FastMath.sqrt(p  +  DEFAULT_EPSILON);	          this.mean    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
1325	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	230	None	replace
1326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
1327	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_MAX_ITERATIONS);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
1328	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [CE]  cannot  find  symbol  defsilon  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  defsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defsilon	9	None	replace
1329	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  MAX_ITERATIONS);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIters);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	204	None	replace
1330	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	26	None	add
1331	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	26	None	add
1332	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(mean,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  p,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	35	None	replace
1333	[BUG]  [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  cannot  find  symbol  MutableFormats  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MutableFormats.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MutableFormats	46	None	replace
1334	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  p,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(p,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	34	None	replace
1335	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON,    mean);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  incompatible  types	116	None	add
1336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
1337	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	269	1	replace
1338	[BUG]  [BUGGY]  if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  }  [CE]  cannot  find  symbol  m  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  m	269	None	replace
1339	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
1340	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.abs(p),    epsilon    +    1);    this.mean  =  Math.min(Math.abs(p),  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
1341	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  FastMath.sqrt(epsilon));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	289	None	replace
1342	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  fastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  fastMath  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  fastMath.sqrt(epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  fastMath.sqrt(epsilon));	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  fastMath	289	None	replace
1343	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	169	None	add
1344	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
1345	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
1346	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  maxIterations  =  maxIterations;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
1347	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  maxIterations  =  maxIterations;  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  maxIterations  =  maxIterations;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  this.epsilon  =  epsilon;  maxIterations  =  maxIterations;	  	compilable	  [FE]  MathRuntimeException$4  	215	1	add
1348	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  }  else  {  p  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  }  else  {  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	215	12	add
1349	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  }  else  {  p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p);  }  else  {  p  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p);  }  else  {  p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	215	12	add
1350	[BUG]  [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p).sqrt(p);  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          p  =  FastMath.sqrt(p);  p  =  FastMath.sqrt(p).sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                p    =    FastMath.sqrt(p);    p  =  FastMath.sqrt(p).sqrt(p);	  	non-compiled	[CE]  double  cannot  be  dereferenced	215	None	add
1351	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  0,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,int,double)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(p,  0,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  0,  DEFAULT_EPSILON);	          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double)	66	None	replace
1352	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  =  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  =  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  =  DEFAULT_EPSILON);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
1353	[BUG]  [BUGGY]  Preconditions.checkState(epsilon  <  =  0  ||  epsilon  >  maxIterations);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Preconditions.checkState(epsilon  <  =  0  ||  epsilon  >  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Preconditions.checkState(epsilon  <  =  0  ||  epsilon  >  maxIterations);	          Preconditions.checkState(epsilon    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
1354	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  defULT_EPSILON);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  defULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  defULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIters);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	232	None	replace
1355	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  p  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    p  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
1356	[BUG]  [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  p  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);  p  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(Math.abs(p),        epsilon);        this.mean    =    Math.min(Math.abs(p),    epsilon);    p  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
1357	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    epsilon);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  	non-compiled	[CE]  incompatible  types	56	None	add
1358	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,int)	127	None	replace
1359	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
1360	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON);    this.mean  =  Math.min(Math.sqrt(p),  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	273	1	add
1361	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon)+  1,  maxIterations);  [CE]  cannot  find  symbol  fastMath  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon)+  1,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    fastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  fastMath	121	None	replace
1362	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  	non-compiled	[CE]  unreachable  statement	54	None	add
1363	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1));	  	non-compiled	[CE]  ';'  expected	54	None	add
1364	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.0,  epsilon  +  1));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.0,  epsilon  +  1));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    epsilon    +    1);    this.mean  =  Math.max(0.0,  epsilon  +  1));	  	non-compiled	[CE]  ';'  expected	86	None	add
1365	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.00,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    epsilon    +    1);    this.mean  =  Math.max(0.00,  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	86	1	add
1366	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.00,  epsilon  +  1);  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  this.mean  =  Math.max(0.00,  epsilon  +  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    epsilon    +    1);    this.mean  =  Math.max(0.00,  epsilon  +  1);	  	compilable	  [FE]  MathRuntimeException$4  	86	1	add
1367	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.min(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(Math.sin(p),    epsilon);    this.mean  =  Math.min(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
1368	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.min(Math.sin(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  this.mean  =  Math.min(Math.sin(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(Math.sin(p),    epsilon);    this.mean  =  Math.min(Math.sin(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	179	1	add
1369	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  maxIterations);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  maxIterations);	  this.mean    =    Math.max(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
1370	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1371	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  p;  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1372	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1373	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.mean(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1374	[BUG]  [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	160	None	add
1375	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.001,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.001,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
1376	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.001,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.001,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.001,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	129	1	add
1377	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  n  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	n  =  Math.max(epsilon,  DEFAULT_EPSILON);  n  =  Math.min(epsilon,  DEFAULT_MAX_ITERATIONS);	          epsilon    =    Math.max(epsilon,    maxIterations);    epsilon    =    Math.min(epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	193	None	replace
1378	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
1379	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1380	[BUG]  [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  0)  {  this.mean  =  Math.max(0.0,  p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    p);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1381	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON,  MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	301	None	replace
1382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
1383	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  mean  =  Math.max(Math.sqrt(p),  epsilon);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int    mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
1384	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  2,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  2,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    	compilable	  [FE]  StackOverflowError  	59	1	replace
1385	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  2,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  2,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  2,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations);    	compilable	  [FE]  StackOverflowError  	59	1	replace
1386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
1387	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  mean  =  Math.max(0.0,  epsilon);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  mean  =  Math.max(0.0,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    int    mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	293	1	replace
1388	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.min(p,  epsilon));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(p,  epsilon);  this.mean  =  Math.min(p,  epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(p,    epsilon);    this.mean  =  Math.min(p,  epsilon));	  	non-compiled	[CE]  ';'  expected	194	None	add
1389	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	27	None	replace
1390	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
1391	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);  epsilon  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
1392	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
1393	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	1	add
1394	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	12	add
1395	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	24	12	add
1396	[BUG]  [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  FastMath.sqrt(p);  this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    FastMath.sqrt(p);    this.mean  =  FastMath.sqrt(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }	  	non-compiled	[CE]  <identifier>  expected	24	None	add
1397	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  	non-compiled	[CE]  incompatible  types	32	None	add
1398	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    mean);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	32	None	add
1399	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	243	None	replace
1400	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
1401	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.maxIterations);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    	compilable	  [FE]  StackOverflowError  	243	1	replace
1402	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.min(0.0,  p;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p);  this.mean  =  Math.min(0.0,  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    p);    this.mean  =  Math.min(0.0,  p;	  	non-compiled	[CE]  ')'  expected	3	None	add
1403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  /  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  /  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
1404	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  /  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  /  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  /  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon    +    maxIterations);    	compilable	  [FE]  AssertionFailedError  	207	1	replace
1405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  -  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  -  1);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
1406	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  -  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON  -  1);	  this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	37	1	replace
1407	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  normal);  [CE]  no  suitable  method  found  for  min(double,NormalDistribution)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  normal);	  this.mean    =    Math.min(0.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,NormalDistribution)	239	None	replace
1408	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  MAX_ITERATIONS),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  MAX_ITERATIONS),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON,  MAX_ITERATIONS),  epsilon,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p,    DEFAULT_EPSILON),    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	52	None	replace
1409	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  1,  DEFAULT_EPSILON);	  this.mean    =    Math.max(0.0,    p    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	2	None	replace
1410	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  	non-compiled	[CE]  incompatible  types	300	None	add
1411	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  deFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  deFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	300	None	add
1412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.001,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.001,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1413	[BUG]  [BUGGY]  this.mean  =  Math.max(0.001,  p);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.001,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.001,  p);	          this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1414	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	  	non-compiled	[CE]  cannot  find  symbol	242	None	add
1415	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.epsilon);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(this.epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon),  this.epsilon);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	242	None	add
1416	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
1417	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p  +  1);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    	compilable	  [FE]  MathRuntimeException$4  	29	1	replace
1418	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon)/  DEFAULT_EPSILON);  [CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  epsilon)/  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  epsilon)/  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	non-compiled	[CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;	275	None	replace
1419	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON)/  epsilon);  [CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON)/  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p,  DEFAULT_EPSILON)/  epsilon);	  this.mean    =    Math.max(Math.sin(p)/    epsilon);    	non-compiled	[CE]  method  sin  in  class  Math  cannot  be  applied  to  given  types;	275	None	replace
1420	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.1,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(1.0,    epsilon);    this.mean  =  Math.max(1.1,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	88	1	add
1421	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.1,  epsilon);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  this.mean  =  Math.max(1.1,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(1.0,    epsilon);    this.mean  =  Math.max(1.1,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	88	1	add
1422	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
1423	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	276	1	add
1424	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.00,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    this.mean  =  Math.max(0.00,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
1425	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.00,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  this.mean  =  Math.max(0.00,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(0.0,    DEFAULT_EPSILON);    this.mean  =  Math.max(0.00,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	36	1	add
1426	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  ';'  expected	47	None	replace
1427	[BUG]  [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable    cause    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	44	None	replace
1428	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,double,int)  [FE]                    MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,int)	53	None	replace
1429	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	53	None	replace
1430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
1431	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sin(p),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
1432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
1433	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p  +  1),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sin(p  +  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p  +  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sin(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	272	1	replace
1434	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	134	1	add
1435	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        epsilon);        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	134	1	add
1436	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  0,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  0,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  0,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int)	260	None	replace
1437	[BUG]  [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SECONDS_MEAN,  p);  [CE]  cannot  find  symbol  NOT_SECONDS_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SECONDS_MEAN,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        p;        MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_SECONDS_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_SECONDS_MEAN	200	None	add
1438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1439	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  +  DEFAULT_EPSILON;  this.mean  =  p;	          this.mean    =    p;    this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1440	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	252	None	add
1441	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)/    epsilon,    maxIterations);    PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	252	None	add
1442	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    maxIterations);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  	non-compiled	[CE]  incompatible  types	30	None	add
1443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p)/  epsilon,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
1444	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  epsilon,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
1445	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  normal,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,NormalDistribution,double,int)  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  normal,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  normal,  epsilon,  maxIterations);	  this.mean    =    Math.min(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,NormalDistribution,double,int)	181	None	replace
1446	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	147	None	replace
1447	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	5	None	add
1448	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	5	None	add
1449	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  	non-compiled	[CE]  incompatible  types	28	None	add
1450	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  [CE]  illegal  start  of  expression  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON,    p);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1451	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,double,int)  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,double,int)	259	None	replace
1452	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  normal,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.sqrt(p),    normal,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)	259	None	replace
1453	[BUG]  [BUGGY]  epsilon  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  incompatible  types	304	None	replace
1454	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  int  this.mean  =  Math.min(0.0,  epsilon);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  int  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.min(0.0,    epsilon);    int  this.mean  =  Math.min(0.0,  epsilon);	  	non-compiled	[CE]  not  a  statement	238	None	add
1455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(Math.abs(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(Math.abs(p),  maxIterations);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
1456	[BUG]  [BUGGY]  epsilon  =  Math.min(Math.abs(p),  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(Math.abs(p),  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(Math.abs(p),  maxIterations);	  epsilon    =    Math.min(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
1457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p)+  1;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	p  =  FastMath.sqrt(p)+  1;	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
1458	[BUG]  [BUGGY]  p  =  FastMath.sqrt(p)+  1;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  FastMath.sqrt(p)+  1;  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  FastMath.sqrt(p)+  1;	          p    =    FastMath.sqrt(p);    	compilable	  [FE]  AssertionFailedError  	216	1	replace
1459	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	12	add
1460	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	12	add
1461	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);  }  else  {  this.mean  =  FastMath.sqrt(p);  }	  	non-compiled	[CE]  <identifier>  expected	219	None	add
1462	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1463	[BUG]  [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean  =  Math.abs(p);  this.mean  =  Math.abs(p);this.mean  =  FastMath.sqrt(p);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean    =    Math.abs(p);    this.mean  =  Math.abs(p);this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	219	1	add
1464	[BUG]  [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  incompatible  types	285	None	replace
1465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	285	1	replace
1466	[BUG]  [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	285	1	replace
1467	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	50	None	replace
1468	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1469	[BUG]  [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistribution  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistribution  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(epsilon  <  =  DEFAULT_EPSILON)  {  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistribution	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p);    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1470	[BUG]  [BUGGY]  if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }  [CE]  cannot  find  symbol  m  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(m  ==  null)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  }	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  m	305	None	replace
1471	[BUG]  [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable    m    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	305	None	replace
1472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
1473	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  epsilon,  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.sqrt(p)/    epsilon);    	compilable	  [FE]  AssertionFailedError  	225	1	replace
1474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1475	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(mean,  DEFAULT_EPSILON);	  epsilon    =    Math.max(epsilon,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1476	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	155	1	replace
1477	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	155	1	replace
1478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.001,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.001,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
1479	[BUG]  [BUGGY]  this.mean  =  Math.max(0.001,  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(0.001,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.001,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
1480	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.00,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
1481	[BUG]  [BUGGY]  this.mean  =  Math.min(0.00,  epsilon);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.00,  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.00,  epsilon);	          this.mean    =    Math.max(0.0,    epsilon);    this.mean    =    Math.max(0.00,    epsilon);    	compilable	  [FE]  AssertionFailedError  	292	1	replace
1482	[BUG]  [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [CE]  incompatible  types  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p    =    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	non-compiled	[CE]  incompatible  types	247	None	replace
1483	[BUG]  [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  <  =  DEFAULT_EPSILON)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  }  else  {  throw  MathRuntimeException.	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    p);    this.mean    =    p;    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1484	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [FE]        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	237	None	replace
1485	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DOUBLE,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  DOUBLE  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DOUBLE,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DOUBLE,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,    DEFAULT_POSITIVE_POISSON_MEAN);    	non-compiled	[CE]  cannot  find  symbol  DOUBLE	237	None	replace
1486	[BUG]  [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  Math.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  mean  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);  Math.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(p,        DEFAULT_EPSILON);        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    Math.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  mean	64	None	add
1487	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p));  [CE]  no  suitable  method  found  for  min(double)  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(Math.abs(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p));	          this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean    =    Math.min(Math.abs(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	18	None	replace
1488	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
1489	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(epsilon,    DEFAULT_EPSILON);    this.mean  =  Math.min(epsilon,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	283	1	add
1490	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  DEFAULT_EPSILON,  epsilon,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	231	None	replace
1491	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	286	None	replace
1492	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe),  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  pe  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(pe),  DEFAULT_EPSILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  pe	11	None	replace
1493	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	51	None	replace
1494	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [CE]  no  suitable  method  found  for  max(double,double,double,int,int)  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations,  DEFAULT_MAX_ITERATIONS);	  this.mean    =    Math.max(Math.sqrt(p),    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int,int)	51	None	replace
1495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	if(p  >  epsilon)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  AssertionFailedError  	201	1	replace
1496	[BUG]  [BUGGY]  if(p  >  epsilon)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }	          this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	compilable	  [FE]  AssertionFailedError  	201	1	replace
1497	[BUG]  [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO  [CE]  ')'  expected  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_PO	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  ')'  expected	172	None	replace
1498	[BUG]  [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON  [CE]  ')'  expected  [FE]                  MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	if(p  >  epsilon)  {  this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON	          this.mean    =    Math.max(0.0,    p);    this.mean    =    Math.max(0.0,    p);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p);    	non-compiled	[CE]  ')'  expected	172	None	replace
1499	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(DEFAULT_EPSILON,  p,  epsilon,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    DEFAULT_EPSILON,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	128	None	replace
1500	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    this.mean  =  Math.min(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
1501	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  this.mean  =  Math.min(DEFAULT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean    =    Math.max(DEFAULT_EPSILON,    p);    this.mean  =  Math.min(DEFAULT_EPSILON,  p);	  	compilable	  [FE]  MathRuntimeException$4  	294	1	add
1502	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	80	None	add
1503	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
1504	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0).createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	80	None	add
1505	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).max(epsilon,  0);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(epsilon,  0);  epsilon  =  Math.max(epsilon,  0).max(epsilon,  0);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.max(epsilon,    0);    epsilon  =  Math.max(epsilon,  0).max(epsilon,  0);	  	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	add
1506	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+1  1,  maxIterations);  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+1  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+1  1,  maxIterations);	  	non-compiled	[CE]  ')'  expected	254	None	add
1507	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p)+    1,    maxIterations);    PositiveDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	254	None	add
1508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p  -  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p  -  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1509	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p  -  1),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p  -  1),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p  -  1),  DEFAULT_EPSILON);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(Math.abs(p),  epsilon);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
1511	[BUG]  [BUGGY]  epsilon  =  Math.max(Math.abs(p),  epsilon);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(Math.abs(p),  epsilon);	  epsilon    =    Math.max(mean,    p);    	compilable	  [FE]  AssertionFailedError  	250	1	replace
1512	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                        MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_MAX_ITERATIONS);	  PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	144	None	replace
1513	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  DEFAULT_EPSILON);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  DEFAULT_EPSILON);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  DEFAULT_EPSILON);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	244	None	replace
1514	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  epsilon);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  epsilon);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal),  epsilon);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	244	None	replace
1515	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(d,  normal));  [CE]  cannot  find  symbol  d  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(d,  normal));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(d,  normal));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(normal));    	non-compiled	[CE]  cannot  find  symbol  d	244	None	replace
1516	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon)+  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]              StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon)+  minIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon)+  minIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    minIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	123	None	replace
1517	[BUG]  [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                PoissonDistributionImpl        mean        =        new        PoissonDistributionImpl(p,        epsilon,        maxIterations);        PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	140	None	add
1518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p  -  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.0,  p  -  1);	  this.mean    =    Math.min(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
1519	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.min(0.0,  p  -  1);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  p  -  1);	  this.mean    =    Math.min(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
1520	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p));  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(p));	  	non-compiled	[CE]  ';'  expected	60	None	add
1521	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p.sqrt(p));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p.sqrt(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p.sqrt(p));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	60	None	add
1522	[BUG]  [BUGGY]  NeighborDistributionImpl  mean  =  new  NeighborDistributionImpl(p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  NeighborDistributionImpl  mean  =  new  NeighborDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	NeighborDistributionImpl  mean  =  new  NeighborDistributionImpl(p,  epsilon,  maxIterations);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1523	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  ';'  expected  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  ';'  expected	157	None	replace
1524	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  MAX_ITERATIONS  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  MAX_ITERATIONS);	  this.mean    =    Math.max(Math.abs(p),    DEFAULT_EPSILON,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_ITERATIONS	82	None	replace
1525	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(p));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(p));  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sint(p));	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  *  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  *  2;	  this.mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	178	1	replace
1527	[BUG]  [BUGGY]  this.mean  =  p  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  p  *  2;  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  *  2;	  this.mean    =    p    +    2;    	compilable	  [FE]  AssertionFailedError  	178	1	replace
1528	[BUG]  [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	42	None	replace
1529	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( " ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException( " ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1530	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( " ");  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( " ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException( " ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1531	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  supported. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  supported. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1532	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  supported. ");  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  supported. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  supported. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1533	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  null. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  null. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1534	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  null. ");  [FE]  MathRuntimeException$4  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  null. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  null. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1535	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  a  valid  position. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  a  valid  position. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1536	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  a  valid  position. ");  [FE]  MathRuntimeException$4  [FE]                MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  a  valid  position. ");  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException( "The  LocalizedFormats.NOT_POSITIVE_POISSON_MEAN  is  not  a  valid  position. ");	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon));    	compilable	  [FE]  MathRuntimeException$4  	270	1	replace
1537	[BUG]  [BUGGY]  This.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  This.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	This.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations);	          this.mean    =    Math.max(Math.sqrt(p),    epsilon);    This.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  cannot  find  symbol  This	97	None	replace
1538	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations);  [CE]  cannot  find  symbol  DEFAULT_PESILON  [FE]        StackOverflowError      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_PESILON,  maxIterations);	  PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(p),    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PESILON	214	None	replace
1539	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  normal);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution)  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(1.0,  normal);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  normal);	  this.mean    =    Math.max(1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution)	89	None	replace
1540	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsileon,  maxIterations);  [CE]  cannot  find  symbol  epsileon  [FE]    AssertionFailedError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  epsilon  =  Math.min(epsileon,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon    =    Math.min(epsilon,    maxIterations);    epsilon  =  Math.min(epsileon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  epsileon	76	None	add
1541	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,double,int)  [FE]                      MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  DEFAULT_EPSILON,  maxIterations);	  this.mean    =    Math.max(Math.abs(p),    epsilon,    DEFAULT_MAX_ITERATIONS,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double,int)	85	None	replace
1542	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
1543	[BUG]  [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]          this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	                this.mean        =        Math.max(0.0,        p);        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.00,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	166	1	add
1544	[BUG]  [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon  +  1);  [CE]  ';'  expected  [FE]              MathRuntimeException$4      [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon  +  1);  [BUGGY]      }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	non-compiled	[CE]  ';'  expected	43	None	replace
1545	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  means);  [CE]  cannot  find  symbol  means  [FE]    StackOverflowError    [CONTEXT]      public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {      [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  means);  [BUGGY]      throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  means);	          PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl    means    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  cannot  find  symbol  means	103	None	replace
