bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  p  +  1);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
2	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  p  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  p  +  1);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.0,  p);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
4	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  p);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  p);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
5	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	2	1	replace
6	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	2	1	replace
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	2	1	replace
8	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	2	1	replace
9	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	25	None	replace
10	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	25	None	replace
11	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	25	None	replace
12	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]          StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  epsilon,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	25	None	replace
13	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	37	1	add
14	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.max(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	37	1	add
15	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  This.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    This.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	37	None	add
16	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  int  mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  int  mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    int  mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
17	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	37	1	add
18	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    this.mean  =  Math.min(Math.abs(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	37	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
20	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  +  1);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
22	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
23	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon);  [CE]  no  suitable  method  found  for  max(double)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p)/  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p)/  epsilon);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	38	None	replace
24	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
25	[BUG]  [BUGGY]      this.mean  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
26	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
27	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
28	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
29	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
30	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
31	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
32	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
33	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [FE]  MathRuntimeException$4  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	6	1	replace
34	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON,  epsilon);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	12	None	replace
35	[BUG]  [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(p,  DEFAULT_EPSILON,  maxIterations);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	12	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
37	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(p,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
39	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
40	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  unreachable  statement	1	None	add
41	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	add
42	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  unreachable  statement  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  unreachable  statement	1	None	add
43	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  ';'  expected  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  ';'  expected	1	None	add
44	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable  cause  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  unreachable  statement	1	None	add
45	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	29	None	add
46	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	29	None	add
47	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  	non-compiled	[CE]  ';'  expected	29	None	add
48	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  	non-compiled	[CE]  unreachable  statement	29	None	add
49	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  minIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	29	None	add
50	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	35	None	replace
51	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	35	None	replace
52	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	35	None	replace
53	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,int)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int)	35	None	replace
54	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
55	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon  +  1);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
56	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
57	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
58	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
59	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
60	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
61	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
62	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
63	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p  +  1));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
64	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
65	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
66	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  This.mean  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    This.mean  =  Math.max(p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  This	11	None	add
67	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
68	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  p  =  Math.max(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    p  =  Math.max(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
69	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
70	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
71	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  This.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    This.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	13	None	add
72	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  int  mean  =  Math.max(p,  epsilon);  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  int  mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    int  mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
73	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	21	None	replace
74	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  mean);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	21	None	replace
75	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	21	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.min(epsilon,  maxIterations);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
77	[BUG]  [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.min(epsilon,  maxIterations);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
79	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  DEFAULT_EPSILON);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  0);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  0);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
81	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  0);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  0);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  0);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
82	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	36	None	replace
83	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON,  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	36	None	replace
84	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p,  DEFAULT_EPSILON),  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	36	None	replace
85	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int,int)  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_MAX_ITERATIONS,  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,int)	36	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(0.0,  epsilon  +  1);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
87	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  epsilon  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  epsilon  +  1);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(1.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
89	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(1.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
90	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	33	1	add
91	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	33	1	add
92	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  int  epsilon  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        epsilon    =    Math.max(epsilon,    maxIterations);    int  epsilon  =  Math.max(epsilon,  maxIterations);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	33	None	add
93	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  maxIters);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	33	None	add
94	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.max(epsilon,  minIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.max(epsilon,  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	33	None	add
95	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
96	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
97	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  This.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    This.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	39	None	add
98	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  int  mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  int  mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    int  mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	39	None	add
99	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  Math.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  mean  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  Math.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    Math.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  mean	39	None	add
100	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	add
101	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	add
102	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  StackOverflowError  	26	1	add
103	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	compilable	  [FE]  StackOverflowError  	26	1	add
104	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	26	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(epsilon,  p);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
106	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  p);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(epsilon,  maxIterations);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
108	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  maxIterations);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
109	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  unreachable  statement	3	None	add
110	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
111	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  ';'  expected	3	None	add
112	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  unreachable  statement	3	None	add
113	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon);  [CE]  cannot  find  symbol  psilon  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  psilon);	  	non-compiled	[CE]  cannot  find  symbol  psilon	3	None	add
114	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
115	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
116	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
117	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON,  mean);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
118	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
119	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	compilable	  [FE]  MathRuntimeException$4  	8	1	replace
120	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	add
121	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  fastMath.sqrt(epsilon),  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	add
122	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(Epsilon),  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	add
123	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	add
124	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	23	1	replace
125	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	compilable	  [FE]  StackOverflowError  	23	1	replace
126	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  DEFAULT_EPSILON,  epsilon,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	23	None	replace
127	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	23	None	replace
128	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)  [FE]          StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double,int)	23	None	replace
129	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
130	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
131	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	add
132	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
133	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	17	None	add
134	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
135	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [FE]  MathRuntimeException$4  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
136	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
137	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  minIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
138	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]        StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
139	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]          StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
140	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	compilable	  [FE]  StackOverflowError  	22	1	add
141	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  means  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);	  	compilable	  [FE]  StackOverflowError  	22	1	add
142	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  epsilon,  maxIterations);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	28	None	replace
143	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                  MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  DEFAULT_EPSILON,  maxIterations);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	28	None	replace
144	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  p,  epsilon,  DEFAULT_EPSILON);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	28	None	replace
145	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	5	None	add
146	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
147	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	5	None	add
148	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	5	None	add
149	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	5	None	add
150	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  	non-compiled	[CE]  unreachable  statement	31	None	add
151	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  	non-compiled	[CE]  unreachable  statement	31	None	add
152	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  	non-compiled	[CE]  ';'  expected	31	None	add
153	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  cannot  find  symbol  Throwables  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	31	None	add
154	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [CE]  ';'  expected  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));	  	non-compiled	[CE]  ';'  expected	31	None	add
155	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	7	None	add
156	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  Throwables  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throwables.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	add
157	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    Throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  ';'  expected	7	None	add
158	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  unreachable  statement  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  unreachable  statement	7	None	add
159	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMatcher  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMatcher.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMatcher	7	None	add
160	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  this.mean  =  p;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
161	[BUG]  [BUGGY]      this.mean  =  p;  this.mean  =  p;  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  this.mean  =  p;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    this.mean  =  p;	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
162	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
163	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
164	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	15	None	add
165	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  p;	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	15	None	add
166	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
167	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
168	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	19	None	add
169	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
170	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
171	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	19	None	add
172	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [CE]  unreachable  statement  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	non-compiled	[CE]  unreachable  statement	19	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  1;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  +  1;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
174	[BUG]  [BUGGY]  this.mean  =  p  +  1;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  1;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  +  1;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  +  DEFAULT_EPSILON;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
176	[BUG]  [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  DEFAULT_EPSILON;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  +  DEFAULT_EPSILON;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  2;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  p  +  2;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
178	[BUG]  [BUGGY]  this.mean  =  p  +  2;  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  p  +  2;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  p  +  2;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p),  epsilon);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
180	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  epsilon);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
181	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.sqrt(p),  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	40	None	replace
182	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p),  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	40	None	replace
183	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(p,  epsilon,  MAX_ITERATIONS);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	21	None	replace
184	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	13	None	add
185	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	13	None	add
186	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	13	None	add
187	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	13	None	add
188	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	35	None	replace
189	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
190	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	39	None	add
191	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.sqrt(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	39	None	add
192	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	33	1	add
193	[BUG]  [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      epsilon  =  Math.max(epsilon,  maxIterations);  epsilon  =  Math.min(epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        epsilon    =    Math.max(epsilon,    maxIterations);    epsilon  =  Math.min(epsilon,  maxIterations);	  	compilable	  [FE]  MathRuntimeException$4  	33	1	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(p,  epsilon);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
195	[BUG]  [BUGGY]  this.mean  =  Math.min(p,  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(p,  epsilon);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
196	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p,  epsilon);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	30	None	replace
197	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	37	None	add
198	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON_MEAN  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON_MEAN	37	None	add
199	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.abs(p),  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.abs(p),    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(Math.abs(p),  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	37	None	add
200	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
201	[BUG]  [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  p;  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    p;    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);	  	compilable	  [FE]  MathRuntimeException$4  	15	1	add
202	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	8	None	replace
203	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMathRuntimeException  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMathRuntimeException	5	None	add
204	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIters);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	24	None	add
205	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon),  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p);  FastMath.sqrt(epsilon),  maxIterations);	  	non-compiled	[CE]  ';'  expected	24	None	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
207	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon  +  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(Math.abs(p),  epsilon);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
209	[BUG]  [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(Math.abs(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(Math.abs(p),  epsilon);	      this.mean    =    Math.max(Math.abs(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	38	1	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(epsilon,  maxIterations  +  1);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
211	[BUG]  [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(epsilon,  maxIterations  +  1);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(epsilon,  maxIterations  +  1);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  DEFAULT_EPSILON;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  DEFAULT_EPSILON;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
213	[BUG]  [BUGGY]  this.mean  =  DEFAULT_EPSILON;  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  DEFAULT_EPSILON;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  DEFAULT_EPSILON;	      this.mean    =    p;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
214	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  maxIterations,  DEFAULT_EPSILON);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int,double)	25	None	replace
215	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      p  =  FastMath.sqrt(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
216	[BUG]  [BUGGY]      p  =  FastMath.sqrt(p);  [FE]  MathRuntimeException$4  [FE]    AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      p  =  FastMath.sqrt(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        p  =  FastMath.sqrt(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
217	[BUG]  [BUGGY]      super(p,  epsilon,  maxIterations);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]      AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      super(p,  epsilon,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        super(p,  epsilon,  maxIterations);	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	9	None	add
218	[BUG]  [BUGGY]      Preconditions.checkState(epsilon  <  =  0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      Preconditions.checkState(epsilon  <  =  0);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        Preconditions.checkState(epsilon  <  =  0);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
219	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.abs(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
220	[BUG]  [BUGGY]      this.mean  =  Math.abs(p);  [FE]  MathRuntimeException$4  [FE]          AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.abs(p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean  =  Math.abs(p);	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
221	[BUG]  [BUGGY]      Preconditions.checkState(epsilon  <  =  0.0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      Preconditions.checkState(epsilon  <  =  0.0);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        Preconditions.checkState(epsilon  <  =  0.0);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
222	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_IMPLEMENTIVE_POISSON_MEAN	1	None	add
223	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  NOT_EXPECTED_POISSON_MEAN  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EXPECTED_POISSON_MEAN,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EXPECTED_POISSON_MEAN	19	None	add
224	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON;  [CE]  ')'  expected  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.max(p,  DEFAULT_EPSILON;  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.max(p,  DEFAULT_EPSILON;	  	non-compiled	[CE]  ')'  expected	11	None	add
225	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon);  [CE]  no  suitable  method  found  for  max(double)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p)/  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p)/  epsilon);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	40	None	replace
226	[BUG]  [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  p,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  PoissonDistributionImpl  [FE]                MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  p,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  =  new  PoissonDistributionImpl(0.0,  mean,  p,  epsilon,  maxIterations);	      PoissonDistributionImpl    =    new    PoissonDistributionImpl(0.0,    p,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  PoissonDistributionImpl	28	None	replace
227	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [CE]  cannot  find  symbol  NOT_POSITIVE_POISSON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON,  p);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  NOT_POSITIVE_POISSON	4	None	replace
228	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	4	1	replace
229	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    	compilable	  [FE]  MathRuntimeException$4  	4	1	replace
230	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,int,double)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  maxIterations,  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int,double)	36	None	replace
231	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  epsilon,  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	36	None	replace
232	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIters);  [CE]  cannot  find  symbol  maxIters  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIters);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIters);	  	non-compiled	[CE]  cannot  find  symbol  maxIters	29	None	add
233	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
234	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  maxIterations);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
235	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
236	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  2);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
237	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_POSITIVE_POISSON_MEAN);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	6	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.min(0.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
239	[BUG]  [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.min(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.min(0.0,  epsilon);	      this.mean    =    Math.max(0.0,    epsilon);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
240	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p  epsilon,  maxIterations);	  	non-compiled	[CE]  ')'  expected	22	None	add
241	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  enpsilon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
242	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
243	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(this.epsilon));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	compilable	  [FE]  StackOverflowError  	27	1	replace
244	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(normal));	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	27	None	replace
245	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  NOT_EPSILON  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON);  this.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  NOT_EPSILON	17	None	add
246	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ThrowsMathRuntimeException  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    ThrowsMathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  cannot  find  symbol  ThrowsMathRuntimeException	7	None	add
247	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);	  	non-compiled	[CE]  incompatible  types	31	None	add
248	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1));	  	non-compiled	[CE]  ';'  expected	31	None	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(mean,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	epsilon  =  Math.max(mean,  p);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
250	[BUG]  [BUGGY]  epsilon  =  Math.max(mean,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  epsilon  =  Math.max(mean,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	epsilon  =  Math.max(mean,  p);	      epsilon    =    Math.max(epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
251	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);  [CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsilon,  maxIterations);  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    epsilon,    maxIterations);    PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  epsileon,  maxIterations);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  constructor  PoissonDistributionImpl(double,double,int)	22	None	add
252	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	25	1	replace
253	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)/  epsilon,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	25	1	replace
254	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	25	1	replace
255	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p)+  1,  maxIterations);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon),    maxIterations);    	compilable	  [FE]  StackOverflowError  	25	1	replace
256	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
257	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.min(p,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.min(p,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	13	1	add
258	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  epsilon);  this.mean  =  Math.max(p,  epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    epsilon);    this.mean  =  Math.max(p,  epsilon));	  	non-compiled	[CE]  ';'  expected	13	None	add
259	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  normal,  epsilon,  maxIterations);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution,double,int)	35	None	replace
260	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  maxIterations);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]            MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  maxIterations);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.abs(p),  DEFAULT_EPSILON,  maxIterations);	      this.mean    =    Math.max(Math.abs(p),    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	36	None	replace
261	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
262	[BUG]  [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(Math.sqrt(p),  epsilon);  this.mean  =  Math.min(Math.sqrt(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(Math.sqrt(p),    epsilon);    this.mean  =  Math.min(Math.sqrt(p),  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	39	1	add
263	[BUG]  [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
264	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
265	[BUG]  [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [FE]  MathRuntimeException$4  [FE]      AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean  =  FastMath.sqrt(p);  if(this.epsilon  >  DEFAULT_EPSILON)  {  this.maxIterations  =  DEFAULT_MAX_ITERATIONS;  }	  	compilable	  [FE]  MathRuntimeException$4  	9	1	add
266	[BUG]  [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  }  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean  =  FastMath.sqrt(p);  if(this.epsilon  <  =  DEFAULT_EPSILON)  {  return  new  NormalDistributionImpl(DEFAULT_EPSILON,  FastMath.sqrt(p));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
267	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    p  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);	  	non-compiled	[CE]  incompatible  types	7	None	add
268	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON);  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    DEFAULT_EPSILON);    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  DEFAULT_EPSILON));	  	non-compiled	[CE]  ';'  expected	7	None	add
269	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [CE]  unreachable  statement  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);	  	non-compiled	[CE]  unreachable  statement	1	None	add
270	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon));  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    epsilon);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  epsilon));	  	non-compiled	[CE]  ';'  expected	1	None	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
272	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
274	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sqrt(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
275	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  epsilon);  [CE]  no  suitable  method  found  for  max(double)  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.sin(p)/  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.sin(p)/  epsilon);	      this.mean    =    Math.max(Math.sqrt(p),    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	40	None	replace
276	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
277	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	1	add
278	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    This.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	19	None	add
279	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	12	add
280	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  [FE]  MathRuntimeException$4  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    this.mean  =  Math.max(0.0,  p);  }  else  {  this.mean  =  Math.max(0.0,  p);	  	compilable	  [FE]  MathRuntimeException$4  	19	12	add
281	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [CE]  cannot  find  symbol  This  [FE]          MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  p);  This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    p);    This.mean  =  Math.max(0.0,  p);  this.mean  =  Math.max(0.0,  p);	  	non-compiled	[CE]  cannot  find  symbol  This	19	None	add
282	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  epsilon);  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.mean(p),  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  epsilon);	      this.mean    =    Math.max(p,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
284	[BUG]  [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(epsilon,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    epsilon);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
285	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p,    maxIterations);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p,  maxIterations);	  	non-compiled	[CE]  incompatible  types	29	None	add
286	[BUG]  [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(p),  DEFAULT_EPSILON);	      PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,double)	27	None	replace
287	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
288	[BUG]  [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(p,  DEFAULT_EPSILON);  this.mean  =  Math.min(p,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(p,    DEFAULT_EPSILON);    this.mean  =  Math.min(p,  DEFAULT_EPSILON);	  	compilable	  [FE]  MathRuntimeException$4  	11	1	add
289	[BUG]  [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      PoissonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        PoissonDistributionImpl    mean    =    new    PoissonDistributionImpl(p,    FastMath.sqrt(epsilon));    PsilonDistributionImpl  mean  =  new  PoissonDistributionImpl(p,  FastMath.sqrt(epsilon));	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
290	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  [CE]  cannot  find  symbol  This  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  This.mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    This.mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  cannot  find  symbol  This	17	None	add
291	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
292	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  this.mean  =  Math.max(0.00,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    this.mean  =  Math.max(0.00,  epsilon);	  	compilable	  [FE]  MathRuntimeException$4  	17	1	add
293	[BUG]  [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  int  mean  =  Math.max(0.0,  epsilon);  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]      this.mean  =  Math.max(0.0,  epsilon);  int  mean  =  Math.max(0.0,  epsilon);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	        this.mean    =    Math.max(0.0,    epsilon);    int  mean  =  Math.max(0.0,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(DEFAULT_EPSILON,  p);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
295	[BUG]  [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(DEFAULT_EPSILON,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(DEFAULT_EPSILON,  p);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
296	[BUG]  [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(Math.mean(p),  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(mean,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
298	[BUG]  [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [FE]  AssertionFailedError  [FE]        MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(mean,  DEFAULT_EPSILON);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(mean,  DEFAULT_EPSILON);	      this.mean    =    Math.max(p,    DEFAULT_EPSILON);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
299	[BUG]  [BUGGY]  this.mean  =  Math.max(0.0,  normal);  [CE]  no  suitable  method  found  for  max(double,NormalDistribution)  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(0.0,  normal);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(0.0,  normal);	      this.mean    =    Math.max(0.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,NormalDistribution)	18	None	replace
300	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
301	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [FE]  MathRuntimeException$4  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p  +  1,  DEFAULT_EPSILON);	  throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    p    +    1);    	compilable	  [FE]  MathRuntimeException$4  	32	1	replace
302	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);	  	non-compiled	[CE]  incompatible  types	5	None	add
303	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));  [CE]  ';'  expected  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON);  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    DEFAULT_EPSILON);    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  DEFAULT_EPSILON));	  	non-compiled	[CE]  ';'  expected	5	None	add
304	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  incompatible  types  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    this.mean  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  incompatible  types	3	None	add
305	[BUG]  [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [CE]  unreachable  statement  [FE]      MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);  [BUGGY]    }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	throw    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,    epsilon);    Throwable  m  =  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  epsilon);	  	non-compiled	[CE]  unreachable  statement	3	None	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(1.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	add	this.mean  =  Math.max(1.0,  p);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
307	[BUG]  [BUGGY]  this.mean  =  Math.max(1.0,  p);  [FE]  AssertionFailedError  [FE]    MathRuntimeException$4    [CONTEXT]    public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {    [BUGGY]  this.mean  =  Math.max(1.0,  p);  [BUGGY]    throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	1.0	94	94	1	replace	this.mean  =  Math.max(1.0,  p);	      this.mean    =    Math.max(0.0,    p);    	compilable	  [FE]  AssertionFailedError  	20	1	replace
