bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  p);		non-compiled	[CE]  <identifier>  expected	8	None	add
2	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN);		non-compiled	[CE]  <identifier>  expected	8	None	add
3	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [CE]  <identifier>  expected  [FE]        MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  p);		non-compiled	[CE]  <identifier>  expected	8	None	add
4	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON_MEAN,  DEFAULT_MAX_ITERATIONS);		non-compiled	[CE]  <identifier>  expected	8	None	add
5	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [CE]  <identifier>  expected  [FE]            MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_EPSILON,  DEFAULT_MAX_ITERATIONS);		non-compiled	[CE]  <identifier>  expected	8	None	add
6	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  int  epsilon,  int  maxIterations)  {  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int)  [FE]    MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  int  epsilon,  int  maxIterations)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  int  epsilon,  int  maxIterations)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int)	7	None	replace
7	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  DEFAULT_EPSILON)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	add	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  DEFAULT_EPSILON)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	compilable	  [FE]  MathRuntimeException$4  	7	1	replace
8	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  DEFAULT_EPSILON)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  DEFAULT_EPSILON)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  DEFAULT_EPSILON)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	compilable	  [FE]  MathRuntimeException$4  	7	1	replace
9	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  int  maxIterations)  {  [CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int)  [FE]        MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  int  maxIterations)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  int  maxIterations)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  PoissonDistributionImpl(double,double,int)	7	None	replace
10	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  int  epsilon,  maxIterations)  {  [CE]  <identifier>  expected  [FE]          MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  int  epsilon,  maxIterations)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  int  epsilon,  maxIterations)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean)  {  [CE]  possible  loss  of  precision  [FE]    MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
12	[BUG]  [BUGGY]  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  MAX_ITERATIONS)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	add	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  MAX_ITERATIONS)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	compilable	  [FE]  MathRuntimeException$4  	7	1	replace
13	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  MAX_ITERATIONS)  {  [FE]  MathRuntimeException$4  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  MAX_ITERATIONS)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  MAX_ITERATIONS)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	compilable	  [FE]  MathRuntimeException$4  	7	1	replace
14	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  p);  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  p);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN,  p);		non-compiled	[CE]  <identifier>  expected	8	None	add
15	[BUG]  [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN);  [CE]  <identifier>  expected  [FE]      MathRuntimeException$4  [CONTEXT]    [BUGGY]    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN);  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	    MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_IMPLEMENTED_POISSON_MEAN);		non-compiled	[CE]  <identifier>  expected	8	None	add
16	[BUG]  [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  maxIterations)  {  [CE]  <identifier>  expected  [FE]    MathRuntimeException$4  [CONTEXT]    [BUGGY]  public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  maxIterations)  {  [BUGGY]  if  (p  <=  0)  {  throw  MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,  p);  }  mean  =  p;  normal  =  new  NormalDistributionImpl(p,  FastMath.sqrt(p));  this.epsilon  =  epsilon;  this.maxIterations  =  maxIterations;  }  [CLASS]  PoissonDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  PoissonDistributionImpl(double,double,int)  double  p  double  epsilon  int  maxIterations  [VARIABLES]  boolean  NormalDistribution  normal  double  DEFAULT_EPSILON  epsilon  mean  p  int  DEFAULT_MAX_ITERATIONS  maxIterations  long  serialVersionUID  	projects/Math61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java	0.2886751345948129	92	92	1	replace	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  mean,  maxIterations)  {	public  PoissonDistributionImpl(double  p,  double  epsilon,  int  maxIterations)  {  	non-compiled	[CE]  <identifier>  expected	7	None	replace
