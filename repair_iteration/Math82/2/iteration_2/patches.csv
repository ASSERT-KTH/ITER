bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
2	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
3	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  i)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  i)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  i)  ==  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
4	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
5	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0),    0,    epsilon)>    0;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
6	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
7	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0  ||  i  >  DEFAULT_EPSILON);	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
10	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  <  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  <  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  <  DEFAULT_EPSILON);	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
11	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON);	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
12	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON);	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
13	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
14	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
15	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }	  ||!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
17	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  <  =  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  <  =  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)&&(i  <  =  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  epsilon));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
22	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  table));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  table));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(entry.getEntry(i,  table));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
23	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon  +  1));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon  +  1));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
28	[BUG]  [BUGGY]  return(i  ==  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
29	[BUG]  [BUGGY]  return(i  >=  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
30	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)||(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
31	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
32	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  table.getWidth()  -  i);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  table.getWidth()  -  i);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  table.getWidth()  -  i);	  return(i    >    0)||(i    <    =    table.getWidth()    -    i);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
33	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  table.getWidth()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  table.getWidth()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  table.getWidth()  -  1);	  return(i    >    0)||(i    <    =    table.getWidth()    -    i);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
34	[BUG]  [BUGGY]  return(i  >  0)||(i  <  table.getWidth()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)||(i  <  table.getWidth()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)||(i  <  table.getWidth()  -  1);	  return(i    >    0)||(i    <    =    table.getWidth()    -    i);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
35	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  0),  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  0),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  0),  DEFAULT_EPSILON,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
36	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
37	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i)-  1,  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i)-  1,  0,  epsilon)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i)-  1,  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i)-    1,    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
38	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)/  1,  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)/  1,  0,  epsilon)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)/  1,  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i)-    1,    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
39	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
40	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  table.getWidth());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  table.getWidth());  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  table.getWidth());	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
41	[BUG]  [BUGGY]  return(i  >=  0)&&(i  <  =  table.getWidth()  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  0)&&(i  <  =  table.getWidth()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  0)&&(i  <  =  table.getWidth()  -  1);	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
42	[BUG]  [BUGGY]  return(i  ==  0)&&(i  <  =  table.getWidth()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  0)&&(i  <  =  table.getWidth()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  0)&&(i  <  =  table.getWidth()  -  1);	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
43	[BUG]  [BUGGY]  return(i  <  0)&&(i  <  =  table.getWidth()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0)&&(i  <  =  table.getWidth()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0)&&(i  <  =  table.getWidth()  -  1);	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
44	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
45	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
46	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
47	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
48	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON)||(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
49	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)||(i  >  DEFAULT_EPSILON  ||  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON)||(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
50	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
51	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
52	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
53	[BUG]  [BUGGY]  return(i  >=  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
54	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
55	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
56	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
57	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
58	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
59	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
60	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
61	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
62	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  true;  }	  ||    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
64	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
65	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
66	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
68	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon  +  1);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
69	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  0,  epsilon);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  0,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
70	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio());	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
71	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
72	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  *  1);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
73	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
74	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
75	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
76	[BUG]  [BUGGY]  return(i  <  =  entry  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
77	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
78	[BUG]  [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0;	  return!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
79	[BUG]  [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	  return!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
80	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
81	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
82	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    =    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
83	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    =    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
84	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
85	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
87	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >=  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >=  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  >=  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON    ||    i    >=    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
88	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)&&(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
89	[BUG]  [BUGGY]  return(i  <  0)&&(i  >  0  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0)&&(i  >  0  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0)&&(i  >  0  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
90	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
91	[BUG]  [BUGGY]  return(i  ==  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    >=    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
92	[BUG]  [BUGGY]  return(i  >=  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  DEFAULT_EPSILON)||(i  >=  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    >=    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
93	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	  Double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
94	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON);	  Double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
95	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  +  1);	  Double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
96	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  false;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
97	[BUG]  [BUGGY]  return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
98	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
99	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
100	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
101	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
102	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >=  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >=  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >=  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
103	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  ||!MathUtils.compareTo(tableau.getEntry(i,  i)));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  ||!MathUtils.compareTo(tableau.getEntry(i,  i)));  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  ||!MathUtils.compareTo(tableau.getEntry(i,  i)));	  return(i    <    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
104	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  return(i  <  =  entry  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    entry    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
106	[BUG]  [BUGGY]  return(i  <  =  entry  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    entry    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
107	[BUG]  [BUGGY]  return(i  <  =  entry  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    entry    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
108	[BUG]  [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
109	[BUG]  [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  }	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
110	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  <  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  <  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  <  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  return(i  ==  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
112	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  true;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
113	[BUG]  [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  table.getWidth())&&(i  >  epsilon);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  table.getWidth())&&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
114	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  table.getWidth())||(i  >=  epsilon);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  table.getWidth())||(i  >=  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
115	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  table.getWidth())||(i  >  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  table.getWidth())||(i  >  0);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
116	[BUG]  [BUGGY]  return(i  <  table.getWidth())||(i  >  epsilon);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  table.getWidth())||(i  >  epsilon);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  table.getWidth())||(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
117	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
118	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  1;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  1;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
119	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  1;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  1;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
120	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
121	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
122	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
123	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  multiplier)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
124	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  multiplier)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
125	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
126	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  ||    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
127	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
128	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    DEFAULT_EPSILON)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
129	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0),  epsilon);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
130	[BUG]  [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
131	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
132	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
133	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  <  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio()  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
135	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0),    0,    DEFAULT_EPSILON)    <    0;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
136	[BUG]  [BUGGY]  return(i  <  0)||(i  >  0  &&  i  <  =  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0)||(i  >  0  &&  i  <  =  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0)||(i  >  0  &&  i  <  =  0);	  return(i    <    DEFAULT_EPSILON)||(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
137	[BUG]  [BUGGY]  return(i  <  0)&&(i  >  0  &&  i  <  =  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0)&&(i  >  0  &&  i  <  =  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0)&&(i  >  0  &&  i  <  =  0);	  return(i    <    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
138	[BUG]  [BUGGY]  return(i  <  =  entry  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    entry    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
139	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
140	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  DEFAULT_EPSILON,  rhs);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  DEFAULT_EPSILON,  rhs);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  DEFAULT_EPSILON,  rhs);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
141	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
142	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
143	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
144	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
145	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
146	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  table.getHeight()  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  table.getHeight()  -  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  table.getHeight()  -  1);	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
147	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
148	[BUG]  [BUGGY]  return(i  >=  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
149	[BUG]  [BUGGY]  return(i  <  =  0)||(i  ==  0  &&  i  <  =  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0)||(i  ==  0  &&  i  <  =  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0)||(i  ==  0  &&  i  <  =  0);	  return(i    <    =    DEFAULT_EPSILON)||(i    ==    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
150	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
151	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
152	[BUG]  [BUGGY]  return(i  <  =  0  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
153	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  0)||  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  0)||  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  >  0)||  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
154	[BUG]  [BUGGY]  return(i  <  =  1  &&  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  1  &&  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  1  &&  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
155	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  *  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  *  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon  *  1);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
156	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
157	[BUG]  [BUGGY]  return(i  <  0  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  0  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  0  ||  i  >  0)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;	  return(i    <    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
158	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  DEFAULT_EPSILON));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
159	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
160	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  ||!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
161	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
162	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
163	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  pivotVal);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  pivotVal);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  pivotVal);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
164	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  DEFAULT_EPSILON,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
165	[BUG]  [BUGGY]  return(i  <  =  0  &&  i  >  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  &&  i  >  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  &&  i  >  DEFAULT_EPSILON);	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
166	[BUG]  [BUGGY]  return(i  >=  0)&&(i  <  =  table.getWidth()  -  i);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  0)&&(i  <  =  table.getWidth()  -  i);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  0)&&(i  <  =  table.getWidth()  -  i);	  return(i    >    0)||(i    <    =    table.getWidth()    -    i);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
167	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  +  1);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON  +  1);	  return(i    <    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
168	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }	  ||!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
169	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  ==  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
170	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
171	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon  -  1);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
172	[BUG]  [BUGGY]  return(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
173	[BUG]  [BUGGY]  return(i  >=  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >=  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >=  0  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
174	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
175	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
176	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth());	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
177	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);	  Double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
178	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
179	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
180	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
181	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  epsilon);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  epsilon);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
182	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
183	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i)-    1,    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
184	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  epsilon)>  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  epsilon)>  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  epsilon)>  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i)-    1,    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
185	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  2)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  2)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  2)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
186	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)-1,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)-1,  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)-1,  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
187	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  table.getWidth())&&(i  >  epsilon);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  table.getWidth())&&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
188	[BUG]  [BUGGY]  return(i  ==  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  DEFAULT_EPSILON)&&(i  >  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
189	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >  0  &&  i  <  =  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON)&&(i  >  0  &&  i  <  =  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON)&&(i  >  0  &&  i  <  =  0);	  return(i    <    =    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
190	[BUG]  [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0;	  return!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
191	[BUG]  [BUGGY]  return(i  <  =  0)||(i  >=  0  &&  i  <  =  0);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0)||(i  >=  0  &&  i  <  =  0);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0)||(i  >=  0  &&  i  <  =  0);	  return(i    <    =    DEFAULT_EPSILON)||(i    >=    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
192	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    =    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
193	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    =    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
194	[BUG]  [BUGGY]  return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  ==  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  ==  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
195	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    1),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
196	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
197	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
198	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
199	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(2,  i),  0,  epsilon)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
200	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
201	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
202	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }	  if(MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
203	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)>    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
204	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
205	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON  +  1);	  int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon    +    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
206	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
207	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  >=  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
208	[BUG]  [BUGGY]  return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  0  ||  i  ==  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    0    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
209	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio())  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
210	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
211	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1,  epsilon));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1,  epsilon));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  1,  epsilon));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
212	[BUG]  [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  DEFAULT_EPSILON)&&(i  ==  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON);	  return(i    <    DEFAULT_EPSILON)&&(i    >    DEFAULT_EPSILON    &&    i    <    =    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
213	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  &&  i  <  =  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    DEFAULT_EPSILON    &&    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
214	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON));  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon),  DEFAULT_EPSILON));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
215	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon,  DEFAULT_EPSILON));  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon,  DEFAULT_EPSILON));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  0,  epsilon,  DEFAULT_EPSILON));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
216	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  DEFAULT_EPSILON)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    entry),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
217	[BUG]  [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  table.getWidth()  &&(i  >  epsilon);  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  table.getWidth()  &&(i  >  epsilon);	  return(i    <    =    table.getWidth())||(i    >    epsilon);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
218	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }	  ||!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
219	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  false;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  false;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  false;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
220	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
221	[BUG]  [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  1  ||  i  >  1)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;	  return(i    <    =    1    ||    i    >    1)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
222	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon)/  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon)/  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  epsilon)/  DEFAULT_EPSILON);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
223	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry)),  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry)),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry)),  DEFAULT_EPSILON,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
224	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON,  epsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  entry),  DEFAULT_EPSILON,  epsilon);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
225	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    =    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
226	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  =  table.getWidth());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  =  table.getWidth());  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  =  table.getWidth());	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
227	[BUG]  [BUGGY]  return(i  >  0)&&(i  <  table.getWidth();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  >  0)&&(i  <  table.getWidth();  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  >  0)&&(i  <  table.getWidth();	  return(i    >    0)&&(i    <    =    table.getWidth()    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
228	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  table.getRatio());	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
229	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  defsilon);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
230	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
231	[BUG]  [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defsilon);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	Double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defsilon);	  Double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
232	[BUG]  [BUGGY]  return(i  <  =  entry  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  entry  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  entry  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;	  return(i    <    =    entry    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
233	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(1,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
234	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defValue)  <  0;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defValue)  <  0;  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defValue)  <  0;	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
235	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)  <  =  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    <    =    0)    {    return    true;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
236	[BUG]  [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  }  [BUGGY]      }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	return(i  <  =  DEFAULT_EPSILON  ||  i  >  DEFAULT_EPSILON)&&  table.getEntry(i,  0,  epsilon)!=  0)  {  return  true;  }	  return(i    <    =    DEFAULT_EPSILON    ||    i    >    DEFAULT_EPSILON)&&    table.getEntry(i,    0,    epsilon)    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
237	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)+  1,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)+  1,  0,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	epsilon  =  MathUtils.compareTo(tableau.getEntry(i,  i)+  1,  0,  DEFAULT_EPSILON);	  epsilon    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
238	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i)-  1,  0,  DEFAULT_EPSILON)  <  0);	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
239	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	||  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  true;  }	  ||    MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
240	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {      [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON));  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.3333333333333333	152	152	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON));	  double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(i,    epsilon),    0,    epsilon));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
