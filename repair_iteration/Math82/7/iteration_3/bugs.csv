bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
3	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEmptyValue();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	28	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  table.getSize()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	28	None	replace
6	[BUG]  [BUGGY]  double  epsilon  =  this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  this.tableau.getEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  this.tableau.getEpsilon();	  int    epsilon    =    this.tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
8	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
9	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon(i  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getEpsilon(i  +  1);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getEpsilon(i  +  1);	  int    epsilon    =    tableau.getEpsilon(i);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
10	[BUG]  [BUGGY]  double  epsilon  =  tableau.getEpsilon(i);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  tableau.getEpsilon(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  tableau.getEpsilon(i);	  int    epsilon    =    tableau.getEpsilon(i);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
11	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getEpsilon(i);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  this.tableau.getEpsilon(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  this.tableau.getEpsilon(i);	  int    epsilon    =    tableau.getEpsilon(i);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getRowCount();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getRowCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getRowCount();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  table.getColumnCount();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getColumnCount();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getColumnCount();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  table.getRowCount()  -  1;  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getRowCount()  -  1;  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getRowCount()  -  1;  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  table.getHeight()  -  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getHeight()  -  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getHeight()  -  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getWidth()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getWidth()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getHeight();  i  <  table.getWidth()  -  1;  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
22	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0,  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0,  DEFAULT_EPSILON);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
23	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getArtificialVariables());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getArtificialVariables());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getArtificialVariables());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
24	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  3);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  3);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  3);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
25	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getEmptyValue();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getEmptyValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  this.tableau.getEmptyValue();	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getSimpleValue();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getSimpleValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  this.tableau.getSimpleValue();	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
28	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)treeau.clone();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)treeau.clone();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)treeau.clone();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
29	[BUG]  [BUGGY]  double  epsilon  =  TableUtils.getEpsilonValue(tableau);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  TableUtils.getEpsilonValue(tableau);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  TableUtils.getEpsilonValue(tableau);	  double    epsilon    =    TableUtils.getEpsilonIndex(tableau);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
30	[BUG]  [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON);	  double    epsilon    =    TableUtils.getEpsilonIndex(tableau);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
31	[BUG]  [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  true);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  true);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  true);	  double    epsilon    =    TableUtils.getEpsilonIndex(tableau);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getEntryHeight();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getEntryHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getEntryHeight();  i++)  {	  for(int    i    =    table.getEntryHeight();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  table.getEntryHeight();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0,  len  =  table.getEntryHeight();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0,  len  =  table.getEntryHeight();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getEntryHeight();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
34	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  table.getEpsilon()  +  1;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  table.getEpsilon()  +  1;	  double    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
35	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;	  double    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
36	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getEpsilonIndex()  +  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getEpsilonIndex()  +  1;	  int    epsilon    =    tableau.getEpsilonIndex();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
37	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getEpsilonIndex();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  this.tableau.getEpsilonIndex();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  this.tableau.getEpsilonIndex();	  int    epsilon    =    tableau.getEpsilonIndex();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
38	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getEpsilonIndex()  -  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getEpsilonIndex()  -  1;	  int    epsilon    =    tableau.getEpsilonIndex();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
39	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getEpsilonIndex();	  int    epsilon    =    tableau.getEpsilonIndex();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  table.getRowCount()  -  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getRowCount()  -  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getRowCount()  -  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  table.getColumnCount();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getColumnCount();  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getColumnCount();  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getRowCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
42	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariable();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariable();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariable();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObjective();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
43	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObjective();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getEntryCount()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getEntryCount()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getEntryCount()  -  1;  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
48	[BUG]  [BUGGY]  double  epsilon  =  tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  tableau.getOptionalEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  tableau.getOptionalEpsilon();	  int    epsilon    =    tableau.getOptionalEpsilon();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
49	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  this.tableau.getOptionalEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  this.tableau.getOptionalEpsilon();	  int    epsilon    =    tableau.getOptionalEpsilon();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
50	[BUG]  [BUGGY]  int  epsilon  =  table.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getOptionalEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getOptionalEpsilon();	  int    epsilon    =    tableau.getOptionalEpsilon();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
51	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  DEFAULT_EPSILON);	  SimplexTableau    epsilon    =    new    SimplexTableau(tableau.getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
52	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getEmptyValue());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getEmptyValue());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getEmptyValue());	  SimplexTableau    epsilon    =    new    SimplexTableau(tableau.getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
53	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue()  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue()  +  1);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue()  +  1);	  SimplexTableau    epsilon    =    new    SimplexTableau(tableau.getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
54	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getRatio());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getRatio());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getRatio());	  SimplexTableau    epsilon    =    new    SimplexTableau(tableau.getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
55	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon()  *  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  table.getEpsilon()  *  1;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  table.getEpsilon()  *  1;	  int    epsilon    =    table.getEpsilon()    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
57	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
58	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  2);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  2);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
62	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  +  1);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  +  1);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    index);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
63	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(this.tableau,  index);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(this.tableau,  index);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(this.tableau,  index);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    index);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
64	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getItemCount());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getItemCount());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  table.getItemCount());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    index);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
65	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  DEFAULT_EPSILON);	  SimplexTableau    epsilon    =    TableUtils.getOptimalValue(tableau);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
66	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getEmptyValue(tableau);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getEmptyValue(tableau);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  TableUtils.getEmptyValue(tableau);	  SimplexTableau    epsilon    =    TableUtils.getOptimalValue(tableau);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  true);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  true);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  true);	  SimplexTableau    epsilon    =    TableUtils.getOptimalValue(tableau);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    	non-compiled	[CE]  <identifier>  expected	40	None	replace
69	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
71	[BUG]  [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  TableUtils.getEpsilonIndex(tableau,  0);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    0);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getItemCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getWidth()    -    1;    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  tables.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth();  i  <  tables.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  tables.getWidth();  i++)  {	  for(int    i    =    table.getWidth()    -    1;    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
75	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();	  SimplexTableau    epsilon    =(Simpletableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	35	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	35	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	35	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	35	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryFunctions();  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  table.getEntryName();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryName();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryName();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
88	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getEmptyValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getEmptyValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getEmptyValue();	  SimplexTableau    epsilon    =    table.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
89	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getEpsilon();	  SimplexTableau    epsilon    =    table.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	3	None	replace
91	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
93	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getValue();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
94	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount()  -  1;  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getCount();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getCount();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getSize();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getSize();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getSize();  i++)  {	  for(int    i    =    table.getSize();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
98	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(0);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(0);	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEntry();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEntry();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
104	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBase());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBase());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBase());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
105	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getItemCount());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getItemCount());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getItemCount());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
106	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBaseValue());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBaseValue());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getBaseValue());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
107	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getSimpleArtificialVariables());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getSimpleArtificialVariables());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getSimpleArtificialVariables());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
108	[BUG]  [BUGGY]  int  i  =  table.getItemCount();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  table.getItemCount();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  table.getItemCount();	  int    i    =    tableau.getNumArtificialVariables();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
109	[BUG]  [BUGGY]  int  i  =  tableau.getItemCount();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  tableau.getItemCount();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  tableau.getItemCount();	  int    i    =    tableau.getNumArtificialVariables();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
110	[BUG]  [BUGGY]  int  i  =  tableau.getOptimalVariables();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  tableau.getOptimalVariables();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  tableau.getOptimalVariables();	  int    i    =    tableau.getNumArtificialVariables();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
111	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
112	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getWidth()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getWidth()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getWidth()  -  1;  i++)  {	  for(int    i    =    0;    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  e  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  e  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  e	  for(int    i    =    table.getWidth();    i    <    table.getHeight();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  eps  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  eps  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  eps	  for(int    i    =    table.getWidth();    i    <    table.getHeight();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth()  -  1;  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
118	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(0,  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getOptimalValue(0,  DEFAULT_EPSILON);	  SimplexTableau    epsilon    =    table.getOptimalValue(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
119	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  DEFAULT_EPSILON);	  SimplexTableau    epsilon    =    table.getOptimalValue(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
120	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  true);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  true);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  true);	  SimplexTableau    epsilon    =    table.getOptimalValue(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getWidth()    -    1;    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getNumArtificialVariables();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getNumArtificialVariables();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  table.getNumArtificialVariables();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  1;  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  1;  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryFunctions();  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryFunctions();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryFunctions();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  table.getNumEntryFunctions();  i  <  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumEntryFunctions();  i  <  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumEntryFunctions();  i  <  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getNumArtificialVariables();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getNumArtificialVariables();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getNumArtificialVariables();  i++)  {	  for(int    i    =    0;    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
129	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  this.tableau.getEpsilon()  +  1;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  this.tableau.getEpsilon()  +  1;	  int    epsilon    =    this.tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
130	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObjective();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
131	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObjective();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
132	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getEntry());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getEntry());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getEntry());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
133	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getRatio());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getRatio());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getRatio());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	3	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	3	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	35	None	replace
137	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  -  1);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index  -  1);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    index);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getEntryWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  table.getItemCount();  i  <  0;  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getItemCount();  i  <  0;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getItemCount();  i  <  0;  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  table.getEntryLength();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryLength();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryLength();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getNumEntryFunctions();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  table.getEntrySize();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntrySize();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntrySize();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getSize();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
143	[BUG]  [BUGGY]  int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  table.getItemCount();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
144	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  false);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  TableUtils.getOptimalValue(tableau,  false);	  SimplexTableau    epsilon    =    TableUtils.getOptimalValue(tableau);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
145	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();	  SimplexTableau    epsilon    =(Simpletableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {	  for(int    i    =    table.getEntryHeight();    i    <    table.getHeight();    i++)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
147	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  table);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  table);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  new  SimplexTableau(tableau.getOptimalValue(),  table);	  SimplexTableau    epsilon    =    new    SimplexTableau(tableau.getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
148	[BUG]  [BUGGY]  int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
149	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(this.tableau!=  null)?  this.tableau.getOptimalValue()  :  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(this.tableau!=  null)?  this.tableau.getOptimalValue()  :  DEFAULT_EPSILON;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(this.tableau!=  null)?  this.tableau.getOptimalValue()  :  DEFAULT_EPSILON;	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
150	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getOptimalValue(this.value);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getOptimalValue(this.value);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  this.tableau.getOptimalValue(this.value);	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  >=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  >=  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  >=  0)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getSize();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getSize();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getSize();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
153	[BUG]  [BUGGY]  int  i  =  tableau.getNumEntryVariables();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  tableau.getNumEntryVariables();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  tableau.getNumEntryVariables();	  int    i    =    tableau.getNumArtificialVariables();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
154	[BUG]  [BUGGY]  int  i  =  tableau.getOptionalVariables();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  i  =  tableau.getOptionalVariables();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  i  =  tableau.getOptionalVariables();	  int    i    =    tableau.getNumArtificialVariables();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  table.getEntrySize();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntrySize();  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntrySize();  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  table.getWidth();  i  <  0;  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth();  i  <  0;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth();  i  <  0;  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  table.getLeft();  i  <  table.getWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getLeft();  i  <  table.getWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getLeft();  i  <  table.getWidth();  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getItemCount()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  	  for(int    i    =    table.getItemCount();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getNumObjectiveFunctions();  i  <  table.getWidth()  -  1;  i++)  {  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  	  for(int    i    =    table.getWidth();    i    <    table.getHeight();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
160	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalPosition();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalPosition();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getOptimalPosition();	  SimplexTableau    epsilon    =    table.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
161	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariables();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariables();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariables();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
162	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  0);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  0);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
163	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  1);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  DEFAULT_EPSILON,  1);	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
164	[BUG]  [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau.getArtificialVariables());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  TableUtils.getEpsilonIndex(tableau.getArtificialVariables());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  TableUtils.getEpsilonIndex(tableau.getArtificialVariables());	  double    epsilon    =    TableUtils.getEpsilonIndex(tableau);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getSize();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  table.getSize();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  table.getSize();  i++)  {	  for(int    i    =    table.getEntryCount();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
166	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index)-  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index)-  1;  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau,  index)-  1;	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau,    index);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
167	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  1);  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  table.getOptimalValue(DEFAULT_EPSILON,  1);	  SimplexTableau    epsilon    =    table.getOptimalValue(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  =  table.getEntryCount();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  =  table.getEntryCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  =  table.getEntryCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  tables.size();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryCount();  i  <  tables.size();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryCount();  i  <  tables.size();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getEntryCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getItemWidth();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getItemWidth();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth();  i  <  table.getItemWidth();  i++)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getSize();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getSize();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth();  i  <  table.getSize();  i++)  {	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
173	[BUG]  [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getImplicitReturn());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getImplicitReturn());  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	int  epsilon  =  TableUtils.getEpsilonIndex(tableau.getImplicitReturn());	  int    epsilon    =    TableUtils.getEpsilonIndex(tableau.getArtificialVariables());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  0;  i  <  table.getItemCount();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	  for(int    i    =    table.getNumObjectiveFunctions();    i    <    table.getItemCount();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	41	None	replace
175	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalEpsilon();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getWidth()  -  1;  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getWidth()  -  1;  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {	  for(int    i    =    table.getWidth();    i    <    table.getHeight();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getEntryWidth()  -  1;  i  <  table.getWidth();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon	  for(int    i    =    table.getEntryWidth();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    	non-compiled	[CE]  <identifier>  expected	57	None	replace
179	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  this.tableau.getEpsilon();	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
180	[BUG]  [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getOptionalValue();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =  this.tableau.getOptionalValue();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =  this.tableau.getOptionalValue();	  SimplexTableau    epsilon    =    this.tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getNumArtificialVariables();  i++)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getNumArtificialVariables();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getHeight();  i  <  table.getNumArtificialVariables();  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getSize();  i++)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getSize();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getHeight();  i  <  table.getSize();  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getItemCount();  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getHeight();  i  <  table.getItemCount();  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getHeight();  i  <  table.getItemCount();  i++)  {	  for(int    i    =    table.getHeight();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
184	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariable();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariable();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalVariable();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObjective();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
185	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon(i);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  table.getEpsilon(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  table.getEpsilon(i);	  int    epsilon    =    tableau.getEpsilon(i);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getWidth()  -  1;  i++)  {	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
187	[BUG]  [BUGGY]  double  epsilon  =  table.getOptimalEpsilon();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  double  epsilon  =  table.getOptimalEpsilon();  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	double  epsilon  =  table.getOptimalEpsilon();	  double    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }      [BUGGY]  for(int  i  =  table.getSize();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false  [BUGGY]      for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	150	150	1	replace	for(int  i  =  table.getSize();  i  <  table.getHeight();  i++)  {  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false	  for(int    i    =    table.getSize();    i    <    table.getWidth();    i++)    {    if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false    	non-compiled	[CE]  <identifier>  expected	28	None	replace
