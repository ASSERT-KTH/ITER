bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
2	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
3	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
4	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  1;	  minRatio    =    ratio    +    1;    	compilable	  [FE]  AssertionError  	20	1	replace
6	[BUG]  [BUGGY]  minRatio  =  ratio  /  1;  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  1;	  minRatio    =    ratio    +    1;    	compilable	  [FE]  AssertionError  	20	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  +  2;	  minRatio    =    ratio    +    1;    	compilable	  [FE]  AssertionError  	20	2	replace
8	[BUG]  [BUGGY]  minRatio  =  ratio  +  2;  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  +  2;	  minRatio    =    ratio    +    1;    	compilable	  [FE]  AssertionError  	20	2	replace
9	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
10	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
11	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;	  	compilable	  [FE]  AssertionError  	9	1	add
13	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  minRatio  =  ratio  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    minRatio  =  ratio  -  1;	  	compilable	  [FE]  AssertionError  	9	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	9	1	add
15	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	9	1	add
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	9	14	add
17	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [FE]  NullPointerException  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  NullPointerException  	9	14	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
19	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatio)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	9	14	add
21	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [FE]  NullPointerException  [FE]            NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  -  1  <  minRatioPos)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  NullPointerException  	9	14	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	11	1	add
23	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.min(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	11	1	add
24	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  int  minRatio  =  Math.min(minRatio,  ratio);  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  int  minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio);    int  minRatio  =  Math.min(minRatio,  ratio);	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	11	None	add
25	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  [CE]  cannot  find  symbol  maxRatio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  maxRatio  =  Math.min(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio);    maxRatio  =  Math.min(minRatio,  ratio);	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	11	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	11	1	add
27	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio);    minRatio  =  Math.max(minRatio,  ratio);	  	compilable	  [FE]  AssertionError  	11	1	add
28	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	replace
29	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	replace
30	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	replace
31	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	replace
32	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	replace
33	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  1;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  1;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)>  1;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	replace
34	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
35	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  epsilon;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
36	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  ratio;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
37	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(rhs,  0,  epsilon)/  entry;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
38	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
39	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
40	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
41	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio  -  1);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	12	3	replace
42	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  -  1);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio  -  1);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	12	3	replace
43	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.min(minRatio,  ratio  +  1);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  UnboundedSolutionException  	12	1	replace
44	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  [FE]  UnboundedSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio  +  1);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minRatio,  ratio  +  1);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  UnboundedSolutionException  	12	1	replace
45	[BUG]  [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio);  [CE]  cannot  find  symbol  minimumRatio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minimumRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimumRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimumRatio	12	None	replace
46	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  Math.max(minRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	12	4	replace
47	[BUG]  [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.max(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.max(minRatio,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    	compilable	  [FE]  NoFeasibleSolutionException  	12	4	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	19	1	add
49	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;	  	compilable	  [FE]  AssertionError  	19	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	19	1	add
51	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	19	1	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
53	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
54	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	compilable	  [FE]  NoFeasibleSolutionException  	19	13	add
55	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [FE]  NoFeasibleSolutionException  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  }  else  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	compilable	  [FE]  NoFeasibleSolutionException  	19	13	add
56	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    minRatio  =  ratio  +  1;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
57	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	24	4	replace
58	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	24	4	replace
59	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
60	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	24	4	replace
61	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	24	4	replace
62	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
63	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
64	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
65	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
66	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  -=  i;	  minRatio    =    i;    	compilable	  [FE]  NoFeasibleSolutionException  	8	4	replace
67	[BUG]  [BUGGY]  minRatio  -=  i;  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  -=  i;	  minRatio    =    i;    	compilable	  [FE]  NoFeasibleSolutionException  	8	4	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon;  minRatio  =  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    epsilon;    minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	27	1	add
69	[BUG]  [BUGGY]  minRatio  =  epsilon;  minRatio  =  epsilon;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon;  minRatio  =  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon;    minRatio  =  epsilon;	  	compilable	  [FE]  AssertionError  	27	1	add
70	[BUG]  [BUGGY]  minRatio  =  epsilon;  int  minRatio  =  epsilon;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon;  int  minRatio  =  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon;    int  minRatio  =  epsilon;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	27	None	add
71	[BUG]  [BUGGY]  minRatio  =  epsilon;  epsilon  =  epsilon;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon;  epsilon  =  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon;    epsilon  =  epsilon;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	27	None	add
72	[BUG]  [BUGGY]  minRatio  =  epsilon;  maxRatio  =  epsilon;  [CE]  cannot  find  symbol  maxRatio  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon;  maxRatio  =  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    epsilon;    maxRatio  =  epsilon;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	27	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	13	1	add
74	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  /  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	13	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	13	1	add
76	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	13	1	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	13	1	add
78	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	13	1	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	13	1	add
80	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	13	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	13	1	add
82	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]            NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  ==  0)  {  minRatio  =  ratio  /  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	13	1	add
83	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
84	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
85	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
86	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	25	1	add
88	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  minRatio  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    minRatio  =  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	25	1	add
89	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  int  minRatio  =  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  int  minRatio  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    int  minRatio  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	add
90	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  maxRatio  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    maxRatio  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	25	None	add
91	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  rhs  =  DEFAULT_EPSILON;  [CE]  cannot  assign  a  value  to  final  variable  rhs  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  rhs  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    rhs  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rhs	25	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  2;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
93	[BUG]  [BUGGY]  minRatio  =  ratio  -  2;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  2;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  i  -  1;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
95	[BUG]  [BUGGY]  minRatio  =  i  -  1;  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  i  -  1;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i;    minRatio  =  i;	  	compilable	  [FE]  AssertionError  	7	1	add
97	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i;	  	compilable	  [FE]  AssertionError  	7	1	add
98	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
99	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
100	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)+  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
101	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  *  ratio;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  *  ratio;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i;  +=  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)  *  ratio;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
102	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  ratio);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	6	None	replace
103	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	6	None	replace
104	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  DEFAULT_EPSILON,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	6	None	replace
105	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	3	replace
106	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON  +  1;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	3	replace
107	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  *  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	6	replace
108	[BUG]  [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  *  DEFAULT_EPSILON;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	6	replace
109	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry.getValue();  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry.getValue();  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  DEFAULT_EPSILON  +  entry.getValue();	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
110	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue()  /  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  entry.doubleValue()  /  rhs.doubleValue();  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue()  /  rhs.doubleValue();	      double    ratio    =    rhs    /    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
111	[BUG]  [BUGGY]  double  ratio  =  entry  /  rhs.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  entry  /  rhs.doubleValue();  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry  /  rhs.doubleValue();	      double    ratio    =    rhs    /    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
112	[BUG]  [BUGGY]  double  ratio  =  entry  rhs  /  rhs.doubleValue();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  entry  rhs  /  rhs.doubleValue();  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry  rhs  /  rhs.doubleValue();	      double    ratio    =    rhs    /    entry.doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
113	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
114	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
115	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
116	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  ratio);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
117	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
118	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(minRatio,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
119	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
120	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
121	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  ratio)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  ratio)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  ratio)>  0;	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	22	None	replace
122	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	22	None	replace
123	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	22	None	replace
124	[BUG]  [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  cannot  find  symbol  value  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  value  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	value  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  find  symbol  value	22	None	replace
125	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  -=  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	26	4	replace
126	[BUG]  [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  -=  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	26	4	replace
127	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  0;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  0;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	26	7	replace
128	[BUG]  [BUGGY]  minRatio  =  0;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  0;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  0;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	26	7	replace
129	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  rhs);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	21	None	replace
130	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  ratio);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  ratio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  ratio);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	21	None	replace
131	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  minRatio);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  minRatio);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  minRatio);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	21	None	replace
132	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	21	7	replace
133	[BUG]  [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [FE]  NoFeasibleSolutionException  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  MathUtils.compareTo(entry,  0,  rhs);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	21	7	replace
134	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  /  2;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	4	replace
135	[BUG]  [BUGGY]  minRatio  =  ratio  /  2;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  2;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  2;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	14	4	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	26	1	replace
137	[BUG]  [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  DEFAULT_EPSILON;	  minRatio    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	26	1	replace
138	[BUG]  [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	19	1	add
140	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [FE]  AssertionError  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  minRatioPos  =  i;  }	  	compilable	  [FE]  AssertionError  	19	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
142	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
143	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	19	None	add
144	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	14	add
145	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  +  1  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	14	add
146	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  int  minRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    int  minRatio  =  ratio  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	13	None	add
147	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  maxRatio  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  maxRatio  =  ratio  /  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    maxRatio  =  ratio  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	13	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	13	1	add
149	[BUG]  [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  DEFAULT_EPSILON;  minRatio  =  ratio  *  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    /    DEFAULT_EPSILON;    minRatio  =  ratio  *  DEFAULT_EPSILON;	  	compilable	  [FE]  AssertionError  	13	1	add
150	[BUG]  [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minRatio,  ratio);  if(minRatio  =  Math.min(minRatio,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    Math.min(minRatio,    ratio);    if(minRatio  =  Math.min(minRatio,  ratio);	  	non-compiled	[CE]  ')'  expected	11	None	add
151	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  epsilon);  [CE]  cannot  find  symbol  value  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(value,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(value,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
152	[BUG]  [BUGGY]  minRatio  =  Math.min(minimum,  ratio);  [CE]  cannot  find  symbol  minimum  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(minimum,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(minimum,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  minimum	12	None	replace
153	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
154	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  -=  epsilon;	  minRatio    =    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	28	4	replace
155	[BUG]  [BUGGY]  minRatio  -=  epsilon;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  -=  epsilon;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  -=  epsilon;	  minRatio    =    epsilon;    	compilable	  [FE]  NoFeasibleSolutionException  	28	4	replace
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  epsilon  +  1;	  minRatio    =    epsilon;    	compilable	  [FE]  AssertionError  	28	5	replace
157	[BUG]  [BUGGY]  minRatio  =  epsilon  +  1;  [FE]  AssertionError  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  epsilon  +  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  epsilon  +  1;	  minRatio    =    epsilon;    	compilable	  [FE]  AssertionError  	28	5	replace
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  3;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio  =  ratio  -  3;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
159	[BUG]  [BUGGY]  minRatio  =  ratio  -  3;  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  3;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  -  3;	  minRatio    =    ratio    -    1;    	compilable	  [FE]  AssertionError  	10	5	replace
160	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(rhs,  0,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
161	[BUG]  [BUGGY]  double  ratio  =  entry.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  entry.doubleValue();  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  entry.doubleValue();	      double    ratio    =    rhs    /    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
162	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	21	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
164	[BUG]  [BUGGY]  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  epsilon)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    if(minRatio  <  epsilon)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
166	[BUG]  [BUGGY]  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  i)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    if(minRatio  <  i)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
168	[BUG]  [BUGGY]  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  0)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    if(minRatio  <  0)  {  minRatio  =  i;  }	  	compilable	  [FE]  AssertionError  	7	1	add
169	[BUG]  [BUGGY]  minRatio  =  i;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  if(minRatio  <  =  i)  {  minRatio  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    if(minRatio  <  =  i)  {  minRatio  =  i;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
170	[BUG]  [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [CE]  cannot  assign  a  value  to  final  variable  epsilon  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  epsilon  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	epsilon  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;	      epsilon    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  epsilon	22	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
172	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  >  0)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
173	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  int  minRatio  =  ratio  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    int  minRatio  =  ratio  -  1;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	9	None	add
174	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  maxRatio  =  ratio  -  1;  [CE]  cannot  find  symbol  maxRatio  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  maxRatio  =  ratio  -  1;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    maxRatio  =  ratio  -  1;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	9	None	add
175	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
176	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	25	None	add
177	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [CE]  incompatible  types  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatioPos  =  i;  }	  	non-compiled	[CE]  incompatible  types	25	None	add
178	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	25	None	add
179	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(minRatio  =  DEFAULT_EPSILON)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  minRatio  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
180	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
181	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	4	None	replace
182	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)>  0;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)>  0;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)>  0;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	15	None	replace
183	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
184	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [FE]  NoFeasibleSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	compilable	  [FE]  NoFeasibleSolutionException  	2	4	replace
185	[BUG]  [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  epsilon;	      double    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	replace
186	[BUG]  [BUGGY]  minRatio  =  ratio  /  entry.doubleValue;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  /  entry.doubleValue;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  ratio  /  entry.doubleValue;	  minRatio    =    ratio    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
187	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  entry.epsilon)/  DEFAULT_EPSILON;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	23	None	replace
188	[BUG]  [BUGGY]  minRatio  =  Math.min(MIN_EPSILON,  ratio);  [CE]  cannot  find  symbol  MIN_EPSILON  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  Math.min(MIN_EPSILON,  ratio);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio  =  Math.min(MIN_EPSILON,  ratio);	  minRatio    =    Math.min(minRatio,    ratio);    	non-compiled	[CE]  cannot  find  symbol  MIN_EPSILON	12	None	replace
189	[BUG]  [BUGGY]  minRatio  =  i;  int  minRatio  =  i;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  int  minRatio  =  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    int  minRatio  =  i;	  	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	7	None	add
190	[BUG]  [BUGGY]  minRatio  =  i;  maxRatio  =  i;  [CE]  cannot  find  symbol  maxRatio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  maxRatio  =  i;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    maxRatio  =  i;	  	non-compiled	[CE]  cannot  find  symbol  maxRatio	7	None	add
191	[BUG]  [BUGGY]  minRatio  =  i;  minRatio  =  i);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  i;  minRatio  =  i);  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    i;    minRatio  =  i);	  	non-compiled	[CE]  ';'  expected	7	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	25	1	add
193	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [FE]  AssertionError  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }	  	compilable	  [FE]  AssertionError  	25	1	add
194	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  int  minValue  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	25	1	add
196	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	25	1	add
197	[BUG]  [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  DEFAULT_EPSILON;  if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    DEFAULT_EPSILON;    if(MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  minRatio  =  DEFAULT_EPSILON;  }  else  {  final  double  minValue  =  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
198	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	add
199	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  return  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	9	None	add
200	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	9	6	add
201	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	9	6	add
202	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  else  {  final  double  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	9	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
204	[BUG]  [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [FE]  AssertionError  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  -  1;  if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    -    1;    if(  ratio  >  epsilon)  {  minRatio  =  ratio  -  1;  }	  	compilable	  [FE]  AssertionError  	9	1	add
205	[BUG]  [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
206	[BUG]  [BUGGY]  double  ratio  =  rhs  /  DEFAULT_EPSILON.doubleValue();  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  double  ratio  =  rhs  /  DEFAULT_EPSILON.doubleValue();  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	double  ratio  =  rhs  /  DEFAULT_EPSILON.doubleValue();	      double    ratio    =    rhs    /    entry.doubleValue();    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
207	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	1	add
208	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	1	add
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	add	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
210	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [FE]  AssertionError  [FE]      UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }	  	compilable	  [FE]  AssertionError  	19	1	add
211	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  final  double  minRatioPos  =  i;  }	  	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	19	None	add
212	[BUG]  [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [CE]  incompatible  types  [FE]          UnboundedSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  minRatio  =  ratio  +  1;  if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }  [BUGGY]    minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	minRatio    =    ratio    +    1;    if(  ratio  <  minRatio)  {  minRatio  =  ratio  +  1;  }  else  {  return  DEFAULT_EPSILON;  }	  	non-compiled	[CE]  incompatible  types	19	None	add
213	[BUG]  [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  ratio;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  ratio;  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	int  ratio  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON)/  ratio;	      int    ratio    =    MathUtils.compareTo(entry,    0,    epsilon)/    ratio;    	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	18	None	replace
214	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	6	None	replace
215	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	85	85	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
