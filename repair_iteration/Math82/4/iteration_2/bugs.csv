bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  entry);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(tableau,  entry);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  entry);	  return!isOptimalValue(tableau,    epsilon);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  epsilon,  pivotVal);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(tableau,  epsilon,  pivotVal);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  epsilon,  pivotVal);	  return!isOptimalValue(tableau,    epsilon);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  true);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue(i),  true);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  true);	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue(i));  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimumValue(getOptimalValue(i));  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue(i));	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue(i));  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(getOptimalValue(i));  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue(i));	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  ||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  ==  0)  {  return  false;  }	      if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  ||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	||  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }	      if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon))  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  =  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON);	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon);	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  table.getRatio());	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0;	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(1,  i),  0,  epsilon)  <  0;	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  multiplier)  <  0;	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue()  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue()  +  1);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue()  +  1);	  return!setOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  return!isOptimalValue(getOptimalValue());  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(getOptimalValue());  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(getOptimalValue());	  return!setOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  return!setOptimumValue(getOptimalValue());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimumValue(getOptimalValue());  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimumValue(getOptimalValue());	  return!setOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
30	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)>  0;	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	int  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  epsilon,  DEFAULT_EPSILON);	  return!isOptimalValue(tableau,    epsilon);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue(i),  epsilon);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  epsilon);	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0)  {  return  false;  }	      if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon  +  1);	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
39	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(),  epsilon);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue(),  epsilon);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(),  epsilon);	  return!setOptimalValue(getOptimalValue());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defsilon)  <  0;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defsilon)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	double  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  defsilon)  <  0;	      double    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(0,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0;	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon)    <    0;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return  MathUtils.compareTo(tableau.getEntry(i,  epsilon),  0,  epsilon)  <  0;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  0)  {  return  false;  }	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!isOptimalValue(tableau,  DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!isOptimalValue(tableau,  DEFAULT_EPSILON);	  return!isOptimalValue(tableau,    epsilon);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
47	[BUG]  [BUGGY]  char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);  [BUGGY]    return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	char  pivotVal  =  MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon);	      int    pivotVal    =    MathUtils.compareTo(tableau.getEntry(0,    i),    0,    epsilon);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())||(i  >  epsilon);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return(i  <  =  table.getWidth())||(i  >  epsilon);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())||(i  >  epsilon);	  return    false;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())>  epsilon;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return(i  <  =  table.getWidth())>  epsilon;  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())>  epsilon;	  return    false;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  return(i  <  =  table.getWidth())||(i  >  epsilon;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return(i  <  =  table.getWidth())||(i  >  epsilon;  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return(i  <  =  table.getWidth())||(i  >  epsilon;	  return    false;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table));  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue(i,  table));  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i,  table));	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }    [BUGGY]  return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2886751345948129	155	155	1	replace	return!setOptimalValue(getOptimalValue(i),  Table.DEFAULT_EPSILON);	  return!setOptimalValue(getOptimalValue(i));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
