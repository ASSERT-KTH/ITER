bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getInstance();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance();	      Integer    minValue    =    Tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON);	      Integer    minValue    =    Tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstanceUTC();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  Tableau.getInstanceUTC();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstanceUTC();	      Integer    minValue    =    Tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  Double  minValue  =  0;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Double  minValue  =  0;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  0;	  double    minValue    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  -  1;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  -  1;	  double    minValue    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON);	      Integer    minValue    =    getPivotColumn(tab);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(table);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn(table);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(table);	      Integer    minValue    =    getPivotColumn(tab);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON);	      Integer    minValue    =    getPivotColumn(tab);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  +  1;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  +  1;	  double    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON);	      Integer    minValue    =    getPivotColumn(tableau);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getPivotColumn();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  tableau.getPivotColumn();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getPivotColumn();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumValue();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getMinimumValue();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumValue();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  Integer  minValue  =  table.getSize();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getSize();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getSize();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivot();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getPivot();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivot();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  Integer  minValue  =  table.getColumnWidth();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getColumnWidth();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getColumnWidth();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON);	      Integer    minValue    =    Tableau.getInstance(tableau);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
21	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getInstance();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  tableau.getInstance();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getInstance();	      Integer    minValue    =    Tableau.getInstance(tableau);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getInstance(Tableau.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  tableau.getInstance(Tableau.DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getInstance(Tableau.DEFAULT_EPSILON);	      Integer    minValue    =    Tableau.getInstance(tableau);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_EPSILON;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  /  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  +  1;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  +  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  int  minValue  =  table.getHeight()  -  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getHeight()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getHeight()  -  1;	      int    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
27	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  *  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getWidth()  *  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  *  1;	      int    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
28	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  -  1;	      Integer    minValue    =    getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn()  +  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  +  1;	      Integer    minValue    =    getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON;	      Integer    minValue    =    getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMinimumValue()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  -  1;	      int    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMinimumValue()  +  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  +  1;	      int    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;	      int    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  int  minValue  =  table.getMask();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMask();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMask();	      int    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  int  minValue  =  table.getHeight();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getHeight();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getHeight();	      int    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  Integer  minValue  =  table.getWidth()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getWidth()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getWidth()  -  1;	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
37	[BUG]  [BUGGY]  Integer  minValue  =  table.getHeight();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getHeight();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getHeight();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  Integer  minValue  =  table.getWidth()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getWidth()  +  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getWidth()  +  1;	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
39	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON.doubleValue();	  double    minValue    =    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON);  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON);	      Integer    minValue    =    Tableau.getInstance(tableau);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumSize();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMinimumSize();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumSize();	      int    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
42	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getWidth()  +  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  +  1;	      int    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  /  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getWidth()  /  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  /  1;	      int    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjective();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
45	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjectiveFunctions();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjectiveFunctions();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getObjectiveFunctions();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN;	  double    minValue    =    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  int  minValue  =  table.getMaximumValue();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMaximumValue();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMaximumValue();	      int    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumSize();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  table.getMinimumSize();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumSize();	      Integer    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
51	[BUG]  [BUGGY]  double  minValue  =  table.getWidth();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  table.getWidth();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getWidth();	      int    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  double  minValue  =  table.getMinimumValue();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  table.getMinimumValue();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMinimumValue();	      int    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;  [CE]  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	13	None	replace
54	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  epsilon  =  table.getEpsilon();  [BUGGY]    Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  epsilon  =  table.getEpsilon();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn().doubleValue();	      Integer    minValue    =    getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)tableau.clone();  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(Simpletableau)tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumWidth()  -  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMinimumWidth()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumWidth()  -  1;	      int    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
58	[BUG]  [BUGGY]  int  minValue  =  table.getMask()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotColumn(SimplexTableau  tableau)  {    [BUGGY]  int  minValue  =  table.getMask()  -  1;  [BUGGY]    double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMask()  -  1;	      int    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
