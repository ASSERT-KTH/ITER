bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  minValue  =  table.getMask();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMask();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMask();	  Integer    minValue    =    table.getSize();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  Integer  minValue  =  table.getSize()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getSize()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getSize()  -  1;	  Integer    minValue    =    table.getSize();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
3	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivotColumn();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivotColumn();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivotColumn();	  Integer    minValue    =    tableau.getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivotColumn()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivotColumn()  -  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivotColumn()  -  1;	  Integer    minValue    =    tableau.getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivotColumn()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivotColumn()  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivotColumn()  +  1;	  Integer    minValue    =    tableau.getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumWidth();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumWidth();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumWidth();	  int    minValue    =    table.getMinimumWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
7	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumWidth()  *  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumWidth()  *  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumWidth()  *  1;	  int    minValue    =    table.getMinimumWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
8	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumWidth()  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumWidth()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumWidth()  /  1;	  int    minValue    =    table.getMinimumWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
9	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue()  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON.doubleValue()  +  1;	  double    minValue    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
10	[BUG]  [BUGGY]  double  minValue  =  tableau.doubleValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  tableau.doubleValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  tableau.doubleValue();	  double    minValue    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
11	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON.doubleValue()  -  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON.doubleValue()  -  1;	  double    minValue    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
12	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumSize()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumSize()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumSize()  -  1;	  int    minValue    =    table.getMinimumSize();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
13	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumSize()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumSize()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumSize()  +  1;	  int    minValue    =    table.getMinimumSize();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
14	[BUG]  [BUGGY]  Integer  minValue  =  table.getHeight()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getHeight()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getHeight()  -  1;	  Integer    minValue    =    table.getHeight();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
15	[BUG]  [BUGGY]  Integer  minValue  =  table.getHeight()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getHeight()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getHeight()  +  1;	  Integer    minValue    =    table.getHeight();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
16	[BUG]  [BUGGY]  int  minValue  =  table.getMask()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMask()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMask()  +  1;	  int    minValue    =    table.getMask();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
17	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);	  Integer    minValue    =    tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  0);	  Integer    minValue    =    tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  1);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  1);	  Integer    minValue    =    tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  1;	  Double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;  [CE]  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  0;	  Double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  Double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	  Double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_EPSILON  +  1;	  double    minValue    =    0?    DEFAULT_EPSILON    :    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_EPSILON  +  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
26	[BUG]  [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_EPSILON  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  /  DEFAULT_EPSILON  +  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
27	[BUG]  [BUGGY]  double  minValue  =  1  /  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  1  /  DEFAULT_EPSILON  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  1  /  DEFAULT_EPSILON  +  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
28	[BUG]  [BUGGY]  int  minValue  =  table.getHeight()  *  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getHeight()  *  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getHeight()  *  1;	  int    minValue    =    table.getWidth()    *    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
29	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  *  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getWidth()  *  2;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  *  2;	  int    minValue    =    table.getWidth()    *    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn().intValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn().intValue();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn().intValue();	  Integer    minValue    =    getPivotColumn()    -    1;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
31	[BUG]  [BUGGY]  double  minValue  =  table.getWidth()  -  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getWidth()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getWidth()  -  1;	  double    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
32	[BUG]  [BUGGY]  double  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;	  double    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
33	[BUG]  [BUGGY]  double  minValue  =  table.getSize();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getSize();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getSize();	  double    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
34	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(DEFAULT_EPSILON);	  Integer    minValue    =    tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
35	[BUG]  [BUGGY]  Integer  minValue  =  this.tableau.getInstance();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  this.tableau.getInstance();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  this.tableau.getInstance();	  Integer    minValue    =    tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
36	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tableau,  DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    getPivotColumn(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  0);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tableau,  0);	  Integer    minValue    =    getPivotColumn(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
38	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tableau,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tableau,  epsilon);	  Integer    minValue    =    getPivotColumn(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
39	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    getPivotColumn(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);	  Integer    minValue    =    getPivotColumn(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  0);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  0);	  Integer    minValue    =    getPivotColumn(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  table);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  table);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(Tableau.DEFAULT_EPSILON,  table);	  Integer    minValue    =    getPivotColumn(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  double  minValue  =  1?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  1?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  1?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  1;  [CE]  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  :  1;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    1;    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
46	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)charset.clone();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)charset.clone();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)charset.clone();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
47	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
48	[BUG]  [BUGGY]  Integer  minValue  =  table.getRowWidth();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getRowWidth();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getRowWidth();	  Integer    minValue    =    table.getColumnWidth();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
49	[BUG]  [BUGGY]  Integer  minValue  =  table.getColumnWidth()  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getColumnWidth()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getColumnWidth()  -  1;	  Integer    minValue    =    table.getColumnWidth();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
50	[BUG]  [BUGGY]  Integer  minValue  =  table.getColumnWidth()  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getColumnWidth()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getColumnWidth()  +  1;	  Integer    minValue    =    table.getColumnWidth();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
51	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumColumnWidth();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumColumnWidth();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumColumnWidth();	  Integer    minValue    =    table.getColumnWidth();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
52	[BUG]  [BUGGY]  Integer  minValue  =  table.getWidth()  /  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getWidth()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getWidth()  /  1;	  Integer    minValue    =    table.getWidth()    +    1;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
53	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(tableau,  DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    Tableau.getInstance(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(tableau,  0);	  Integer    minValue    =    Tableau.getInstance(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getInstance(DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    Tableau.getInstance(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
56	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  0,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(tableau,  0,  DEFAULT_EPSILON);	  Integer    minValue    =    Tableau.getInstance(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
57	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  /  2;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getWidth()  /  2;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  /  2;	  int    minValue    =    table.getWidth()    /    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
58	[BUG]  [BUGGY]  int  minValue  =  table.getHeight()  /  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getHeight()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getHeight()  /  1;	  int    minValue    =    table.getWidth()    /    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
59	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();	  SimplexTableau    epsilon    =(Simpletableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
60	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON;	  Double    minValue    =    0;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  Double  minValue  =  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  1;	  Double    minValue    =    0;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON.doubleValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON.doubleValue();	  Double    minValue    =    0;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getObjective();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getObjective();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getObjective();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
64	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(table,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(table,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(table,  DEFAULT_EPSILON);	  Integer    minValue    =    getPivotColumn(table);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
65	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivot()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivot()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivot()  -  1;	  Integer    minValue    =    table.getPivot();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
66	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivot()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivot()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivot()  +  1;	  Integer    minValue    =    table.getPivot();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
67	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  1;	  double    minValue    =    DEFAULT_EPSILON    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
68	[BUG]  [BUGGY]  double  minValue  =  epsilon  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon  -  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  -  1;	  double    minValue    =    DEFAULT_EPSILON    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
69	[BUG]  [BUGGY]  int  minValue  =  table.getMaximumValue()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMaximumValue()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMaximumValue()  -  1;	  int    minValue    =    table.getMaximumValue();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
70	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(0,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(0,  DEFAULT_EPSILON);	  Integer    minValue    =    tableau.getInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
71	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    tableau.getInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
72	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  0);	  Integer    minValue    =    tableau.getInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
73	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(DEFAULT_EPSILON,  DEFAULT_EPSILON);	  Integer    minValue    =    tableau.getInstance(DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
74	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveFunctions();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveFunctions();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveFunctions();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getObjectiveFunctions();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
75	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivotColumn();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivotColumn();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivotColumn();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getObjectiveFunctions();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
76	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEmpty();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEmpty();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEmpty();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEmpty();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
77	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  /  1;	  Integer    minValue    =    getPivotColumn()    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
78	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn().doubleValue()  +  1;	  Integer    minValue    =    getPivotColumn().doubleValue();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
79	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn().doubleValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    getPivotColumn().doubleValue();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
80	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn().doubleValue()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn().doubleValue()  -  1;	  Integer    minValue    =    getPivotColumn().doubleValue();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
81	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  *  1;	  double    minValue    =    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  double  minValue  =  epsilon  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  +  1;	  double    minValue    =    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumValue()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumValue()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumValue()  +  1;	  Integer    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
84	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumValue()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumValue()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumValue()  -  1;	  Integer    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
85	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;	  Integer    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumValue()  *  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  *  DEFAULT_EPSILON;	  int    minValue    =    table.getMinimumValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
87	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON  +  1;	  int    minValue    =    table.getMinimumValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
88	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  /  2;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumValue()  /  2;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  /  2;	  int    minValue    =    table.getMinimumValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
89	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    Tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
90	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  DEFAULT_EPSILON);	  Integer    minValue    =    Tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
91	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(Tableau.DEFAULT_EPSILON,  0);	  Integer    minValue    =    Tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON);	  Integer    minValue    =    Tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    getPivotColumn(tab,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  0);	  Integer    minValue    =    getPivotColumn(tab,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
95	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  1);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  1);	  Integer    minValue    =    getPivotColumn(tab,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
96	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  0,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  0,  DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  0,  DEFAULT_EPSILON);	  Integer    minValue    =    getPivotColumn(tab,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn()  *  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  *  DEFAULT_EPSILON;	  Integer    minValue    =    getPivotColumn()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
98	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  /  2;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn()  /  2;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  /  2;	  Integer    minValue    =    getPivotColumn()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
99	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  +  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn()  +  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  +  DEFAULT_EPSILON;	  Integer    minValue    =    getPivotColumn()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
100	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  &&  DEFAULT_EPSILON  :  0;  [CE]  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  &&  DEFAULT_EPSILON  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  &&  DEFAULT_EPSILON  :  0;	  double    minValue    =    DEFAULT_EPSILON    ||    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	53	None	replace
101	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  >  0;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  >  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  >  0;	  double    minValue    =    DEFAULT_EPSILON    ||    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
102	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  +  1  :  0;  [CE]  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  +  1  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON  +  1  :  0;	  double    minValue    =    DEFAULT_EPSILON    ||    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	53	None	replace
103	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  0;  [CE]  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  :  0;	  double    minValue    =    DEFAULT_EPSILON    ||    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	53	None	replace
104	[BUG]  [BUGGY]  double  minValue  =  epsilon  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  *  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON    *    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
105	[BUG]  [BUGGY]  int  minValue  =  table.getMask()  /  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMask()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMask()  /  1;	  int    minValue    =    table.getMask()    -    1;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
106	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  /  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumValue()  /  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  /  1;	  int    minValue    =    table.getMinimumValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
107	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  epsilon;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  epsilon;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  epsilon;	  double    minValue    =    epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
108	[BUG]  [BUGGY]  double  minValue  =  tableau.getPivot()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  tableau.getPivot()  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  tableau.getPivot()  /  DEFAULT_EPSILON;	  double    minValue    =    epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
109	[BUG]  [BUGGY]  int  minValue  =  table.getHeight()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getHeight()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getHeight()  +  1;	  int    minValue    =    table.getHeight()    -    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
110	[BUG]  [BUGGY]  double  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMinimumValue()  /  DEFAULT_EPSILON;	  double    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
111	[BUG]  [BUGGY]  double  minValue  =  table.getMinimumValue()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getMinimumValue()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMinimumValue()  +  1;	  double    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
112	[BUG]  [BUGGY]  double  minValue  =  table.getMinimumValue()  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getMinimumValue()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMinimumValue()  -  1;	  double    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
113	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumSize()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumSize()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumSize()  -  1;	  Integer    minValue    =    table.getMinimumSize();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
114	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumSize()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumSize()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumSize()  +  1;	  Integer    minValue    =    table.getMinimumSize();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
115	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstanceUTC();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstanceUTC();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstanceUTC();	  Integer    minValue    =    Tableau.getInstanceUTC();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
116	[BUG]  [BUGGY]  Integer  minValue  =  tableau.getInstanceUTC();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  tableau.getInstanceUTC();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  tableau.getInstanceUTC();	  Integer    minValue    =    Tableau.getInstanceUTC();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
117	[BUG]  [BUGGY]  Integer  minValue  =  table.getIntValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getIntValue();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getIntValue();	  Integer    minValue    =    table.getInstance();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
118	[BUG]  [BUGGY]  Integer  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  epsilon  =  table.getEpsilon();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  epsilon  =  table.getEpsilon();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
119	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  epsilon  =  table.getEpsilonIndex();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
120	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  epsilon  =  table.getEpsilon()  +  1;	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
121	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_COLUMN  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_COLUMN  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_COLUMN  /  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_COLUMN;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
122	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_COLUMN;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_COLUMN;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  *  DEFAULT_COLUMN;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_COLUMN;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
123	[BUG]  [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_COLUMN;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon  /  DEFAULT_COLUMN;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon  /  DEFAULT_COLUMN;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_COLUMN;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
124	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN  +  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_COLUMN  +  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_COLUMN;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
125	[BUG]  [BUGGY]  Integer  minValue  =  table.getInt();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInt();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInt();	  Integer    minValue    =    tableau.getInstance();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
126	[BUG]  [BUGGY]  Integer  minValue  =  table.getPivotColumn(DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getPivotColumn(DEFAULT_EPSILON);  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getPivotColumn(DEFAULT_EPSILON);	  Integer    minValue    =    tableau.getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
127	[BUG]  [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  Tableau.getInstance(tableau,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  Tableau.getInstance(tableau,  epsilon);	  Integer    minValue    =    Tableau.getInstance(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
128	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEmpty();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
129	[BUG]  [BUGGY]  Integer  minValue  =  table.getMaximumValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMaximumValue();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMaximumValue();	  Integer    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
130	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(table,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(table,  0);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(table,  0);	  Integer    minValue    =    getPivotColumn(table);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
131	[BUG]  [BUGGY]  double  minValue  =  table.doubleValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.doubleValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.doubleValue();	  double    minValue    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
132	[BUG]  [BUGGY]  double  minValue  =  epsilon.doubleValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  epsilon.doubleValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  epsilon.doubleValue();	  double    minValue    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
133	[BUG]  [BUGGY]  Integer  minValue  =  table.getSize()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getSize()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getSize()  +  1;	  Integer    minValue    =    table.getSize();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
134	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumColumns();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumColumns();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumColumns();	  Integer    minValue    =    table.getSize();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
135	[BUG]  [BUGGY]  double  minValue  =  table.getHeight();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getHeight();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getHeight();	  double    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
136	[BUG]  [BUGGY]  double  minValue  =  table.getMinimumSize();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getMinimumSize();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMinimumSize();	  double    minValue    =    table.getWidth();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
137	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivot();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivot();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getPivot();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
138	[BUG]  [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  -1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  -1);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getInstance(Tableau.DEFAULT_EPSILON,  -1);	  Integer    minValue    =    tableau.getInstance(Tableau.DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
139	[BUG]  [BUGGY]  double  minValue  =  table.getMaximumValue();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getMaximumValue();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getMaximumValue();	  double    minValue    =    table.getMinimumValue();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
140	[BUG]  [BUGGY]  Integer  minValue  =  getPositiveColumn();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPositiveColumn();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPositiveColumn();	  Integer    minValue    =    getPivotColumn()    -    1;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
141	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
142	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumValue()  +  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumValue()  +  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumValue()  +  DEFAULT_EPSILON;	  int    minValue    =    table.getMinimumValue()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
143	[BUG]  [BUGGY]  double  minValue  =  0  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0  *  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0  *  DEFAULT_EPSILON;	  double    minValue    =    DEFAULT_EPSILON    *    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
144	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  *  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  *  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON  *  1;	  double    minValue    =    DEFAULT_EPSILON    /    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
145	[BUG]  [BUGGY]  Integer  minValue  =  table.getIntValue(DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getIntValue(DEFAULT_EPSILON);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getIntValue(DEFAULT_EPSILON);	  Integer    minValue    =    table.getInstance();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
146	[BUG]  [BUGGY]  double  minValue  =  0  ||  DEFAULT_EPSILON  :  0;  [CE]  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0  ||  DEFAULT_EPSILON  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0  ||  DEFAULT_EPSILON  :  0;	  double    minValue    =    DEFAULT_EPSILON    ||    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	53	None	replace
147	[BUG]  [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0?  DEFAULT_EPSILON  :  1;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
148	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumWidth()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumWidth()  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumWidth()  +  1;	  int    minValue    =    table.getMinimumWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
149	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumColumnWidth();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumColumnWidth();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumColumnWidth();	  int    minValue    =    table.getHeight();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
150	[BUG]  [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_COLUMN;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_COLUMN;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_COLUMN;	  double    minValue    =    0?    DEFAULT_EPSILON    :    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
151	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyTable();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyTable();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyTable();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getObjectiveFunctions();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
152	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  0;  [CE]  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  0;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON  |  DEFAULT_EPSILON  :  0;	  Double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    0;    	non-compiled	[CE]  	3	None	replace
153	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON  +  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn()  /  DEFAULT_EPSILON  +  1;	  Integer    minValue    =    getPivotColumn()    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
154	[BUG]  [BUGGY]  double  minValue  =  tableau  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  tableau  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  tableau  /  DEFAULT_EPSILON;	  double    minValue    =    epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
155	[BUG]  [BUGGY]  double  minValue  =  1?  DEFAULT_EPSILON  :  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  1?  DEFAULT_EPSILON  :  1;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  1?  DEFAULT_EPSILON  :  1;	  double    minValue    =    DEFAULT_EPSILON?    DEFAULT_EPSILON    :    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
156	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinColumnWidth();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinColumnWidth();  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinColumnWidth();	  Integer    minValue    =    table.getColumnWidth();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
157	[BUG]  [BUGGY]  double  minValue  =  tableau.getMinValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  tableau.getMinValue()  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  tableau.getMinValue()  /  DEFAULT_EPSILON;	  double    minValue    =    epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
158	[BUG]  [BUGGY]  double  minValue  =  tableau.getMinimumValue()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  tableau.getMinimumValue()  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  tableau.getMinimumValue()  /  DEFAULT_EPSILON;	  double    minValue    =    epsilon    /    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
159	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  +  2;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  DEFAULT_EPSILON  +  2;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  +  2;	  double    minValue    =    DEFAULT_EPSILON    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
160	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getObject();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEmpty();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
161	[BUG]  [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_MINUS;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_MINUS;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0?  DEFAULT_EPSILON  :  DEFAULT_MINUS;	  double    minValue    =    0?    DEFAULT_EPSILON    :    DEFAULT_EPSILON;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
162	[BUG]  [BUGGY]  int  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getWidth()  /  DEFAULT_EPSILON;	  int    minValue    =    table.getWidth()    /    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
163	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  epsilon  =  table.getEpsilon();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  epsilon  =  table.getEpsilon();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
164	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumMask()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumMask()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumMask()  -  1;	  int    minValue    =    table.getMask()    -    1;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
165	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinValue();  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinValue();	  Integer    minValue    =    tableau.getPivotColumn();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
166	[BUG]  [BUGGY]  double  minValue  =  table.getHeight()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  double  minValue  =  table.getHeight()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  table.getHeight()  -  1;	  int    minValue    =    table.getHeight()    -    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
167	[BUG]  [BUGGY]  int  minValue  =  table.getMinimumVisibleWidth()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  int  minValue  =  table.getMinimumVisibleWidth()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	int  minValue  =  table.getMinimumVisibleWidth()  -  1;	  int    minValue    =    table.getMinimumWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
168	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tabau,  DEFAULT_EPSILON,  epsilon);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tabau,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tabau,  DEFAULT_EPSILON,  epsilon);	  Integer    minValue    =    getPivotColumn(tableau,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
169	[BUG]  [BUGGY]  Integer  minValue  =  table.getMinimumWidth()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getMinimumWidth()  -  1;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getMinimumWidth()  -  1;	  Integer    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
170	[BUG]  [BUGGY]  Integer  minValue  =  table.getWidth()  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  table.getWidth()  *  DEFAULT_EPSILON;  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  table.getWidth()  *  DEFAULT_EPSILON;	  Integer    minValue    =    table.getWidth()    -    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
171	[BUG]  [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]      Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	  Double    minValue    =    0;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
172	[BUG]  [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  epsilon);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotColumn(SimplexTableau  tableau)  {      [BUGGY]  Integer  minValue  =  getPivotColumn(tab,  epsilon);  [BUGGY]      double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	Integer  minValue  =  getPivotColumn(tab,  epsilon);	  Integer    minValue    =    getPivotColumn(tab,    DEFAULT_EPSILON);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
