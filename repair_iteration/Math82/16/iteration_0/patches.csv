bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]  double  minValue  =  DEFAULT_EPSILON;  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON;	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
2	[BUG]  [BUGGY]  double  minValue  =  1;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]  double  minValue  =  1;  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  1;	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
3	[BUG]  [BUGGY]  double  minValue  =  0L;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]  double  minValue  =  0L;  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  0L;	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	  	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
5	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn(tableau);  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  getPivotColumn(tableau);  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  getPivotColumn(tableau);		non-compiled	[CE]  <identifier>  expected	32	None	add
6	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn(tab);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  getPivotColumn(tab);  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  getPivotColumn(tab);		non-compiled	[CE]  <identifier>  expected	32	None	add
7	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  getPivotColumn();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  getPivotColumn();		non-compiled	[CE]  <identifier>  expected	32	None	add
8	[BUG]  [BUGGY]    Integer  minValue  =  Tableau.getInstance();  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  Tableau.getInstance();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  Tableau.getInstance();		non-compiled	[CE]  <identifier>  expected	32	None	add
9	[BUG]  [BUGGY]    int  minValue  =  table.getMinimumValue();  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    int  minValue  =  table.getMinimumValue();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    int  minValue  =  table.getMinimumValue();		non-compiled	[CE]  <identifier>  expected	32	None	add
10	[BUG]  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    SimplexTableau  epsilon  =(SimplexTableau)tableau.clone();		non-compiled	[CE]  <identifier>  expected	32	None	add
11	[BUG]  [BUGGY]    Integer  minValue  =  Tableau.getInstance(tableau);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  Tableau.getInstance(tableau);  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  Tableau.getInstance(tableau);		non-compiled	[CE]  <identifier>  expected	32	None	add
12	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]  double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON  /  DEFAULT_EPSILON;	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]  double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	double  minValue  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  0;	double  minValue  =  0;  	non-compiled	[CE]  <identifier>  expected	31	None	replace
14	[BUG]  [BUGGY]    int  minValue  =  table.getWidth();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    int  minValue  =  table.getWidth();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    int  minValue  =  table.getWidth();		non-compiled	[CE]  <identifier>  expected	32	None	add
15	[BUG]  [BUGGY]    int  minValue  =  table.getWidth()  -  1;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    int  minValue  =  table.getWidth()  -  1;  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    int  minValue  =  table.getWidth()  -  1;		non-compiled	[CE]  <identifier>  expected	32	None	add
16	[BUG]  [BUGGY]    Integer  minValue  =  table.getWidth();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  [BUGGY]    Integer  minValue  =  table.getWidth();  [BUGGY]  double  minValue  =  0;  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	59	59	1	replace	    Integer  minValue  =  table.getWidth();		non-compiled	[CE]  <identifier>  expected	32	None	add
