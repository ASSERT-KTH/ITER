bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	2	10	replace
2	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	2	10	replace
3	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  =  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)  <  =  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	2	8	replace
5	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [FE]  NoFeasibleSolutionException  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	2	8	replace
6	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	2	13	replace
7	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [FE]  UnboundedSolutionException  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	2	13	replace
8	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  DEFAULT_EPSILON.getEpsilon();	      int    epsilon    =    entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  int  epsilon  =  entry.getEpsilon()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entry.getEpsilon()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getEpsilon()  +  1;	      int    epsilon    =    entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  int  epsilon  =  entries.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entries.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entries.getEpsilon();	      int    epsilon    =    entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
11	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  col);	      Integer    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(rhs);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  getEpsilon(rhs);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(rhs);	      Integer    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);	      Integer    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  DEFAULT_EPSILON.getValue();	      final    double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  final  double  epsilon  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  epsilon  =  entry.getValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entry.getValue()  +  1;	      final    double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  final  double  epsilon  =  entries.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  epsilon  =  entries.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entries.getValue();	      final    double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
18	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)!=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if  (MathUtils.compareTo(entry,  0,  rhs)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
19	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  >>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if  (MathUtils.compareTo(entry,  0,  rhs)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
20	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
21	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.doubleValue();	      Integer    epsilon    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  Integer  epsilon  =  entry.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entry.doubleValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.doubleValue()  +  1;	      Integer    epsilon    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  Integer  epsilon  =  entries.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entries.doubleValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.doubleValue();	      Integer    epsilon    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.epsilon)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
25	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.value)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.epsilon)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
26	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.epsilon)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
27	[BUG]  [BUGGY]  final  double  rhs  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  rhs  =  entry.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  rhs  =  entry.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  final  double  rhs  =  table.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  rhs  =  table.getEntry(i,  col);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  table.getEntry(i,  col);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  Integer  rhs  =  entry.intValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  rhs  =  entry.intValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.intValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.intValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.intValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.intValue();	      Integer    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entry.intValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  +  1;	      Integer    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  Integer  epsilon  =  entries.intValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entries.intValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.intValue();	      Integer    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.getValue();	      Integer    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  Integer  epsilon  =  entries.getValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entries.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.getValue();	      Integer    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  Integer  epsilon  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entry.getValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.getValue()  +  1;	      Integer    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  DEFAULT_EPSILON.getValue();	      int    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  int  epsilon  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entry.getValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getValue()  +  1;	      int    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  double  epsilon  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  double  epsilon  =  entry.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.getValue();	      int    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(col,  entry);	      Integer    epsilon    =    getEpsilon(col);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
42	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
43	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
44	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
45	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.intValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.intValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  DEFAULT_EPSILON.intValue();	      int    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entry.intValue()  +  1;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  +  1;	      int    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  double  epsilon  =  entry.intValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  double  epsilon  =  entry.intValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.intValue();	      int    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  getEpsilon(rhs);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs);	      int    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  getEpsilon(entry,  col);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  col);	      int    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);	      int    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)>  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
52	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs.length)  >=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
53	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	5	None	replace
54	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	5	9	replace
55	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [FE]  NoFeasibleSolutionException  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	compilable	  [FE]  NoFeasibleSolutionException  	5	9	replace
56	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	12	replace
57	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [FE]  UnboundedSolutionException  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	12	replace
58	[BUG]  [BUGGY]  Integer  epsilon  =  table.getValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  table.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.getValue();	      Integer    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
60	[BUG]  [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  incomparable  types:  double  and  <null>  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }	      	non-compiled	[CE]  incomparable  types:  double  and  <null>	6	None	replace
61	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  minRatio  =  entry.doubleValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  minRatio  =  entry.doubleValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	      	non-compiled	[CE]  incomparable  types:  double  and  <null>	6	None	replace
63	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  table.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  table.getEpsilon();	      int    epsilon    =    entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
64	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;	      int    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  Integer  epsilon  =  defULT_EPSILON.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  defULT_EPSILON.doubleValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  defULT_EPSILON.doubleValue();	      Integer    epsilon    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
67	[BUG]  [BUGGY]  int  epsilon  =  table.getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  table.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  table.getValue();	      int    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  int  epsilon  =  entries.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  entries.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entries.getValue();	      int    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  +  DEFAULT_EPSILON;	      Integer    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  Integer  epsilon  =  table.intValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  table.intValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.intValue();	      Integer    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry);  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs,  entry);	      int    epsilon    =    getEpsilon(entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
72	[BUG]  [BUGGY]  final  double  epsilon  =  table.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  final  double  epsilon  =  table.getValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  table.getValue();	      final    double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	6	None	replace
74	[BUG]  [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	6	None	replace
75	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }	      	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	6	None	replace
77	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  <  0)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  <  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
78	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)!=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)!=  0)  {  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
79	[BUG]  [BUGGY]  Integer  epsilon  =  input.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  Integer  epsilon  =  input.doubleValue();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  input.doubleValue();	      Integer    epsilon    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  int  epsilon  =  this.entry.getEpsilon();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);    [BUGGY]  int  epsilon  =  this.entry.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  this.entry.getEpsilon();	      int    epsilon    =    entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
