bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  epsilon  =  table.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  table.getValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  table.getValue()  +  1;	  final    double    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
2	[BUG]  [BUGGY]  final  double  epsilon  =  table.getEpsilon();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  table.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  table.getEpsilon();	  final    double    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
3	[BUG]  [BUGGY]  Integer  epsilon  =  entries.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.intValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.intValue()  +  1;	  Integer    epsilon    =    entries.intValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
4	[BUG]  [BUGGY]  Integer  epsilon  =  entries.size();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.size();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.size();	  Integer    epsilon    =    entries.intValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
5	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  getEpsilon(rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  getEpsilon(rhs);	  int    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
6	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry.getValue());  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry.getValue());	  int    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
7	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(col,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(col,  entry);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(col,  entry);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
8	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(rhs,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs,  col);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
9	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  rhs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  col,  rhs);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
10	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  minValue);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  minValue);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  col,  minValue);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
11	[BUG]  [BUGGY]  Integer  epsilon  =  entry.doubleValue()  *  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.doubleValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.doubleValue()  *  1;	  Integer    epsilon    =    entry.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
12	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  entry);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(rhs,  entry);	  Integer    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry.getValue());  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry.getValue());	  Integer    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(entry!=  null)  {  [CE]  incomparable  types:  double  and  <null>  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	41	None	replace
15	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(entry!=  DEFAULT_EPSILON)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  OptimizationException  	41	6	replace
16	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  [FE]  OptimizationException  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  OptimizationException  	41	6	replace
17	[BUG]  [BUGGY]  double  epsilon  =  entries.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entries.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entries.getValue();	  int    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
18	[BUG]  [BUGGY]  int  epsilon  =  entries.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entries.getValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entries.getValue()  +  1;	  int    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
19	[BUG]  [BUGGY]  final  double  epsilon  =  entries.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entries.getValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entries.getValue()  +  1;	  final    double    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  final  double  epsilon  =  entries.getValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entries.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entries.getValue()  /  DEFAULT_EPSILON;	  final    double    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  double  epsilon  =  entry.doubleValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entry.doubleValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.doubleValue();	  double    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
22	[BUG]  [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.intValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.intValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  DEFAULT_EPSILON.intValue();	  double    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
23	[BUG]  [BUGGY]  double  epsilon  =  entry.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entry.intValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.intValue()  +  1;	  double    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
24	[BUG]  [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.doubleValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  DEFAULT_EPSILON.doubleValue();	  double    epsilon    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
25	[BUG]  [BUGGY]  final  double  rhs  =  table.getEntry(i,  col  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  table.getEntry(i,  col  +  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  table.getEntry(i,  col  +  1);	  final    double    rhs    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
26	[BUG]  [BUGGY]  final  double  rhs  =  table.getEntry(i,  col  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  table.getEntry(i,  col  -  1);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  table.getEntry(i,  col  -  1);	  final    double    rhs    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
27	[BUG]  [BUGGY]  final  double  rhs  =  entry.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getEntry(i,  col);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getEntry(i,  col);	  final    double    rhs    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
28	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)!=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.value)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.value)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
29	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  ==  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.value)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.value)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
30	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  <  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.value)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.value)  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.value)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
31	[BUG]  [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
32	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  rhs)  ==  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
33	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
34	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
35	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    MAX_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
36	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    MAX_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
37	[BUG]  [BUGGY]  final  int  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  int  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  int  minValue  =  DEFAULT_EPSILON;  if(minValue  >  MAX_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    MAX_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
38	[BUG]  [BUGGY]  if(!MathUtils.compareTo(entry,  0,  col)>  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(!MathUtils.compareTo(entry,  0,  col)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(!MathUtils.compareTo(entry,  0,  col)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    ==    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	20	None	replace
39	[BUG]  [BUGGY]  if(!MathUtils.compareTo(entry,  0,  col)  <  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(!MathUtils.compareTo(entry,  0,  col)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(!MathUtils.compareTo(entry,  0,  col)  <  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    ==    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	20	None	replace
40	[BUG]  [BUGGY]  if(!MathUtils.compareTo(entry,  0,  rhs))  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(!MathUtils.compareTo(entry,  0,  rhs))  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(!MathUtils.compareTo(entry,  0,  rhs))  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    ==    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	20	None	replace
41	[BUG]  [BUGGY]  if(!MathUtils.compareTo(rhs,  0,  entry))  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(!MathUtils.compareTo(rhs,  0,  entry))  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(!MathUtils.compareTo(rhs,  0,  entry))  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    ==    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	20	None	replace
42	[BUG]  [BUGGY]  Integer  epsilon  =  entry.longValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.longValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.longValue();	  Integer    epsilon    =    table.intValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
43	[BUG]  [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
44	[BUG]  [BUGGY]  if(entry!=  null)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
45	[BUG]  [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
46	[BUG]  [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  DEFAULT_EPSILON.doubleValue();	  Integer    epsilon    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  Integer  epsilon  =  entries.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.getValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.getValue()  +  1;	  Integer    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
48	[BUG]  [BUGGY]  Integer  epsilon  =  entries.getValue(i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.getValue(i);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.getValue(i);	  Integer    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)!=    0)    {    	compilable	  [FE]  AssertionError  	18	5	replace
50	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  col)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)!=    0)    {    	compilable	  [FE]  AssertionError  	18	5	replace
51	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
52	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
53	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  ';'  expected  [FE]        UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    If  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
54	[BUG]  [BUGGY]  double  epsilon  =  this.entry.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  this.entry.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  this.entry.getEpsilon();	  int    epsilon    =    this.entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
55	[BUG]  [BUGGY]  int  epsilon  =  this.entry.getEpsilon()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  this.entry.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  this.entry.getEpsilon()  +  1;	  int    epsilon    =    this.entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
56	[BUG]  [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)!=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(rhs,  0,  entry.length)!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
57	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)!=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs.length)!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
58	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;	  Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
59	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  minRatio  =  entry.doubleValue()  +  1;	  Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
60	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  minRatio  =  entry.doubleValue()  -  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  minRatio  =  entry.doubleValue()  -  1;	  Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
61	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry    ==    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
62	[BUG]  [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  ==  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry    ==    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	74	None	replace
63	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.getValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getValue()  +  1;	  Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  col;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.getValue()  *  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getValue()  *  col;	  Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
65	[BUG]  [BUGGY]  Integer  rhs  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.getKey();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getKey();	  Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
66	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;	  int    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
67	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;	  int    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
68	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  +  col;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  +  col;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  +  col;	  int    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
69	[BUG]  [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.intValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.intValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  DEFAULT_EPSILON.intValue();	  int    epsilon    =    DEFAULT_EPSILON.intValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
70	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry.length)  >=  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
71	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.epsilon)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.epsilon)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry.epsilon)  >=  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
72	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.intValue)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry.intValue)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry.intValue)  >=  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
73	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	53	None	replace
74	[BUG]  [BUGGY]  Integer  epsilon  =  entries.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.doubleValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.doubleValue()  +  1;	  Integer    epsilon    =    entries.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
75	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  col)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  col)  <  =  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  col)  <  =  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
76	[BUG]  [BUGGY]  double  epsilon  =  entries.getEpsilon();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entries.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entries.getEpsilon();	  int    epsilon    =    entries.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  int  epsilon  =  entries.getEpsilon()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entries.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entries.getEpsilon()  +  1;	  int    epsilon    =    entries.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  col)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  col)>  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	9	replace
79	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  col)>  0)  {  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  col)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  col)>  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	9	replace
80	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    <    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
81	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [CE]  ';'  expected  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)    <    0)    {    If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
82	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  *  1;	  int    epsilon    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
83	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	55	None	replace
84	[BUG]  [BUGGY]  int  epsilon  =  entry.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.getValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getValue()  *  1;	  int    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
85	[BUG]  [BUGGY]  double  epsilon  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entry.getValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.getValue()  +  1;	  int    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
86	[BUG]  [BUGGY]  if(!MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(!MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(!MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	57	None	replace
87	[BUG]  [BUGGY]  Integer  rhs  =  entry.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.intValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.intValue()  +  1;	  Integer    rhs    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
88	[BUG]  [BUGGY]  Integer  rhs  =  entry.intValue()  *  col;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.intValue()  *  col;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.intValue()  *  col;	  Integer    rhs    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
89	[BUG]  [BUGGY]  Integer  rhs  =  entry.doubleValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.doubleValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.doubleValue();	  Integer    rhs    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
90	[BUG]  [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)>  0)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(rhs,  0,  entry.length)>  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
91	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)>  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs.length)>  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
92	[BUG]  [BUGGY]  if(EntryUtils.compareTo(entry,  0,  entry.length)>  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(EntryUtils.compareTo(entry,  0,  entry.length)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(EntryUtils.compareTo(entry,  0,  entry.length)>  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
93	[BUG]  [BUGGY]  int  epsilon  =  entry.getEpsilon()  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.getEpsilon()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getEpsilon()  *  1;	  int    epsilon    =    entry.getEpsilon()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  double  epsilon  =  entry.getEpsilon()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entry.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.getEpsilon()  +  1;	  int    epsilon    =    entry.getEpsilon()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
95	[BUG]  [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [CE]  incomparable  types:  double  and  <null>  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	76	None	replace
96	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  ';'  expected	76	None	replace
97	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  final  int  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  int  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  int  epsilon  =  DEFAULT_EPSILON.getValue();	  final    double    epsilon    =    DEFAULT_EPSILON.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
99	[BUG]  [BUGGY]  Integer  epsilon  =  entry.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.getValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.getValue()  *  1;	  Integer    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
100	[BUG]  [BUGGY]  Integer  epsilon  =  entry.getValue()  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.getValue()  +  2;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.getValue()  +  2;	  Integer    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
101	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(rhs,  col);	  Integer    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
102	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col,  minValue);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col,  minValue);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  col,  minValue);	  Integer    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
103	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(i,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(i,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(i,  col);	  Integer    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
104	[BUG]  [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	73	None	replace
105	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	73	None	replace
106	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  col)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    col)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
107	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  col)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  col)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    col)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
108	[BUG]  [BUGGY]  Integer  epsilon  =  table.getValue(entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  table.getValue(entry);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.getValue(entry);	  Integer    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
109	[BUG]  [BUGGY]  double  epsilon  =  table.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  table.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  table.getValue();	  int    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
110	[BUG]  [BUGGY]  float  epsilon  =  table.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  table.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  table.getValue();	  int    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
111	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [CE]  illegal  start  of  expression  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
112	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  if  (MathUtils.compareTo(rhs,  0,  rhs)>  0)  {  [CE]  illegal  start  of  expression  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  if  (MathUtils.compareTo(rhs,  0,  rhs)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    if  (MathUtils.compareTo(rhs,  0,  rhs)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
113	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [CE]  ';'  expected  [FE]        UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    If  (MathUtils.compareTo(entry,  0,  rhs)>  0)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
114	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  ==  0)  {  [CE]  double  cannot  be  dereferenced  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.length)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
115	[BUG]  [BUGGY]  if  (entry.compareTo(rhs,  0,  rhs)  ==  0)  {  [CE]  double  cannot  be  dereferenced  [FE]      UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (entry.compareTo(rhs,  0,  rhs)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (entry.compareTo(rhs,  0,  rhs)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
116	[BUG]  [BUGGY]  double  epsilon  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  entry.getValue()  *  DEFAULT_EPSILON;	  double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
117	[BUG]  [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  DEFAULT_EPSILON.getValue();	  double    epsilon    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
118	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  <  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.length)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.length)  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	26	None	replace
119	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);	  int    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
120	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(col,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(col,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(col,  DEFAULT_EPSILON);	  Integer    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)!=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
122	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)!=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
123	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)!=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
124	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)!=    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
125	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  table.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  table.getEpsilon();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
126	[BUG]  [BUGGY]  Integer  epsilon  =  table.getEpsilon();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  table.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.getEpsilon();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
127	[BUG]  [BUGGY]  float  epsilon  =  table.getEpsilon();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  table.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  table.getEpsilon();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
128	[BUG]  [BUGGY]  Integer  epsilon  =  defULT_EPSILON.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  defULT_EPSILON.doubleValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  defULT_EPSILON.doubleValue()  +  1;	  Integer    epsilon    =    defULT_EPSILON.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
129	[BUG]  [BUGGY]  char  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  char  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	char  epsilon  =  DEFAULT_EPSILON.getValue();	  int    epsilon    =    DEFAULT_EPSILON.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
130	[BUG]  [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  DEFAULT_EPSILON.getValue();	  int    epsilon    =    DEFAULT_EPSILON.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
131	[BUG]  [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    <    =    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
132	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    <    =    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
133	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  <  =  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    <    =    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
134	[BUG]  [BUGGY]  final  double  epsilon  =  entry.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entry.getValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entry.getValue()  *  1;	  final    double    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
135	[BUG]  [BUGGY]  final  double  epsilon  =  entry.getValue()  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entry.getValue()  +  2;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entry.getValue()  +  2;	  final    double    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  DEFAULT_EPSILON.getEpsilon();	  int    epsilon    =    DEFAULT_EPSILON.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
137	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.getEpsilon();	  int    epsilon    =    DEFAULT_EPSILON.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  DEFAULT_EPSILON.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  DEFAULT_EPSILON.getEpsilon();	  int    epsilon    =    DEFAULT_EPSILON.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)  <  0)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs.length)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs.length)  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	77	None	replace
140	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  <  =  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)  <  =  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
141	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry,  minValue);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry,  minValue);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(col,  entry,  minValue);	  Integer    epsilon    =    getEpsilon(col,    entry);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
142	[BUG]  [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)  >>  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(rhs,  0,  entry.length)  >>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(rhs,  0,  entry.length)  >>  0)  {	  if(MathUtils.compareTo(entry,    0,    rhs.length)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
143	[BUG]  [BUGGY]  final  double  rhs  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getValue()  +  1;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getValue()  +  1;	  final    double    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
144	[BUG]  [BUGGY]  final  double  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getValue()  /  DEFAULT_EPSILON;	  final    double    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
145	[BUG]  [BUGGY]  final  double  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;	  final    double    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
147	[BUG]  [BUGGY]  if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
148	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.intValue()  *  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  *  1;	  Integer    epsilon    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
149	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.intValue()  +  2;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  +  2;	  Integer    epsilon    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
150	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
151	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
152	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)!=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.minValue)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.minValue)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
153	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  ==  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.minValue)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.minValue)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
154	[BUG]  [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs.minValue)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(entry,  0,  rhs.minValue)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(entry,  0,  rhs.minValue)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.minValue)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
155	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  *  DEFAULT_EPSILON;	  Integer    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
156	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  /  DEFAULT_EPSILON;	  Integer    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
157	[BUG]  [BUGGY]  Integer  epsilon  =  entry.intValue()  +  col;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.intValue()  +  col;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.intValue()  +  col;	  Integer    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
158	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  rhs);	  int    epsilon    =    getEpsilon(rhs,    entry);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
159	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;	  Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
160	[BUG]  [BUGGY]  Integer  rhs  =  entry.getRowValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.getRowValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.getRowValue();	  Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
161	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  +  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  +  3;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  +  3;	  int    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
162	[BUG]  [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(rhs,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
163	[BUG]  [BUGGY]  if(entry!=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
164	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  col  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  col  +  1);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  col  +  1);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
165	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(entry,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  getEpsilon(entry,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  getEpsilon(entry,  col);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
166	[BUG]  [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
167	[BUG]  [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
168	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(MathUtils.compareTo(entry,  0,  rhs)!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	78	12	replace
169	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)!=  0)  {  [FE]  UnboundedSolutionException  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	78	12	replace
170	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs,  entry,  DEFAULT_EPSILON);	  int    epsilon    =    getEpsilon(rhs,    entry);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
171	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry,  minValue);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(rhs,  entry,  minValue);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(rhs,  entry,  minValue);	  int    epsilon    =    getEpsilon(rhs,    entry);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
172	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	73	None	replace
173	[BUG]  [BUGGY]  final  double  epsilon  =  entries.getValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entries.getValue()  *  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entries.getValue()  *  DEFAULT_EPSILON;	  final    double    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
174	[BUG]  [BUGGY]  int  epsilon  =  entry.getEpsilon()  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.getEpsilon()  /  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getEpsilon()  /  1;	  int    epsilon    =    entry.getEpsilon()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  int  epsilon  =  entry.intValue()  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.intValue()  +  2;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.intValue()  +  2;	  int    epsilon    =    entry.intValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
176	[BUG]  [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
177	[BUG]  [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
178	[BUG]  [BUGGY]  int  epsilon  =  entry.getValue()  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entry.getValue()  /  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entry.getValue()  /  1;	  int    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
179	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  entry)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  entry)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  entry)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    col)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
180	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.maxValue)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry.maxValue)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry.maxValue)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.minValue)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
181	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  0,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  0,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  0,  col);	  int    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
182	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  rhs)  <  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
183	[BUG]  [BUGGY]  final  double  rhs  =  entry.getRowValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getRowValue();  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getRowValue();	  final    double    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
185	[BUG]  [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  >=  0)  {  if(MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
186	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	compilable	  [FE]  UnboundedSolutionException  	77	13	replace
187	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  [FE]  UnboundedSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  rhs)  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	compilable	  [FE]  UnboundedSolutionException  	77	13	replace
188	[BUG]  [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  ==  DEFAULT_EPSILON)  {  final  double  minRatio  =  DEFAULT_EPSILON;  if(minRatio  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry    ==    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	74	None	replace
189	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry    ==    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
190	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
191	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.doubleValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.doubleValue()  +  1;	  Integer    epsilon    =    DEFAULT_EPSILON.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
192	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  table.getEpsilon()  +  1;	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
193	[BUG]  [BUGGY]  int  epsilon  =  entries.getEpsilon()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  entries.getEpsilon()  -  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  entries.getEpsilon()  -  1;	  int    epsilon    =    entries.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
194	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  rhs)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  rhs)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  <  rhs)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    <    =    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
195	[BUG]  [BUGGY]  Integer  epsilon  =  table.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  table.intValue()  +  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.intValue()  +  1;	  Integer    epsilon    =    table.intValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
196	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry.intValue);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry.intValue);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(col,  entry.intValue);	  Integer    epsilon    =    getEpsilon(col,    entry);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
197	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(rhs,  DEFAULT_EPSILON);	  Integer    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
198	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  0,  col);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  0,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  0,  col);	  Integer    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
199	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  rhs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  rhs);	  Integer    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
200	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry)  ==  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	53	None	replace
201	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	53	None	replace
202	[BUG]  [BUGGY]  Integer  epsilon  =  entry.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entry.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entry.getEpsilon();	  int    epsilon    =    DEFAULT_EPSILON.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
203	[BUG]  [BUGGY]  Integer  epsilon  =  entries[i].getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries[i].getValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries[i].getValue();	  Integer    epsilon    =    DEFAULT_EPSILON.getValue();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
204	[BUG]  [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.intValue()  +  entry;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  DEFAULT_EPSILON.intValue()  +  entry;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  DEFAULT_EPSILON.intValue()  +  entry;	  Integer    epsilon    =    entry.intValue()    +    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
205	[BUG]  [BUGGY]  Integer  epsilon  =  this.entry.getEpsilon();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  this.entry.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  this.entry.getEpsilon();	  int    epsilon    =    this.entry.getEpsilon();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
206	[BUG]  [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.computeValue(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.computeValue(entry);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  DEFAULT_EPSILON.computeValue(entry);	  final    double    epsilon    =    DEFAULT_EPSILON.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
207	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(entry!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >>    0)    {    	compilable	  [FE]  OptimizationException  	43	6	replace
208	[BUG]  [BUGGY]  if(entry!=  0)  {  [FE]  OptimizationException  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >>    0)    {    	compilable	  [FE]  OptimizationException  	43	6	replace
209	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);	  Integer    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
210	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(array,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(array,  col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(array,  col);	  Integer    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
211	[BUG]  [BUGGY]  final  double  epsilon  =  entry.getValue()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  entry.getValue()  /  1;  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  entry.getValue()  /  1;	  final    double    epsilon    =    entry.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
212	[BUG]  [BUGGY]  Integer  epsilon  =  entries.get(col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  entries.get(col);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  entries.get(col);	  Integer    epsilon    =    entries.getValue();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
213	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(entry  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	41	13	replace
214	[BUG]  [BUGGY]  if(entry  <  0)  {  [FE]  UnboundedSolutionException  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	compilable	  [FE]  UnboundedSolutionException  	41	13	replace
215	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(MathUtils.compareTo(entry,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	57	13	replace
216	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry)>  0)  {  [FE]  UnboundedSolutionException  [FE]    UnboundedSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry)>  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry)>  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	57	13	replace
217	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if(entry  ==  DEFAULT_EPSILON)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    >>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	19	13	replace
218	[BUG]  [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  [FE]  UnboundedSolutionException  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  ==  DEFAULT_EPSILON)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  ==  DEFAULT_EPSILON)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    if    (MathUtils.compareTo(entry,    0,    rhs)    >>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	19	13	replace
219	[BUG]  [BUGGY]  final  double  rhs  =  table.getEntry(i,  column);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  table.getEntry(i,  column);  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  table.getEntry(i,  column);	  final    double    rhs    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
220	[BUG]  [BUGGY]  Integer  rhs  =  entry.intValue()  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  rhs  =  entry.intValue()  *  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  rhs  =  entry.intValue()  *  DEFAULT_EPSILON;	  Integer    rhs    =    entry.intValue();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
221	[BUG]  [BUGGY]  final  double  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  entry.getValue()  +  DEFAULT_EPSILON;	  final    double    rhs    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
222	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  col,  DEFAULT_EPSILON);	  int    epsilon    =    getEpsilon(entry,    col);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
223	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);	  Integer    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
224	[BUG]  [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(rhs,  0,  entry)  <  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
225	[BUG]  [BUGGY]  if(entry  >=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry  >=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry  >=  0)  {  If  (MathUtils.compareTo(rhs,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    If    (MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
226	[BUG]  [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  rhs)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  rhs)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  minValue  =  DEFAULT_EPSILON;  if(minValue  >  rhs)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    null)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    col)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
227	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON)  >=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (!MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (!MathUtils.compareTo(rhs,  entry,  DEFAULT_EPSILON)  >=  0)  {	  if    (!MathUtils.compareTo(rhs,    0,    entry)    >=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	53	None	replace
228	[BUG]  [BUGGY]  float  epsilon  =  getEpsilon(rhs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  float  epsilon  =  getEpsilon(rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	float  epsilon  =  getEpsilon(rhs);	  int    epsilon    =    getEpsilon(rhs);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
229	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs!=  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs!=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length),  rhs!=  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
230	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  ==  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)  ==  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)  ==  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)!=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
231	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)>  1)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length)>  1)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length)>  1)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)>    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
232	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs  <  0)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length),  rhs  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
233	[BUG]  [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs)  <  0)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(MathUtils.compareTo(entry,  0,  entry.length),  rhs)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(MathUtils.compareTo(entry,  0,  entry.length),  rhs)  <  0)  {	  if(MathUtils.compareTo(entry,    0,    entry.length)    <    0)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
234	[BUG]  [BUGGY]  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  1)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	add	if  (MathUtils.compareTo(rhs,  0,  entry)>  1)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	13	replace
235	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  1)  {  [FE]  UnboundedSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  0,  entry)>  1)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  0,  entry)>  1)  {	  if    (MathUtils.compareTo(rhs,    0,    entry)>    0)    {    	compilable	  [FE]  UnboundedSolutionException  	5	13	replace
236	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(rhs,  entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  getEpsilon(rhs,  entry);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  getEpsilon(rhs,  entry);	  int    epsilon    =    getEpsilon(rhs,    entry);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
237	[BUG]  [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  getEpsilon(col,  entry,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  getEpsilon(col,  entry,  DEFAULT_EPSILON);	  Integer    epsilon    =    getEpsilon(col,    entry);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
238	[BUG]  [BUGGY]  if  (MathUtils.compareTo(rhs,  1,  entry.value)  >=  0)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if  (MathUtils.compareTo(rhs,  1,  entry.value)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if  (MathUtils.compareTo(rhs,  1,  entry.value)  >=  0)  {	  if    (MathUtils.compareTo(rhs,    0,    entry.value)    >=    0)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
239	[BUG]  [BUGGY]  final  double  rhs  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  rhs  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  rhs  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON;  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
240	[BUG]  [BUGGY]  int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	int  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON,  rhs);	  int    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
241	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  double  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	double  epsilon  =  getEpsilon(entry,  DEFAULT_EPSILON);	  int    epsilon    =    getEpsilon(entry,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  Integer  epsilon  =  table.intValue()  +  entry.intValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  Integer  epsilon  =  table.intValue()  +  entry.intValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	Integer  epsilon  =  table.intValue()  +  entry.intValue();	  Integer    epsilon    =    table.intValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
243	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [CE]  cannot  assign  a  value  to  final  variable  minValue  [FE]                        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON;  if(rhs  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  }	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  minValue	76	None	replace
244	[BUG]  [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  DEFAULT_EPSILON)  {  final  double  minValue  =  DEFAULT_EPSILON  +  entry.doubleValue();  if(minValue  >  DEFAULT_EPSILON)  {  minValue  =  DEFAULT_EPSILON  +  entry.doubleValu	  if(entry!=    DEFAULT_EPSILON)    {    final    double    minValue    =    DEFAULT_EPSILON;    if(minValue    >    DEFAULT_EPSILON)    {    minValue    =    DEFAULT_EPSILON    +    entry.doubleValue();    }    	non-compiled	[CE]  ';'  expected	76	None	replace
245	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  entry)  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  entry)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  entry)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
246	[BUG]  [BUGGY]  if(entry!=  null)  {  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  if(entry!=  null)  {  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	if(entry!=  null)  {  If  (MathUtils.compareTo(entry,  0,  rhs)  >=  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
247	[BUG]  [BUGGY]  If  (MathUtils.compareTo(entry,  0,  entry)  <  0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  If  (MathUtils.compareTo(entry,  0,  entry)  <  0)  {  [BUGGY]      final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	If  (MathUtils.compareTo(entry,  0,  entry)  <  0)  {	  if    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    If    (MathUtils.compareTo(entry,    0,    rhs)    >=    0)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
248	[BUG]  [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);      [BUGGY]  final  double  epsilon  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {  final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	82	82	1	replace	final  double  epsilon  =  DEFAULT_EPSILON.doubleValue();	  final    double    epsilon    =    table.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
