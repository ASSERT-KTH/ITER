bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  int  epsilon  =  table.getEpsilonIndex();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilonIndex();	  int    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
3	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
4	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
5	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
6	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue(i);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue(i);	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
7	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyValue();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyValue();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
8	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
9	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  =  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
10	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
12	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
13	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalEpsilon();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
14	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmpty();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
15	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObject();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
16	[BUG]  [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	((  SimplexTableau)tableau).setOptimalValue(i  +  1);	  ((    SimplexTableau)tableau).setOptimalValue(i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	((  SimplexTableau)tableau).setOptimalValue(i,  DEFAULT_EPSILON);	  ((    SimplexTableau)tableau).setOptimalValue(i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
18	[BUG]  [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	((  SimplexTableau)tableau).setOptimalValue(i  -  1);	  ((    SimplexTableau)tableau).setOptimalValue(i);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
19	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
20	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.cloneTree();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.cloneTree();	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
21	[BUG]  [BUGGY]  double  epsilon  =  this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  this.tableau.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  this.tableau.getEpsilon();	  int    epsilon    =    this.tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
24	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  table.getWidth())  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  table.getWidth())  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  table.getWidth())  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
25	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  table.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  table.getEpsilon()  +  1;	  double    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
26	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  table.getEpsilon()  *  DEFAULT_EPSILON;	  double    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
27	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon()  /  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  table.getEpsilon()  /  DEFAULT_EPSILON;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  table.getEpsilon()  /  DEFAULT_EPSILON;	  double    epsilon    =    table.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
28	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  2);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  2);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  2);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
29	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i  +  1);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i  +  1);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
30	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  *  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  *  1);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  *  1);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
31	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  2);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  2);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
32	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
35	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  =  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  =  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
36	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)!=  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)!=  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
37	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  >=  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  >=  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
38	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEmpty();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEmpty();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEmpty();	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
39	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getOptionalObject();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getOptionalObject();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getOptionalObject();	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
40	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  =  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  =  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
41	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier  +  1)  <  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier  +  1)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier  +  1)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
42	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.multiplyVal)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
43	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getEmpty();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getObjective();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getObjective();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getObjective();	  SimplexTableau    entry    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
45	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
46	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
47	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
48	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
49	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
50	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
51	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  true)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  true)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  true)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON))  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON))  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i  +  1);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilonIndex(i  +  1);	  int    epsilon    =    table.getEpsilonIndex(i);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
54	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilonIndex(i);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  table.getEpsilonIndex(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  table.getEpsilonIndex(i);	  int    epsilon    =    table.getEpsilonIndex(i);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
55	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i)-  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i)-  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilonIndex(i)-  1;	  int    epsilon    =    table.getEpsilonIndex(i);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
56	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue(i);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEmptyValue(i);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
57	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  table);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  table);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  table);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
58	[BUG]  [BUGGY]  double  epsilon  =  Tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  double  epsilon  =  Tableau.getEpsilon();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  Tableau.getEpsilon();	  double    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i  +  1);	  SimplexTableau    rhs    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
60	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getRowValue(i);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getRowValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimplexTableau)tableau.getRowValue(i);	  SimplexTableau    rhs    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
61	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i,  table);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i,  table);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i,  table);	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
62	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(Simpletableau)this.tableau.clone();	  SimplexTableau    epsilon    =(Simpletableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
63	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pivotVal)  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
64	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
65	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunction();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
66	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmptyObject();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
67	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)this.tableau.getValue(i);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)this.tableau.getValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)this.tableau.getValue(i);	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
69	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (!MathUtils.compareTo(tableau.getEntry(i,  entry),  0,  epsilon)  {	  if    (!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
70	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon()  *  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  int  epsilon  =  table.getEpsilon()  *  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilon()  *  1;	  int    epsilon    =    table.getEpsilon()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
71	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  +  1);	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
73	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    double)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  0)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    double)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
75	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
76	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  epsilon)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  epsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  epsilon)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
77	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  this.optimal)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  this.optimal)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  this.optimal)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
78	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getOptimalValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getOptimalValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getOptimalValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i).getValue();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
79	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getOptimalValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getOptimalValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getOptimalValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i).getValue();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
80	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getValue();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i).getValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i).getValue();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
81	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
82	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
83	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  3)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  3)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  3)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
84	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue(i);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue(i);	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
85	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)>  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
86	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)>  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
87	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
88	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  epsilon)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  epsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  epsilon)  {	  if    (!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
89	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i))  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i))  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i))  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  this.value)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
91	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  value)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    pivotVal)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
92	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  int  epsilon  =  this.tableau.getEpsilon()  +  1;  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  this.tableau.getEpsilon()  +  1;	  int    epsilon    =    this.tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
93	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
94	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);  if(entry!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);  if(entry!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  +  1);  if(entry!=  null)  {  return  false;  }	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
95	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getRatio())  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
96	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  <  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
97	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveValue(i);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveValue(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveValue(i);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
98	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue(i);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue(i);	  SimplexTableau    entry    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
99	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)),  DEFAULT_EPSILON,  0,  epsilon)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)),  DEFAULT_EPSILON,  0,  epsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)),  DEFAULT_EPSILON,  0,  epsilon)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
100	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getElement();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getElement();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getElement();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObject();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
101	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i))  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i))  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
102	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalValue();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
103	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i);	  SimplexTableau    rhs    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
104	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimpleTableau)tableau.getValue(i  +  1);	  SimplexTableau    rhs    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
105	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
106	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i  -  1);	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
107	[BUG]  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  <  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    double)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
108	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1,  table.getWidth());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1,  table.getWidth());  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1,  table.getWidth());	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
109	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  *  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  *  1);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  *  1);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
110	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveEntry(i);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveEntry(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjectiveEntry(i);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
111	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)>  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
112	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i);	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
113	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  -  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i  -  1);	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
114	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptionalObjective();	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
115	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getOptimalValue();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
116	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleGraphics)tableau.clone();	  SimplexTableau    epsilon    =(Simpletableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
117	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  table.getWidth())  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
118	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  2)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  2)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  2)  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
119	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  value)  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
120	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalVariables();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalEpsilon();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
121	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  2),  0,  DEFAULT_EPSILON)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  2),  0,  DEFAULT_EPSILON)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  2),  0,  DEFAULT_EPSILON)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
122	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)-  1),  0,  DEFAULT_EPSILON)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)-  1),  0,  DEFAULT_EPSILON)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)-  1),  0,  DEFAULT_EPSILON)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
123	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  defsilon)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  defsilon)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  defsilon)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i)+    1),    0,    DEFAULT_EPSILON)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
124	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  DEFAULT_EPSILON);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i,  DEFAULT_EPSILON);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(0).getValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(0).getValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(0).getValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i).getValue();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
126	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i,  DEFAULT_EPSILON);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i,  DEFAULT_EPSILON);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i,  DEFAULT_EPSILON);	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
127	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defValue)  <  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defValue)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  defValue)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    multiplier)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
128	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalPosition();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalPosition();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalPosition();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptimalValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
129	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue();  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getOptimalValue();	  SimplexTableau    entry    =(SimplexTableau)tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
130	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)dataset.clone();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)dataset.clone();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)dataset.clone();	  SimplexTableau    epsilon    =(SimpleTableau)this.tableau.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
131	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getValue(i);  if(entry  ==  null)  {  return  false;  }	  SimplexTableau    entry    =(SimplexTableau)tableau.getValue(i);    if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
132	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon))  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon))  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
133	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
134	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pointVal)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pointVal)  ==  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  pointVal)  ==  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
135	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunctionObject();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunctionObject();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalFunctionObject();	  SimplexTableau    epsilon    =(SimplexTableau)tableau.getOptionalObject();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
136	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry();	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
137	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  defsilon)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON,    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
138	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  DEFAULT_EPSILON)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  DEFAULT_EPSILON)  <  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)/  DEFAULT_EPSILON)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
139	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i  +  1);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimpleTableau)tableau.getEntry(i  +  1);	  SimplexTableau    entry    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
140	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject(i);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject(i);  [BUGGY]      if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject(i);	  SimplexTableau    epsilon    =(SimpleTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
141	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)>  0)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)>  0)  {  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)>  0)  {	  if(MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)>    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
142	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getRowValue(i);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {      [BUGGY]  SimplexTableau  rhs  =(SimpleTableau)tableau.getRowValue(i);  [BUGGY]      return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimpleTableau)tableau.getRowValue(i);	  SimplexTableau    rhs    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
