bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  int  epsilon  =  table.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilon();	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  double  epsilon  =  tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  double  epsilon  =  tableau.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  tableau.getEpsilon();	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  int  epsilon  =  table.getEpsilon()  +  1;  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilon()  +  1;	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  int  epsilon  =  this.tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  int  epsilon  =  this.tableau.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  this.tableau.getEpsilon();	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue(i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue(i  +  1);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getValue(i  +  1);	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry(i  +  1);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.getEntry(i  +  1);	      SimplexTableau    epsilon    =(SimplexTableau)this.tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEmpty();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getObject();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)this.tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(i  +  1);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getEntry(i  +  1);	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  <  =  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  ==  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
15	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
16	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)!=  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)!=  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalEpsilon();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  multiplier)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i);  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  ((  SimplexTableau)tableau).setOptimalValue(i);  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	((  SimplexTableau)tableau).setOptimalValue(i);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i);  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  rhs  =(SimplexTableau)tableau.getValue(i);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
25	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEpsilon();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptimalValue();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i);	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getValue(i  +  1);	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getValue(i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjective();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjective();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObjective();	      SimplexTableau    epsilon    =(SimplexTableau)this.tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getObjective();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getObjective();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getObjective();	      SimplexTableau    epsilon    =(SimplexTableau)this.tableau.getObjective();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
31	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
32	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getObjective();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getObjective();  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getObjective();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getValue(i);  if(entry!=  null)  {  return  false;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  pivotVal)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if  (MathUtils.compareTo(tableau.getEntry(i,  i),  0,  double)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  0,  epsilon)>  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  >=  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  >=  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  0,  DEFAULT_EPSILON)  >=  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  int  epsilon  =  table.getEpsilonIndex(i);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	int  epsilon  =  table.getEpsilonIndex(i);	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i);	      SimplexTableau    epsilon    =(SimplexTableau)this.tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.getEntry(i);	      SimplexTableau    epsilon    =(SimplexTableau)this.tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getObject();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getObject();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalObject();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalObject();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimplexTableau)tableau.getOptionalObject();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getObject();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  1);  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)tableau.getEntry(i  +  1);	      SimplexTableau    epsilon    =(SimplexTableau)tableau.getEntry(i);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  DEFAULT_EPSILON)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  DEFAULT_EPSILON)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i)+  1),  0,  DEFAULT_EPSILON)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    DEFAULT_EPSILON)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
45	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  <  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
46	[BUG]  [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getValue();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getValue();  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  entry  =(SimplexTableau)tableau.getEntry(i).getValue();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  0)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(!MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON)  <  0)  {	  if(!MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {  [BUGGY]    return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	if(MathUtils.compareTo(tableau.getEntry(i,  i),  DEFAULT_EPSILON,  0,  epsilon)  ==  0)  {	  if    (MathUtils.compareTo(tableau.getEntry(i,    i),    0,    epsilon)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)tableau.clone();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(Simpletableau)tableau.clone();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(Simpletableau)tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	SimplexTableau  epsilon  =(SimpleTableau)this.tableau.clone();	      SimplexTableau    epsilon    =(SimplexTableau)tableau.clone();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  double  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  boolean  isOptimal(final  SimplexTableau  tableau)  {  if  (tableau.getNumArtificialVariables()  >  0)  {  return  false;  }  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {    [BUGGY]  double  epsilon  =  table.getEpsilon();  [BUGGY]    if  (MathUtils.compareTo(tableau.getEntry(0,  i),  0,  epsilon)  <  0)  {  return  false;  }  }  return  true;  }  [CLASS]  SimplexSolver  [METHOD]  isOptimal  [RETURN_TYPE]  boolean  SimplexTableau  tableau  [VARIABLES]  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  multiplier  pivotVal  ratio  rhs  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2773500981126146	151	151	1	replace	double  epsilon  =  table.getEpsilon();	      int    epsilon    =    tableau.getEpsilon();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
