bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	23	None	replace
2	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	long  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
3	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	23	None	replace
4	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
5	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	11	8	replace
6	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	compilable	  [FE]  NoFeasibleSolutionException  	11	8	replace
7	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.length  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
8	[BUG]  [BUGGY]  final  double  ratio  =  entry.epsilon  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.epsilon  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.epsilon  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
9	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  entry  *  rhs;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	8	replace
10	[BUG]  [BUGGY]  final  double  ratio  =  entry  *  rhs;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  *  rhs;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	8	replace
11	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	6	replace
12	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	6	replace
13	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  rhs;  [CE]  double  cannot  be  dereferenced  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.rhs  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  rhs;	  final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
14	[BUG]  [BUGGY]  final  double  ratio  =  entry  rhs  *  epsilon;  [CE]  ';'  expected  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  rhs  *  epsilon;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  rhs  *  epsilon;	  final    double    ratio    =    rhs    *    entry;    	non-compiled	[CE]  ';'  expected	22	None	replace
15	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
16	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  1;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  1;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  /  DEFAULT_EPSILON  +  1;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
17	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  0;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)>  0;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	19	None	replace
18	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  0;  [CE]  incompatible  types  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  0;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)>  0;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	19	None	replace
19	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon)>  0;  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon)>  0;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  entry,  0,  epsilon)>  0;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	19	None	replace
20	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  /  DEFAULT_EPSILON;	      Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
21	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.doubleValue()  +  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  +  1;	      Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
22	[BUG]  [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue();  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  DEFAULT_EPSILON.doubleValue();	      Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
23	[BUG]  [BUGGY]  Integer  minRatio  =  entry.doubleValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.doubleValue()  -  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.doubleValue()  -  1;	      Integer    minRatio    =    entry.doubleValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	16	None	replace
24	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  +  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  +  1;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
25	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  /  DEFAULT_EPSILON;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
26	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  1;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  -  1;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
27	[BUG]  [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  col;  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  entry.getValue()  -  col;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  entry.getValue()  -  col;	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
28	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
29	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
30	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  col);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  col);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  col);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
31	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
32	[BUG]  [BUGGY]  final  double  ratio  =  entry.length  /  rhs;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.length  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.length  /  rhs;	  final    double    ratio    =    entry    rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
33	[BUG]  [BUGGY]  final  double  ratio  =  entry.epsilon  /  rhs;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.epsilon  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.epsilon  /  rhs;	  final    double    ratio    =    entry    rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
34	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	24	None	replace
35	[BUG]  [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  long  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	long  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
36	[BUG]  [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	24	None	replace
37	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)/  DEFAULT_EPSILON;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
38	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  +  1;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  rhs  =  entry.getValue()  +  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  +  1;	      Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
39	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  +  col;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  rhs  =  entry.getValue()  +  col;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  +  col;	      Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
40	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  col;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  rhs  =  entry.getValue()  *  col;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  col;	      Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
41	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  +  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.getValue()  +  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  +  1;	      Integer    minRatio    =    entry.getValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
42	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  /  DEFAULT_EPSILON;	      Integer    minRatio    =    entry.getValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
43	[BUG]  [BUGGY]  Integer  minRatio  =  entry.getValue()  -  1;  [CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]                    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatio  =  entry.getValue()  -  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatio  =  entry.getValue()  -  1;	      Integer    minRatio    =    entry.getValue();    	non-compiled	[CE]  variable  minRatio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	5	None	replace
44	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  /  DEFAULT_EPSILON;	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
45	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  -  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  entry.getValue()  -  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  -  1;	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
46	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  entry.getValue()  +  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue()  +  1;	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
47	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
48	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  [CE]  cannot  find  symbol  ratio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  col);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  col);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
49	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
50	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  method  compareTo  in  class  MathUtils  cannot  be  applied  to  given  types;	13	None	replace
51	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	add
52	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	25	None	add
53	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  rhs)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	15	None	replace
54	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	15	None	replace
55	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  col)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	15	None	replace
56	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.length)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
57	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  entry.rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs  /  entry.rhs;	  final    double    ratio    =    entry.rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
58	[BUG]  [BUGGY]  final  double  ratio  =  entry.rhs  /  epsilon;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.rhs  /  epsilon;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.rhs  /  epsilon;	  final    double    ratio    =    entry.rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
59	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  double  ratio  =  rhs  *  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  double  ratio  =  rhs  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    entry;    final  double  ratio  =  rhs  *  entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	21	None	add
60	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry;  Final  double  ratio  =  rhs  *  entry;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  entry;  Final  double  ratio  =  rhs  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    entry;    Final  double  ratio  =  rhs  *  entry;	  	non-compiled	[CE]  not  a  statement	21	None	add
61	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  double  ratio  =  rhs  *  Entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  double  ratio  =  rhs  *  Entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    entry;    final  double  ratio  =  rhs  *  Entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	21	None	add
62	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  Double  ratio  =  rhs  *  entry;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  entry;  final  Double  ratio  =  rhs  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    entry;    final  Double  ratio  =  rhs  *  entry;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	21	None	add
63	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	12	None	add
64	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    Integer  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	12	None	add
65	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon));	  	non-compiled	[CE]  ';'  expected	12	None	add
66	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  double  ratio  =  entry  /  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  double  ratio  =  entry  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    final  double  ratio  =  entry  /  rhs;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	8	None	add
67	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  double  ratio  =  entry  /  rhs);  [CE]  ';'  expected  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  double  ratio  =  entry  /  rhs);  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    final  double  ratio  =  entry  /  rhs);	  	non-compiled	[CE]  ';'  expected	8	None	add
68	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  Final  double  ratio  =  entry  /  rhs;  [CE]  not  a  statement  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  Final  double  ratio  =  entry  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    Final  double  ratio  =  entry  /  rhs;	  	non-compiled	[CE]  not  a  statement	8	None	add
69	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  Double  ratio  =  entry  /  rhs;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  final  Double  ratio  =  entry  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    final  Double  ratio  =  entry  /  rhs;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	8	None	add
70	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)-  1;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	26	None	replace
71	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [CE]  cannot  find  symbol  ratio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs)-  1;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	26	None	replace
72	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)-  1;  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  rhs)-  1;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	26	None	replace
73	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	26	None	replace
74	[BUG]  [BUGGY]  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.getValue()  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
75	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	10	None	add
76	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  Final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  Final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    Final  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	10	None	add
77	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  double  ratio  =  rhs  /  DEFAULT_EPSilON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  double  ratio  =  rhs  /  DEFAULT_EPSilON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final  double  ratio  =  rhs  /  DEFAULT_EPSilON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	10	None	add
78	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    final  Double  ratio  =  rhs  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  ratio  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	10	None	add
79	[BUG]  [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	14	None	add
80	[BUG]  [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  Final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    Final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	14	None	add
81	[BUG]  [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final  Double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	14	None	add
82	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	add
83	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    Integer  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	17	None	add
84	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon));	  	non-compiled	[CE]  ';'  expected	17	None	add
85	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	18	None	replace
86	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	18	None	replace
87	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [CE]  cannot  find  symbol  ratio  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  0);	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	18	None	replace
88	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  entry)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	15	None	replace
89	[BUG]  [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	float  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
90	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(rhs,  0,  epsilon)>  0;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  incompatible  types	19	None	replace
91	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	12	None	add
92	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    static  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
93	[BUG]  [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  last  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [CE]  not  a  statement  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  /  DEFAULT_EPSILON;  last  double  ratio  =  rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    last  double  ratio  =  rhs  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  not  a  statement	10	None	add
94	[BUG]  [BUGGY]  Integer  rhs  =  entry.getKey();  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  rhs  =  entry.getKey();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getKey();	      Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
95	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  rhs);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
96	[BUG]  [BUGGY]  final  double  ratio  =  rhs  *  entry;  static  final  double  ratio  =  rhs  *  entry;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs  *  entry;  static  final  double  ratio  =  rhs  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    rhs    *    entry;    static  final  double  ratio  =  rhs  *  entry;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
97	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  static  final  double  ratio  =  entry  /  rhs;  [CE]  illegal  start  of  expression  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  static  final  double  ratio  =  entry  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    static  final  double  ratio  =  entry  /  rhs;	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
98	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	18	None	replace
99	[BUG]  [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      final  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon)/  DEFAULT_EPSILON;  final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    final  double  minValue  =  MathUtils.compareTo(Entry,  0,  epsilon)/  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	14	None	add
100	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  DEFAULT_EPSILON  *  rhs;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	6	replace
101	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [FE]  NoFeasibleSolutionException  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  *  rhs;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	6	replace
102	[BUG]  [BUGGY]  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	add	final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	8	replace
103	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [FE]  NoFeasibleSolutionException  [FE]      NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  *  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  *  entry;	  final    double    ratio    =    rhs    *    entry;    	compilable	  [FE]  NoFeasibleSolutionException  	22	8	replace
104	[BUG]  [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  DEFAULT_EPSILON  /  entry.rhs;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
105	[BUG]  [BUGGY]  final  double  ratio  =  entry  rhs  *  rhs;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  rhs  *  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  rhs  *  rhs;	  final    double    ratio    =    entry    rhs    /    rhs;    	non-compiled	[CE]  ';'  expected	6	None	replace
106	[BUG]  [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.rhs;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry.rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.rhs  /  entry.rhs;	  final    double    ratio    =    entry.rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
107	[BUG]  [BUGGY]  Integer  minValue  =  epsilon.getValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  epsilon.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  epsilon.getValue();	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
108	[BUG]  [BUGGY]  Integer  minValue  =  table.getValue();  [CE]  cannot  find  symbol  table  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  table.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  table.getValue();	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  table	4	None	replace
109	[BUG]  [BUGGY]  Integer  minValue  =  entries.getValue();  [CE]  cannot  find  symbol  entries  [FE]                  AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  entries.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entries.getValue();	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  entries	4	None	replace
110	[BUG]  [BUGGY]  final  double  ratio  =  entry  rhs  *  DEFAULT_EPSILON;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  rhs  *  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry  rhs  *  DEFAULT_EPSILON;	  final    double    ratio    =    entry    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  ';'  expected	20	None	replace
111	[BUG]  [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entry.doubleValue  /  DEFAULT_EPSILON;	  final    double    ratio    =    rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
112	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;	      int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    	non-compiled	[CE]  cannot  find  symbol  ratio	26	None	replace
113	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1;  int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    DEFAULT_EPSILON,    epsilon)-    1;    int  minValue  =  MathUtils.compareTo(entry,  DEFAULT_EPSILON,  epsilon)-  1);	  	non-compiled	[CE]  ';'  expected	25	None	add
114	[BUG]  [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]      int  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	        int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    int  minValue  =  MathUtils.compareTo(entry,  1,  epsilon);	  	non-compiled	[CE]  variable  minValue  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	12	None	add
115	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.epsilon)>  0;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.epsilon)>  0;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry.epsilon)>  0;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)>    0;    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
116	[BUG]  [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  rhs  =  entry.getValue()  *  DEFAULT_EPSILON;	      Integer    rhs    =    entry.getValue();    	non-compiled	[CE]  variable  rhs  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	2	None	replace
117	[BUG]  [BUGGY]  Integer  minRatioPos  =  table.getValue();  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]            AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  table.getValue();  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  table.getValue();	      Integer    minRatioPos    =    entry.getValue();    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	3	None	replace
118	[BUG]  [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry)/  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry)/  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  minValue  =  MathUtils.compareTo(entry,  0,  entry)/  DEFAULT_EPSILON;	      final    double    minValue    =    MathUtils.compareTo(entry,    0,    epsilon)/    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  ratio	15	None	replace
119	[BUG]  [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  rhs.rhs  /  entry;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  rhs.rhs  /  entry;	  final    double    ratio    =    entry.rhs    /    rhs;    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
120	[BUG]  [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minRatioPos  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      Integer    minRatioPos    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  variable  minRatioPos  is  already  defined  in  method  getPivotRow(int,SimplexTableau)	1	None	replace
121	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  ratio  [FE]    AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  DEFAULT_EPSILON);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
122	[BUG]  [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [CE]  cannot  find  symbol  ratio  [FE]      AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	double  minValue  =  MathUtils.compareTo(entry,  0,  epsilon);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  ratio	13	None	replace
123	[BUG]  [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length);  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	int  minValue  =  MathUtils.compareTo(entry,  0,  entry.length);	      int    minValue    =    MathUtils.compareTo(entry,    0,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
124	[BUG]  [BUGGY]  final  double  ratio  =  entries.rhs  /  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  entries  [FE]        AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entries.rhs  /  DEFAULT_EPSILON;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final  double  ratio  =  entries.rhs  /  DEFAULT_EPSILON;	  final    double    ratio    =    entry.rhs    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  entries	27	None	replace
125	[BUG]  [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON;  [BUGGY]    final  double  ratio  =  rhs  /  entry;  if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	Integer  minValue  =  entry.getValue(),  DEFAULT_EPSILON;	      Integer    minValue    =    entry.getValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
126	[BUG]  [BUGGY]  final  double  ratio  =  entry  /  rhs;  last  double  ratio  =  entry  /  rhs;  [CE]  not  a  statement  [FE]    NoFeasibleSolutionException    [CONTEXT]    private  Integer  getPivotRow(final  int  col,  final  SimplexTableau  tableau)  {  double  minRatio  =  Double.MAX_VALUE;  Integer  minRatioPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getHeight();  i++)  {  final  double  rhs  =  tableau.getEntry(i,  tableau.getWidth()  -  1);  final  double  entry  =  tableau.getEntry(i,  col);  if  (MathUtils.compareTo(entry,  0,  epsilon)  >=  0)  {    [BUGGY]  final  double  ratio  =  entry  /  rhs;  last  double  ratio  =  entry  /  rhs;  [BUGGY]    if  (ratio  <  minRatio)  {  minRatio  =  ratio;  minRatioPos  =  i;  }  }  }  return  minRatioPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotRow  [RETURN_TYPE]  Integer  final  int  col  SimplexTableau  tableau  [VARIABLES]  Integer  minRatioPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  entry  epsilon  minRatio  minValue  ratio  rhs  int  col  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	83	83	1	replace	final    double    ratio    =    entry    /    rhs;    last  double  ratio  =  entry  /  rhs;	  	non-compiled	[CE]  not  a  statement	8	None	add
