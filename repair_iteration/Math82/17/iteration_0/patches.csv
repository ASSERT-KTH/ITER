bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn(tableau);  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  minValue  =  getPivotColumn(tableau);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  minValue  =  getPivotColumn(tableau);		non-compiled	[CE]  <identifier>  expected	34	None	add
2	[BUG]  [BUGGY]    Integer  minPos  =  Tableau.getInstance();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  minPos  =  Tableau.getInstance();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  minPos  =  Tableau.getInstance();		non-compiled	[CE]  <identifier>  expected	34	None	add
3	[BUG]  [BUGGY]    Integer  minPos  =  Tableau.getInstance(tableau);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  minPos  =  Tableau.getInstance(tableau);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  minPos  =  Tableau.getInstance(tableau);		non-compiled	[CE]  <identifier>  expected	34	None	add
4	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn(tab);  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  minValue  =  getPivotColumn(tab);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  minValue  =  getPivotColumn(tab);		non-compiled	[CE]  <identifier>  expected	34	None	add
5	[BUG]  [BUGGY]    Integer  minValue  =  getPivotColumn();  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  minValue  =  getPivotColumn();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  minValue  =  getPivotColumn();		non-compiled	[CE]  <identifier>  expected	34	None	add
6	[BUG]  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  DEFAULT_EPSILON;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  Integer  minPos  =  0;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  0;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  0;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  Integer  minPos  =  1;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  1;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  1;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
9	[BUG]  [BUGGY]  Integer  minPos  =  this.minValue;  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  this.minValue;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  this.minValue;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
10	[BUG]  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  DEFAULT_EPSILON;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
11	[BUG]  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON.doubleValue();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  DEFAULT_EPSILON.doubleValue();	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
12	[BUG]  [BUGGY]    int  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    int  epsilon  =  table.getEpsilon();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    int  epsilon  =  table.getEpsilon();		non-compiled	[CE]  <identifier>  expected	34	None	add
13	[BUG]  [BUGGY]    Integer  epsilon  =  getEpsilon(tableau);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  epsilon  =  getEpsilon(tableau);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  epsilon  =  getEpsilon(tableau);		non-compiled	[CE]  <identifier>  expected	34	None	add
14	[BUG]  [BUGGY]    SimplexTableau  epsilon  =  getEpsilon(tab);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    SimplexTableau  epsilon  =  getEpsilon(tab);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    SimplexTableau  epsilon  =  getEpsilon(tab);		non-compiled	[CE]  <identifier>  expected	34	None	add
15	[BUG]  [BUGGY]    Integer  epsilon  =  getEpsilon();  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  epsilon  =  getEpsilon();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  epsilon  =  getEpsilon();		non-compiled	[CE]  <identifier>  expected	34	None	add
16	[BUG]  [BUGGY]    Integer  epsilon  =  getEpsilon(tab);  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  epsilon  =  getEpsilon(tab);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  epsilon  =  getEpsilon(tab);		non-compiled	[CE]  <identifier>  expected	34	None	add
17	[BUG]  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON.length;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON.length;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  DEFAULT_EPSILON.length;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
18	[BUG]  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  null;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]  Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  null;  [BUGGY]  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	Integer  minPos  =  DEFAULT_EPSILON?  DEFAULT_EPSILON  :  null;	Integer  minPos  =  null;  	non-compiled	[CE]  <identifier>  expected	33	None	replace
19	[BUG]  [BUGGY]    Integer  epsilon  =  table.getEpsilon();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  epsilon  =  table.getEpsilon();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  epsilon  =  table.getEpsilon();		non-compiled	[CE]  <identifier>  expected	34	None	add
20	[BUG]  [BUGGY]    int  epsilon  =  table.getWidth();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    int  epsilon  =  table.getWidth();  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    int  epsilon  =  table.getWidth();		non-compiled	[CE]  <identifier>  expected	34	None	add
21	[BUG]  [BUGGY]    Integer  epsilon  =  Tableau.getInstance(tableau);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getPivotColumn(SimplexTableau  tableau)  {  double  minValue  =  0;  [BUGGY]    Integer  epsilon  =  Tableau.getInstance(tableau);  [BUGGY]  Integer  minPos  =  null;  for  (int  i  =  tableau.getNumObjectiveFunctions();  i  <  tableau.getWidth()  -  1;  i++)  {  if  (MathUtils.compareTo(tableau.getEntry(0,  i),  minValue,  epsilon)  <  0)  {  minValue  =  tableau.getEntry(0,  i);  minPos  =  i;  }  }  return  minPos;  }  [CLASS]  SimplexSolver  [METHOD]  getPivotColumn  [RETURN_TYPE]  Integer  SimplexTableau  tableau  [VARIABLES]  Integer  minPos  boolean  SimplexTableau  tableau  double  DEFAULT_EPSILON  epsilon  minValue  int  i  	projects/Math82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java	0.2672612419124244	60	60	1	replace	    Integer  epsilon  =  Tableau.getInstance(tableau);		non-compiled	[CE]  <identifier>  expected	34	None	add
