bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  y0,  c[k-1],  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  y0,  c[k-1],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  y0,  c[k-1],  yDotK[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k-1],  c[k-1],  yTmp[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k-1],  c[k-1],  yTmp[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK[k-1],  c[k-1],  yTmp[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
3	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  y1,  c[k-1],  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  y1,  c[k-1],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  y1,  c[k-1],  yDotK[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
4	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  y1,  c[k-1],  yDotK[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  y1,  c[k-1],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  y1,  c[k-1],  yDotK[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
7	[BUG]  [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
8	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
9	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK,  yTmp,  c[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK,  yTmp,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK,  yTmp,  c[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
10	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotTmp,  c,  k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotTmp,  c,  k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotTmp,  c,  k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
11	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  sum,  yTmp,  c[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  sum,  yTmp,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  sum,  yTmp,  c[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
12	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	1	None	replace
14	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	1	None	replace
15	[BUG]  [BUGGY]  int  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[k-1][0]  *  yDotK[0][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  int  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;	      int    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	19	None	replace
17	[BUG]  [BUGGY]  int  stepSize  =  a[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  a[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  a[k-1][0]  *  yDotK[0][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	19	None	replace
18	[BUG]  [BUGGY]  int  stepSize  =  c.length  -  1;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  c.length  -  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  c.length  -  1;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
19	[BUG]  [BUGGY]  int  stepSize  =  k.length;  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  k.length;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  k.length;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
20	[BUG]  [BUGGY]  int  stepSize  =  c.length  -  2;  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  c.length  -  2;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  c.length  -  2;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
21	[BUG]  [BUGGY]  int  stepSize  =  k;  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  k;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  k;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
22	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  yDotK[k]);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
23	[BUG]  [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  t,  c,  yDotK[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  t,  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  yTmp[k-1]  *  t,  c,  yDotK[k]);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
24	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k],  c,  yDotK[k]);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k],  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  yDotK[k],  c,  yDotK[k]);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
25	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  yTmp[k]);  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  yTmp[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  yTmp[k]);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  b[k-1][0]  *  yDotK[1][j];	      double    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  a[k-1][0]  *  yDotK[1][j];	      double    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;	      double    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	14	None	replace
29	[BUG]  [BUGGY]  int  stepSize  =  b[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[k-1][0]  *  yDotK[1][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	21	None	replace
30	[BUG]  [BUGGY]  int  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  c[k-1][0]  *  yDotK[1][j]  +  1;	      int    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	21	None	replace
31	[BUG]  [BUGGY]  int  stepSize  =  a[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  a[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  a[k-1][0]  *  yDotK[1][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	21	None	replace
32	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	5	None	replace
33	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[1][j];	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yTmp,  c,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yTmp,  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yTmp,  c,  yDotK[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[0],  c,  yDotK[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[0],  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK[0],  c,  yDotK[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  ySize[k]);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  ySize[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  ySize[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  b[k-1][0]  *  yDotK[0][j];	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	15	None	replace
39	[BUG]  [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  a[k-1][0]  *  yDotK[0][j];	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	15	None	replace
40	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yDotK[0][j]  +  1;	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	15	None	replace
41	[BUG]  [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp  +  c[k-1]  *  yDotK[k]);	  computeDerivatives(yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);	  computeDerivatives(yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  t,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  t,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp  +  c[k-1]  *  t,  yDotK[k]);	  computeDerivatives(yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  computeDerivatives(k  +  c[k-1]  *  t,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(k  +  c[k-1]  *  t,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(k  +  c[k-1]  *  t,  yTmp,  yDotK[k]);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
45	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  yDotK[k]);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  computeDerivatives(yTmp[k-1]  *  c,  yDotK[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp[k-1]  *  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp[k-1]  *  c,  yDotK[k]);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
47	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  c[k]);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  stepSize,  k,  c[k]);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
51	[BUG]  [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  1;	      int    stepSize    =    b[0][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  2;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  2;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[0][0]  *  yDotK[1][j]  +  2;	      int    stepSize    =    b[0][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  b[0][0]  *  yDotK[1][j];	      int    stepSize    =    b[0][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
55	[BUG]  [BUGGY]  ensureCapacity(t,  yTmp  +  c[k-1]  *  stepSize,  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  ensureCapacity(t,  yTmp  +  c[k-1]  *  stepSize,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	ensureCapacity(t,  yTmp  +  c[k-1]  *  stepSize,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
56	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  sum,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  sum,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp  +  c[k-1]  *  sum,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
57	[BUG]  [BUGGY]  computeDerivatives(t,  yDotTmp  +  c[k-1]  *  sum,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yDotTmp  +  c[k-1]  *  sum,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yDotTmp  +  c[k-1]  *  sum,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
58	[BUG]  [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[0][0]  *  yDotK[0][j]  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[0][0]  *  yDotK[0][j]  +  1;	      int    stepSize    =    b[0][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	17	None	replace
59	[BUG]  [BUGGY]  int  stepSize  =  b[0][0]  *  yTmp[0][j];  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[0][0]  *  yTmp[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[0][0]  *  yTmp[0][j];	      int    stepSize    =    b[0][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	17	None	replace
60	[BUG]  [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  b[0][0]  *  yDotK[0][j];	      int    stepSize    =    b[0][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	17	None	replace
61	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK[0],  yTmp,  k]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK[0],  yTmp,  k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK[0],  yTmp,  k]);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
62	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  c,  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  stepSize,  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  stepSize,  c,  yDotK[k]);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
63	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  error,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  error,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  error,  yTmp,  yDotK[k]);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
65	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  a[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  a[0]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  a[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
67	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  t,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  t,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  t,  yTmp,  yDotK[k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
68	[BUG]  [BUGGY]  computeDerivatives(y0,  c[k-1]  *  t,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  c[k-1]  *  t,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  c[k-1]  *  t,  yTmp,  yDotK[k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
69	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
70	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0,  stepSize]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0,  stepSize]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0,  stepSize]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
71	[BUG]  [BUGGY]  ensureCapacity(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  ensureCapacity(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	ensureCapacity(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
72	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  1]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  1]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
73	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  0]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
74	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j].doubleValue()  +  1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[0][j].doubleValue()  +  1;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yDotK[0][j].doubleValue()  +  1;	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j].doubleValue();    	non-compiled	[CE]  ';'  expected	20	None	replace
75	[BUG]  [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j].doubleValue();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j].doubleValue();  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  b[k-1][0]  *  yDotK[0][j].doubleValue();	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j].doubleValue();    	non-compiled	[CE]  ';'  expected	20	None	replace
76	[BUG]  [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[0][j].doubleValue();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  a[k-1][0]  *  yDotK[0][j].doubleValue();  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  a[k-1][0]  *  yDotK[0][j].doubleValue();	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j].doubleValue();    	non-compiled	[CE]  ';'  expected	20	None	replace
77	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
78	[BUG]  [BUGGY]  int  stepSize  =  c[k-1][0]  *  yTmp[0][j];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  c[k-1][0]  *  yTmp[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  c[k-1][0]  *  yTmp[0][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	19	None	replace
79	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  y0,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  y0,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  y0,  yTmp,  yDotK[k]);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
80	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  stepSize);	  computeDerivatives(t    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	6	None	replace
81	[BUG]  [BUGGY]  int  stepSize  =  yTmp.length;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  yTmp.length;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  yTmp.length;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
82	[BUG]  [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  ySize);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  ySize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  ySize);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
83	[BUG]  [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k]);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
84	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[1][j].doubleValue();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yDotK[1][j].doubleValue();  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yDotK[1][j].doubleValue();	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j].doubleValue();    	non-compiled	[CE]  ';'  expected	20	None	replace
85	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  y1,  c,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  y1,  c,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  y1,  c,  yDotK[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	9	None	replace
86	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  error,  yTmp,  c[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  error,  yTmp,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  error,  yTmp,  c[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
87	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK,  c[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK,  c[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
88	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotTmp,  c[k]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotTmp,  c[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotTmp,  c[k]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
89	[BUG]  [BUGGY]  int  stepSize  =  b[0][0]  *  yTmp[1][j];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[0][0]  *  yTmp[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[0][0]  *  yTmp[1][j];	      int    stepSize    =    b[0][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	16	None	replace
90	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
91	[BUG]  [BUGGY]  computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
92	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  error,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  error,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  error,  yTmp,  yDotK[k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
93	[BUG]  [BUGGY]  int  stepSize  =  y[k-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  y[k-1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  y[k-1][0]  *  yDotK[1][j];	      int    stepSize    =    c[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	21	None	replace
94	[BUG]  [BUGGY]  int  stepSize  =  b[1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  b[1][0]  *  yDotK[1][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  b[1][0]  *  yDotK[1][j];	      int    stepSize    =    b[0][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	17	None	replace
95	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  y0,  c[k-1],  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  y0,  c[k-1],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  y0,  c[k-1],  yDotK[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
96	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
97	[BUG]  [BUGGY]  double  stepSize  =  c[k-1][0]  *  yTmp[0][j];  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  double  stepSize  =  c[k-1][0]  *  yTmp[0][j];  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	double  stepSize  =  c[k-1][0]  *  yTmp[0][j];	      double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	15	None	replace
98	[BUG]  [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  error]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  error]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t  +  c[k-1]  *  yDotK,  yTmp,  error]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
99	[BUG]  [BUGGY]  computeDerivatives(t,  b[k-1]  *  yDotK,  yTmp,  stepSize]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  b[k-1]  *  yDotK,  yTmp,  stepSize]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  b[k-1]  *  yDotK,  yTmp,  stepSize]);	  computeDerivatives(t    +    c[k-1]    *    yDotK,    yTmp,    stepSize]);    	non-compiled	[CE]  ';'  expected	22	None	replace
100	[BUG]  [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  error,  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp  +  c[k-1]  *  error,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp  +  c[k-1]  *  error,  yDotK[k]);	  computeDerivatives(yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	11	None	replace
101	[BUG]  [BUGGY]  computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yDotK[k]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y0  +  c[k-1]  *  stepSize,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
102	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp  +  c[k-1]  *  yDotK[0],  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
103	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  error,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp  +  c[k-1]  *  error,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp  +  c[k-1]  *  error,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
104	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
105	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
106	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
107	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  c,  yTmp,  stepSize]);	  computeDerivatives(t,    y[k-1]    *    stepSize,    yTmp,    c[k]);    	non-compiled	[CE]  ';'  expected	12	None	replace
108	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
109	[BUG]  [BUGGY]  computeDerivatives(y0,  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
110	[BUG]  [BUGGY]  computeDerivatives(k  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(k  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(k  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);	  computeDerivatives(k    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	8	None	replace
111	[BUG]  [BUGGY]  computeDerivatives(yTmp,  c[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(yTmp,  c[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(yTmp,  c[k-1]  *  yDotK[k]);	  computeDerivatives(yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	11	None	replace
112	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1][0],  c[k-1],  yDotK[k]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1][0],  c[k-1],  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1][0],  c[k-1],  yDotK[k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
113	[BUG]  [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k-1],  c[k-1],  k]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  yTmp[k-1]  *  yDotK[k-1],  c[k-1],  k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  yTmp[k-1]  *  yDotK[k-1],  c[k-1],  k]);	  computeDerivatives(t,    yTmp[k-1]    *    stepSize,    c[k-1],    yDotK[k]);    	non-compiled	[CE]  ';'  expected	7	None	replace
114	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  double  stepSize  =  c[k-1][0]  *  yDotK[0][j];  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b	      for(int    k    =    0;    k    <    stages;    ++k)    {    double    stepSize    =    c[k-1][0]    *    yDotK[0][j];    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[    	non-compiled	[CE]  ';'  expected	3	None	replace
115	[BUG]  [BUGGY]  int  stepSize  =  stages.length;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  int  stepSize  =  stages.length;  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	int  stepSize  =  stages.length;	      int    stepSize    =    c.length;    	non-compiled	[CE]  ';'  expected	18	None	replace
116	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  yDotK[k],  yTmp,  stepSize);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
117	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  yDotK,  yTmp,  stepSize]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
118	[BUG]  [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0  +  c[k-1]  *  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0  +  c[k-1]  *  yDotK[k]);	  computeDerivatives(y0    +    c[k-1]    *    stepSize,    yTmp,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	23	None	replace
119	[BUG]  [BUGGY]  ensureCapacity(t,  yTmp,  c[k-1]  *  stepSize,  yDotK[k]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  ensureCapacity(t,  yTmp,  c[k-1]  *  stepSize,  yDotK[k]);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	ensureCapacity(t,  yTmp,  c[k-1]  *  stepSize,  yDotK[k]);	  computeDerivatives(t,    yTmp    +    c[k-1]    *    stepSize,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	10	None	replace
120	[BUG]  [BUGGY]  for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]    computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	for(int  j  =  1;  k  <  stages;  ++k)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	      for(int    k    =    0;    k    <    stages;    ++k)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
121	[BUG]  [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  stepSize);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(y0,  yTmp[k-1]  *  yDotK[k],  c,  stepSize);	  computeDerivatives(y0,    yTmp[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	13	None	replace
122	[BUG]  [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  stepSize);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }    [BUGGY]  computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  stepSize);  [BUGGY]      }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	computeDerivatives(t,  y[k-1]  *  yDotK[k],  c,  stepSize);	  computeDerivatives(t,    y[k-1]    *    stepSize,    c,    yDotK[k]);    	non-compiled	[CE]  ';'  expected	9	None	replace
