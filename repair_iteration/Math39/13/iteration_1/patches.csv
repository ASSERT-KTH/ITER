bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  c);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  c);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y,  c);	  interpolator.storeTime(equations.getTime(),    c);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  c);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  c);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y0,  c);	  interpolator.storeTime(equations.getTime(),    c);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y1,  c);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y1,  c);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y1,  c);	  interpolator.storeTime(equations.getTime(),    c);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
5	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y,  stepStart,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y,  stepStart,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
6	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
7	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  stages,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y,  stages,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y,  stages,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
8	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
10	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
11	[BUG]  [BUGGY]  filteredNextT  =  equations.getPrimaryMapper();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getPrimaryMapper();  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getPrimaryMapper();	      filteredNextT    =    equations.getSecondaryMapper();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  filteredNextT  =  equations.getFirstMapper();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getFirstMapper();  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getFirstMapper();	      filteredNextT    =    equations.getSecondaryMapper();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  t);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  t);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y,  t);	  interpolator.storeTime(equations.getTime(),    y0,    t);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  stepStart,  t);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  stepStart,  t);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  stepStart,  t);	  interpolator.storeTime(equations.getTime(),    y0,    t);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  stepStart);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  stepStart);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y0,  stepStart);	  interpolator.storeTime(equations.getTime(),    y0,    t);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[stages][c.length  +  1];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  final  double[][]  b  =  new  double[stages][c.length  +  1];  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	final  double[][]  b  =  new  double[stages][c.length  +  1];	      final    double[][]    b    =    new    double[stages][y.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[stages][y.length];  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  final  double[][]  b  =  new  double[stages][y.length];  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	final  double[][]  b  =  new  double[stages][y.length];	      final    double[][]    b    =    new    double[stages][y.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[c.length  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  final  double[][]  b  =  new  double[c.length  +  1];  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	final  double[][]  b  =  new  double[c.length  +  1];	      final    double[][]    b    =    new    double[stages][y.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
20	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
21	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y,  stepStart,  t);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y,  stepStart,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
22	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  steps,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
23	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y,  t);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
24	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
25	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
26	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  stepStart,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y,  stepStart,  t);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
27	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  stages);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y,  stages);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y,  stages);	  interpolator.storeTime(equations.getTime(),    y);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  filteredNextT  =  equations.getSecondaryMapper();  isLastStep  =  false;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getSecondaryMapper();  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getSecondaryMapper();  isLastStep  =  false;	      filteredNextT    =    equations.getSecondaryMapper();    isLastStep    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  isLastStep  =  true;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	isLastStep  =  true;	      filteredNextT    =    equations.getSecondaryMapper();    isLastStep    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  filteredNextT  =  equations.getPrimaryMapper();  isLastStep  =  true;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getPrimaryMapper();  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getPrimaryMapper();  isLastStep  =  true;	      filteredNextT    =    equations.getSecondaryMapper();    isLastStep    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  filteredNextT  =  equations.getFirstMapper();  isLastStep  =  true;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getFirstMapper();  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getFirstMapper();  isLastStep  =  true;	      filteredNextT    =    equations.getSecondaryMapper();    isLastStep    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  stepStart,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
33	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  stepStart);  isLastStep  =  false;	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
34	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  steps,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  steps,  t);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  steps,  t);  isLastStep  =  false;	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
35	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y1,  t);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y1,  t);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y1,  t);	  interpolator.storeTime(equations.getTime(),    t);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  nextT  =  equations.getSecondaryMapper();  isLastStep  =  false;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  nextT  =  equations.getSecondaryMapper();  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	nextT  =  equations.getSecondaryMapper();  isLastStep  =  false;	      filteredNextT    =    equations.getSecondaryMapper();    isLastStep    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stages);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stages);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  stages);  isLastStep  =  false;	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
38	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  steps);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  steps);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  steps);  isLastStep  =  false;	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
39	[BUG]  [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  stages);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  interpolator.storeTime(equations.getTime(),  y0,  stages);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	interpolator.storeTime(equations.getTime(),  y0,  stages);	  interpolator.storeTime(equations.getTime(),    y0,    t);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[stages][y.length  +  2];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  final  double[][]  b  =  new  double[stages][y.length  +  2];  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	final  double[][]  b  =  new  double[stages][y.length  +  2];	      final    double[][]    b    =    new    double[stages][y.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  stages);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  stages);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
42	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  t,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y0,  t,  stages);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y0,  t,  stages);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
43	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
44	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
45	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stages);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
46	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
47	[BUG]  [BUGGY]  filteredNextT  =  equations.getSecondaryMapper()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getSecondaryMapper()  +  1;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getSecondaryMapper()  +  1;	      filteredNextT    =    equations.getSecondaryMapper();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  filteredNextT  =  equations.getSecondaryMapper(t);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getSecondaryMapper(t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getSecondaryMapper(t);	      filteredNextT    =    equations.getSecondaryMapper();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
49	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  y0,  stages);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
50	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  true;  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stages,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
51	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stages,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getTime(),  stages,  y0,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getTime(),  stages,  y0,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
52	[BUG]  [BUGGY]  filteredNextT  =  equations.getFirstSecondaryMapper();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  filteredNextT  =  equations.getFirstSecondaryMapper();  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	filteredNextT  =  equations.getFirstSecondaryMapper();	      filteredNextT    =    equations.getSecondaryMapper();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[stages][t.length  +  1];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  final  double[][]  b  =  new  double[stages][t.length  +  1];  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	final  double[][]  b  =  new  double[stages][t.length  +  1];	      final    double[][]    b    =    new    double[stages][y.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  stages,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  y  =  y0.clone();  final  int  stages  =  c.length  +  1;  final  double[][]  yDotK  =  new  double[stages][y.length];  final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());    [BUGGY]  initIntegration(equations.getPrimaryMapper(),  y,  stages,  t);  [BUGGY]    interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	initIntegration(equations.getPrimaryMapper(),  y,  stages,  t);	      initIntegration(equations.getPrimaryMapper(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
