projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScale();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.doubleValue();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScaleDimension();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getScale();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.min(stepStart,error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=false;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=true;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=getScale();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(relativeTolerance,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(stepStart);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScale(),error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScale()+error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScale(),error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScaleDimension()+error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScaleDimension(),error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScaleDimension()+1;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast&&firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast&&error){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,firstTime,filteredNextIsLast);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,stepStart,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,firstTime,scale);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(stepStart,error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=error.doubleValue();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.doubleValue()+error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.doubleValue(),error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(stepStart,error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(stepStart+error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(error,stepStart);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intk=Math.min(error,yDotTmp.length);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.max(error,yDotTmp.length);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233double[][]a=newdouble[mainSetDimension][1];
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.abs(error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.min(error,stepStart);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.min(stepStart,error,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.min(stepStart,error,1);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233doublemainSetDimension=getScale();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=getScale()-error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=getBase();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=getScale()+error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(error,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(error,nextIsLast);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||error){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(firstTime||filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||firstTime||error){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=null;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getScale()+error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getScale(),error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getScale(),error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast&&filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||filteredNextIsLast||firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||filteredNextIsFirstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&error<2){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&error<1){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&error<=maxGrowth){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(error,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(mainSetDimension,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(relativeTolerance,error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(mainSetDimension,error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,stepStart,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime,scale);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,secondTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime,stepStart);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=y.doubleValue();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=vecAbsoluteTolerance.doubleValue();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&firstTime<=error){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&firstTime<=Math.abs(error)){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.max(error,stepStart);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233double[][]vecAbsoluteTolerance=computeDerivatives(stepStart,y,yDotK[0]);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233double[][]vecAbsoluteTolerance=computeDerivatives(stepStart,error,yDotK[0]);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233double[][]vecAbsoluteTolerance=computeDerivatives(stepStart,error,yDotK[1]);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233double[][]vecAbsoluteTolerance=computeDerivatives(stepStart,y,yDotK[1]);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||filteredNextIsLast&&firstTime){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getScaleDimension()*factor;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime,vecAbsoluteTolerance);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime,filteredNextIsLast);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,nextIsLast);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(stepStart-error);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getGrowth();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextT.getScale()*error;
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.abs(error,secondTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=filteredNextIsLast.getGrowth();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=y.getScale();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233doublemainSetDimension=Math.min(relativeTolerance,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(variablesTolerance,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(filteredNextIsLast||firstTime||!fsal){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,secondTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,firstTime,vecAbsoluteTolerance);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,firstTime+1);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(error||filteredNextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.max(error,firstTime,mainSetDimension);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(error,yDotTmp.length);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(error,b.length);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextT=Math.min(error,steps);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(error){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=t.doubleValue();
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233filteredNextIsLast=Math.min(error,nextIsLast);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233if(!filteredNextIsLast&&error<=nextIsLast){
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233intmainSetDimension=Math.min(variables.length,firstTime);
projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java233finaldouble[][]scaledH=t.getScale();
