bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2	[BUG]  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
3	[BUG]  [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
4	[BUG]  [BUGGY]  hNew  =  initializeStep(nextT,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(nextT,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(nextT,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	  	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
6	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
7	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
8	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;		non-compiled	[CE]  illegal  start  of  expression	54	None	add
9	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
10	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
11	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  firstTime,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;		non-compiled	[CE]  illegal  start  of  expression	54	None	add
12	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(output,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(output,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(output,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
13	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(x0,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(x0,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(x0,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
14	[BUG]  [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
15	[BUG]  [BUGGY]  hNew  =  initializeStep(output,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(output,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(output,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
16	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
17	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
18	[BUG]  [BUGGY]    filteredNextT  =  initializeStep(step,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]    filteredNextT  =  initializeStep(step,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,        stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	    filteredNextT  =  initializeStep(step,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
19	[BUG]  [BUGGY]  hNew  =  initializeStep(nextT,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(nextT,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(nextT,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
20	[BUG]  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  steps,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  [BUGGY]  hNew  =  initializeStep(t,  getOrder(),  scale,  steps,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	hNew  =  initializeStep(t,  getOrder(),  scale,  steps,  y,  yDotK[0],  yTmp,  yDotK[1]);	hNew  =  initializeStep(forward,  getOrder(),  scale,    stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
