bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stepStart  =  equations.getStep()  /  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep()  /  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep()  /  1;	  stepStart    =    equations.getStep()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
2	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y0,  t);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
3	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y0);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
4	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yTmp);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  yTmp);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
5	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
6	[BUG]  [BUGGY]  nextIsLast  =  equations.getFirstTime();  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  nextIsLast  =  equations.getFirstTime();  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	nextIsLast  =  equations.getFirstTime();  isLastStep  =  false;	  nextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
7	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  stepStart);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  t,  stepStart);	  initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
8	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  isLastStep);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  t,  isLastStep);	  initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
9	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y2,  t);	  initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
10	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
11	[BUG]  [BUGGY]  stepStart  =  equations.getStep(y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(y0,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(y0,  t);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
12	[BUG]  [BUGGY]  stepStart  =  equations.getStep(step);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(step);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(step);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
13	[BUG]  [BUGGY]  stepStart  =  equations.getStep(y,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(y,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(y,  t);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
14	[BUG]  [BUGGY]  stepStart  =  equations.getStep(x,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(x,  y);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(x,  y);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
15	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper()  /  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper()  /  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper()  /  1;	  stepStart    =    equations.getSecondaryMapper()    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
16	[BUG]  [BUGGY]  isLastStep  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  isLastStep  =  null;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	isLastStep  =  null;	  isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
17	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  firstTime);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  isLastStep,  firstTime);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
18	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  isLastStep);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  isLastStep);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
19	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  firstTime,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  firstTime,  isLastStep);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  firstTime,  isLastStep);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
20	[BUG]  [BUGGY]  StepStart  =  equations.getTime()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  StepStart  =  equations.getTime()  -  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	StepStart  =  equations.getTime()  -  1;	  StepStart    =    equations.getTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
21	[BUG]  [BUGGY]  StepStart  =  equations.getTime()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  StepStart  =  equations.getTime()  +  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	StepStart  =  equations.getTime()  +  1;	  StepStart    =    equations.getTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
22	[BUG]  [BUGGY]  StepStart  =  equations.getTime()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  StepStart  =  equations.getTime()  /  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	StepStart  =  equations.getTime()  /  2;	  StepStart    =    equations.getTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
23	[BUG]  [BUGGY]  StepStart  =  equations.getTime()  -  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  StepStart  =  equations.getTime()  -  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	StepStart  =  equations.getTime()  -  2;	  StepStart    =    equations.getTime();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
24	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper()  /  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper()  /  2;	  stepStart    =    equations.getSecondaryMapper()    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
25	[BUG]  [BUGGY]  stepStart  =  equations.getTime()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getTime()  /  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getTime()  /  2;	  stepStart    =    equations.getTime()    /    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
26	[BUG]  [BUGGY]  stepStart  =  equations.getTime()  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getTime()  *  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getTime()  *  2;	  stepStart    =    equations.getTime()    *    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
27	[BUG]  [BUGGY]  stepStart  =  equations.getTime()  *  3;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getTime()  *  3;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getTime()  *  3;	  stepStart    =    equations.getTime()    *    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
28	[BUG]  [BUGGY]  stepStart  =  interpolator.getStep(equations);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  interpolator.getStep(equations);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  interpolator.getStep(equations);	  stepStart    =    equations.getStep(interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
29	[BUG]  [BUGGY]  stepStart  =  equations.getStep(y0,  interpolator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(y0,  interpolator);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(y0,  interpolator);	  stepStart    =    equations.getStep(interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
30	[BUG]  [BUGGY]  stepStart  =  equations.getStep(interpolator,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(interpolator,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(interpolator,  t);	  stepStart    =    equations.getStep(interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
31	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  error);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  error);	  initIntegration(equations.getTime(),    y0,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
33	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
34	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart,  isLastStep);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  stepStart,  isLastStep);	  initIntegration(equations.getTime(),    y0,    t,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
35	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart,  firstTime);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  stepStart,  firstTime);	  initIntegration(equations.getTime(),    y0,    t,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
36	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  doublehNew);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  doublehNew);	  initIntegration(equations.getTime(),    y0,    t,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
37	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
38	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
39	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
40	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
41	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y0;	  stepStart    =    equations.getSecondaryMapper(),    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
42	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0,  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y0,  t;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y0,  t;	  stepStart    =    equations.getSecondaryMapper(),    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
43	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yTmp;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yTmp;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  yTmp;	  stepStart    =    equations.getSecondaryMapper(),    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
44	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y;	  stepStart    =    equations.getSecondaryMapper(),    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
45	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);	  initIntegration(equations.getTime(),    y0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
46	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);	  initIntegration(equations.getTime(),    y0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
47	[BUG]  [BUGGY]  filteredNextIsLast  =  Equations.getFirstTime();  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  filteredNextIsLast  =  Equations.getFirstTime();  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	filteredNextIsLast  =  Equations.getFirstTime();  isLastStep  =  true;	  if(equations.getFirstTime()!=    null)    {    filteredNextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
48	[BUG]  [BUGGY]  stepStart  =  equations.getStep(0)  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(0)  +  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(0)  +  1;	  stepStart    =    equations.getStep(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
49	[BUG]  [BUGGY]  stepStart  =  equations.getStep(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(1);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(1);	  stepStart    =    equations.getStep(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
50	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
51	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    hNew);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
52	[BUG]  [BUGGY]  stepStart  =  equations.getStep(2);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(2);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(2);	  stepStart    =    equations.getStep(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
53	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y1,  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y1,  t;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y1,  t;	  stepStart    =    equations.getSecondaryMapper(),    t;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
54	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  secondTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  secondTime);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  isLastStep,  secondTime);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
55	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper()  +  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper()  +  2;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper()  +  2;	  stepStart    =    equations.getSecondaryMapper()    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
56	[BUG]  [BUGGY]  Integer  filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  Integer  filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	Integer  filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;	  if(equations.getFirstTime()!=    null)    {    filteredNextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
57	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  false;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y2,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
58	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  doublehNew);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  doublehNew);	  initIntegration(equations.getTime(),    y0,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
59	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  y0,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  x,  y0,  doublehNew);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  x,  y0,  doublehNew);	  initIntegration(equations.getTime(),    y0,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
60	[BUG]  [BUGGY]  stepStart  =  equations.getStep(x0,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(x0,  y0);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(x0,  y0);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
61	[BUG]  [BUGGY]  stepStart  =  equations.getStep(interpolator,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(interpolator,  y0);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(interpolator,  y0);	  stepStart    =    equations.getStep(interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
62	[BUG]  [BUGGY]  stepStart  =  equations.getStep(interpolator,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(interpolator,  yTmp);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(interpolator,  yTmp);	  stepStart    =    equations.getStep(interpolator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
63	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  hNew);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    hNew);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
64	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y1,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  y1,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  y1,  t);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
65	[BUG]  [BUGGY]  StepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  StepStart  =  equations.getSecondaryMapper();  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	StepStart  =  equations.getSecondaryMapper();	  stepStart    =    equations.getSecondaryMapper()    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
66	[BUG]  [BUGGY]  stepStart  =  equations.getStep(step,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(step,  t);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(step,  t);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
67	[BUG]  [BUGGY]  stepStart  =  equations.getStep(t,  y0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(t,  y0);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(t,  y0);	  stepStart    =    equations.getStep(t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
68	[BUG]  [BUGGY]  areLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  areLastStep  =  true;  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	areLastStep  =  true;	  isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
69	[BUG]  [BUGGY]  if(equations.getFirstTime()!=  null)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  if(equations.getFirstTime()!=  null)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	if(equations.getFirstTime()!=  null)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }	  nextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
70	[BUG]  [BUGGY]  if(isLastStep)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  if(isLastStep)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	if(isLastStep)  {  nextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }	  nextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
71	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  stepStart);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  isLastStep,  stepStart);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
72	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  input);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  isLastStep,  input);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y0,  t,  isLastStep,  input);	  initIntegration(equations.getTime(),    y0,    t,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
73	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper().length  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper().length  -  1;  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper().length  -  1;	  stepStart    =    equations.getSecondaryMapper()    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
74	[BUG]  [BUGGY]  stepStart  =  equations.getStep(step1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getStep(step1);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getStep(step1);	  stepStart    =    equations.getStep(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
75	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yNode);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  stepStart  =  equations.getSecondaryMapper(),  yNode);  [BUGGY]      doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	stepStart  =  equations.getSecondaryMapper(),  yNode);	  stepStart    =    equations.getSecondaryMapper(),    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
76	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  initIntegration(equations.getTime(),  y1,  t,  a);  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	initIntegration(equations.getTime(),  y1,  t,  a);	  initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
77	[BUG]  [BUGGY]  filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  yTmp=  y0.clone();  final  double[]  yDotTmp  =  new  double[y.length];  final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());        [BUGGY]  filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }  [BUGGY]      stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	filteredNextIsLast  =  equations.getFirstTime();  isLastStep  =  true;  }	  if(equations.getFirstTime()!=    null)    {    filteredNextIsLast    =    equations.getFirstTime();    isLastStep    =    true;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
