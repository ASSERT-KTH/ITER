bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  2;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	33	None	replace
2	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  3;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  3;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  +  3;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	33	None	replace
3	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  1;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	33	None	replace
4	[BUG]  [BUGGY]  double  k  =(j  <  y0.length)?  1  :  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  <  y0.length)?  1  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  <  y0.length)?  1  :  0;	  double    k    =(j    <    y0.length)?    0    :    0;    	non-compiled	[CE]  ';'  expected	68	None	replace
5	[BUG]  [BUGGY]  double  k  =(j  <  y0.length)?  0  :  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  <  y0.length)?  0  :  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  <  y0.length)?  0  :  1;	  double    k    =(j    <    y0.length)?    0    :    0;    	non-compiled	[CE]  ';'  expected	68	None	replace
6	[BUG]  [BUGGY]  double  k  =(j  <  0)?  0  :  0;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  <  0)?  0  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  <  0)?  0  :  0;	  double    k    =(j    <    y0.length)?    0    :    0;    	non-compiled	[CE]  ';'  expected	68	None	replace
7	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  i  =  1;  i  <  y0.length;  ++i)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  1)  {  for(int  i  =  1;  i  <  y0.length;  ++i)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  1)  {  for(int  i  =  1;  i  <  y0.length;  ++i)  {  return;  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
8	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  throw  new  IllegalArgumentException( " ");  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  int  k  =(j  +  1)*  stageSize[1];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)*  stageSize[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)*  stageSize[1];	  int    k    =(y0.length    +    1)*    stageSize[1];    	non-compiled	[CE]  ';'  expected	27	None	replace
11	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stageSize[0];  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stageSize[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stageSize[0];	  int    k    =(y0.length    +    1)*    stageSize[1];    	non-compiled	[CE]  ';'  expected	27	None	replace
12	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stageSize[2];  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stageSize[2];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stageSize[2];	  int    k    =(y0.length    +    1)*    stageSize[1];    	non-compiled	[CE]  ';'  expected	27	None	replace
13	[BUG]  [BUGGY]  int  k  =(j  +  2)*  stages[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  2)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  2)*  stages[0];	  int    k    =(y0.length    +    2)*    stages[0];    	non-compiled	[CE]  ';'  expected	45	None	replace
14	[BUG]  [BUGGY]  int  k  =(y0.length  +  2)*  stages[1];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  2)*  stages[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  2)*  stages[1];	  int    k    =(y0.length    +    2)*    stages[0];    	non-compiled	[CE]  ';'  expected	45	None	replace
15	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2];	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
16	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1];	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
17	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  3];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  3];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  3];	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
18	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1]  +  1;	  double    sum    =    a[k-1][0]    *    yDotK[1];    	non-compiled	[CE]  ';'  expected	23	None	replace
19	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[1];	  double    sum    =    a[k-1][0]    *    yDotK[1];    	non-compiled	[CE]  ';'  expected	23	None	replace
20	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  2;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1]  +  2;	  double    sum    =    a[k-1][0]    *    yDotK[1];    	non-compiled	[CE]  ';'  expected	23	None	replace
21	[BUG]  [BUGGY]  int  k  =  j  +  stages.length;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j  +  stages.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j  +  stages.length;	  int    k    =    stages.length;    	non-compiled	[CE]  ';'  expected	57	None	replace
22	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
23	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
24	[BUG]  [BUGGY]  int  k  =  j  -  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j  -  1;	  int    k    =    y0.length    -    1;    	non-compiled	[CE]  ';'  expected	30	None	replace
25	[BUG]  [BUGGY]  int  k  =  j.length  -  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j.length  -  1;	  int    k    =    y0.length    -    1;    	non-compiled	[CE]  ';'  expected	30	None	replace
26	[BUG]  [BUGGY]  int  k  =  y0.length  -  2;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  y0.length  -  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  y0.length  -  2;	  int    k    =    y0.length    -    1;    	non-compiled	[CE]  ';'  expected	30	None	replace
27	[BUG]  [BUGGY]  int  k  =(j  +  1)/  stages[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)/  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)/  stages[0];	  int    k    =(j    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  int  k  =(j  +  1)/  stageSize;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)/  stageSize;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)/  stageSize;	  int    k    =(j    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  int  k  =(j  +  1)*  stages[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)*  stages[0];	  int    k    =(y0.length    +    1)*    stages[0];    	non-compiled	[CE]  ';'  expected	47	None	replace
30	[BUG]  [BUGGY]  double  k  =  Math.abs(j  +  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(j  +  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(j  +  1);	  double    k    =    Math.abs(y0.length    +    1);    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  int  k  =(j  +  1)*  stages[1];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)*  stages[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)*  stages[1];	  int    k    =(j    +    1)*    yDotK[1];    	non-compiled	[CE]  ';'  expected	25	None	replace
32	[BUG]  [BUGGY]  int  k  =(j  +  1)*  stageSize;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)*  stageSize;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)*  stageSize;	  int    k    =(j    +    1)*    yDotK[1];    	non-compiled	[CE]  ';'  expected	25	None	replace
33	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
34	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
35	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
36	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
37	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
38	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
39	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
40	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
41	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
42	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
43	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
44	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
45	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  1;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  ';'  expected	50	None	replace
46	[BUG]  [BUGGY]  int  k  =  0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  0;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
47	[BUG]  [BUGGY]  int  k  =  1  <  <  stageSize?  stages[k]  :  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1  <  <  stageSize?  stages[k]  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1  <  <  stageSize?  stages[k]  :  0;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
48	[BUG]  [BUGGY]  int  k  =  2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  2;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
49	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  hNew.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
51	[BUG]  [BUGGY]  double  k  =  y0.length  /  2;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  y0.length  /  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  y0.length  /  2;	  double    k    =    y0.length    /    1;    	non-compiled	[CE]  ';'  expected	37	None	replace
52	[BUG]  [BUGGY]  double  k  =  j  /  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j  /  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j  /  1;	  double    k    =    y0.length    /    1;    	non-compiled	[CE]  ';'  expected	37	None	replace
53	[BUG]  [BUGGY]  double  k  =  j.length  /  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j.length  /  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j.length  /  1;	  double    k    =    y0.length    /    1;    	non-compiled	[CE]  ';'  expected	37	None	replace
54	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
55	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
56	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
57	[BUG]  [BUGGY]  double  sum  =  a[k-1][2]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][2]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][2]  *  yDotK[1][j];	  double    sum    =    a[k-1][2]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	97	None	replace
58	[BUG]  [BUGGY]  double  sum  =  a[k-1][2]  *  yDotK[0][1];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][2]  *  yDotK[0][1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][2]  *  yDotK[0][1];	  double    sum    =    a[k-1][2]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	97	None	replace
59	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1;	  double    sum    =    y[k-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	67	None	replace
60	[BUG]  [BUGGY]  double  sum  =  y[0][0]  *  yDotK[0][1];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[0][0]  *  yDotK[0][1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[0][0]  *  yDotK[0][1];	  double    sum    =    y[k-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	67	None	replace
61	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
62	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
63	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
64	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  2;	  double    sum    =    a[k-1][0]    *    yDotK[0][j]    /    1;    	non-compiled	[CE]  ';'  expected	89	None	replace
65	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  3;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  3;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  3;	  double    sum    =    a[k-1][0]    *    yDotK[0][j]    /    1;    	non-compiled	[CE]  ';'  expected	89	None	replace
66	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  4;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  4;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][j]  /  4;	  double    sum    =    a[k-1][0]    *    yDotK[0][j]    /    1;    	non-compiled	[CE]  ';'  expected	89	None	replace
67	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
68	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
69	[BUG]  [BUGGY]  double  sum  =  y[k-1][1]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][1]  *  yDotK[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][1]  *  yDotK[0][j]  +  1;	  double    sum    =    y[k-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	61	None	replace
70	[BUG]  [BUGGY]  double  sum  =  y[0][1]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[0][1]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[0][1]  *  yDotK[0][j];	  double    sum    =    y[k-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	61	None	replace
71	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  1;	  double    sum    =    y[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	64	None	replace
72	[BUG]  [BUGGY]  double  sum  =  y[0][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[0][0]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[0][0]  *  yDotK[1][j];	  double    sum    =    y[k-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	64	None	replace
73	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stages[2];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stages[2];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stages[2];	  int    k    =(y0.length    +    1)*    stages[1];    	non-compiled	[CE]  ';'  expected	26	None	replace
74	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
75	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
76	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
77	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
78	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stages[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stages[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stages[1];	  int    k    =(y0.length    +    1)/    stages[0];    	non-compiled	[CE]  ';'  expected	1	None	replace
79	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stageSize[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stageSize[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stageSize[0];	  int    k    =(y0.length    +    1)/    stages[0];    	non-compiled	[CE]  ';'  expected	1	None	replace
80	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stages[2];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stages[2];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stages[2];	  int    k    =(y0.length    +    1)/    stages[0];    	non-compiled	[CE]  ';'  expected	1	None	replace
81	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(y0,  error);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(y0,  error);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(y0,  error);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
82	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(j,  error);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(j,  error);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(j,  error);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
83	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  j);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  j);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
84	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  error,  stage);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  error,  stage);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  error,  stage);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
85	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  k,  1),  ';');  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  k,  1),  ';');  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  k,  1),  ';');	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
86	[BUG]  [BUGGY]  Context.reportError(t);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.reportError(t);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.reportError(t);	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
87	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  j,  k),  error);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  j,  k),  error);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  j,  k),  error);	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
88	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stages;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stages;	  int    k    =(y0.length    +    1)/    stageSize;    	non-compiled	[CE]  ';'  expected	3	None	replace
89	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stepSize;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stepSize;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stepSize;	  int    k    =(y0.length    +    1)/    stageSize;    	non-compiled	[CE]  ';'  expected	3	None	replace
90	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)/  stageSize  +  1;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)/  stageSize  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)/  stageSize  +  1;	  int    k    =(y0.length    +    1)/    stageSize;    	non-compiled	[CE]  ';'  expected	3	None	replace
91	[BUG]  [BUGGY]  double  k  =  Math.min(stepSize,  y0.length);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.min(stepSize,  y0.length);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.min(stepSize,  y0.length);	  double    k    =    Math.abs(stepSize);    	non-compiled	[CE]  ';'  expected	99	None	replace
92	[BUG]  [BUGGY]  double  k  =  Math.abs(stepSize  -  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(stepSize  -  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(stepSize  -  1);	  double    k    =    Math.abs(stepSize);    	non-compiled	[CE]  ';'  expected	99	None	replace
93	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
94	[BUG]  [BUGGY]  int  k  =(int)(y0.length  +  1)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(y0.length  +  1)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(y0.length  +  1)*  yDotK[0];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
95	[BUG]  [BUGGY]  int  k  =(int)(j  +  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(j  +  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(j  +  2)*  yDotK[0];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
96	[BUG]  [BUGGY]  int  k  =(int)(y0.length  +  2)*  yDotK[1];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(y0.length  +  2)*  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(y0.length  +  2)*  yDotK[1];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
97	[BUG]  [BUGGY]  int  k  =(int)(y0.length  +  2)*  stages[0];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(y0.length  +  2)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(y0.length  +  2)*  stages[0];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
98	[BUG]  [BUGGY]  double  k  =  Math.abs(j  -  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(j  -  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(j  -  1);	  double    k    =    Math.abs(j);    	non-compiled	[CE]  ';'  expected	9	None	replace
99	[BUG]  [BUGGY]  double  k  =  Math.min(y0.length,  j);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.min(y0.length,  j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.min(y0.length,  j);	  double    k    =    Math.abs(j);    	non-compiled	[CE]  ';'  expected	9	None	replace
100	[BUG]  [BUGGY]  if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize!=    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
101	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize!=    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
102	[BUG]  [BUGGY]  if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j!=  1)  {  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }	  if(stepSize!=    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
103	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
104	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
105	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
106	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
107	[BUG]  [BUGGY]  int  k  =(j  *  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  *  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  *  2)*  yDotK[0];	  int    k    =(y0.length    *    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	65	None	replace
108	[BUG]  [BUGGY]  int  k  =(y0.length  *  2)*  yDotK[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  *  2)*  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  *  2)*  yDotK[1];	  int    k    =(y0.length    *    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	65	None	replace
109	[BUG]  [BUGGY]  int  k  =(y0.length  /  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  /  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  /  2)*  yDotK[0];	  int    k    =(y0.length    *    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	65	None	replace
110	[BUG]  [BUGGY]  int  k  =(y0.length  *  2)*  stages[0];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  *  2)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  *  2)*  stages[0];	  int    k    =(y0.length    *    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	65	None	replace
111	[BUG]  [BUGGY]  double  k  =  Math.min(y0.length,  stages.length);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.min(y0.length,  stages.length);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.min(y0.length,  stages.length);	  double    k    =    Math.abs(stages.length);    	non-compiled	[CE]  ';'  expected	98	None	replace
112	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stages;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stages;	  int    k    =(y0.length    +    1)*    stageSize;    	non-compiled	[CE]  ';'  expected	48	None	replace
113	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stageSize  +  1;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stageSize  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stageSize  +  1;	  int    k    =(y0.length    +    1)*    stageSize;    	non-compiled	[CE]  ';'  expected	48	None	replace
114	[BUG]  [BUGGY]  double  k  =  j  -  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j  -  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j  -  2;	  double    k    =    j    -    1;    	non-compiled	[CE]  ';'  expected	36	None	replace
115	[BUG]  [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  2;	  double    sum    =    a[k-1][1]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	34	None	replace
116	[BUG]  [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  3;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  3;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  3;	  double    sum    =    a[k-1][1]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	34	None	replace
117	[BUG]  [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  4;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  4;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][1]  *  yDotK[0][j]  +  4;	  double    sum    =    a[k-1][1]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	34	None	replace
118	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
119	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
120	[BUG]  [BUGGY]  int  k  =  j.length  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j.length  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j.length  +  1;	  int    k    =    j.length;    	non-compiled	[CE]  ';'  expected	28	None	replace
121	[BUG]  [BUGGY]  int  k  =  j.length  -  2;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j.length  -  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j.length  -  2;	  int    k    =    j.length;    	non-compiled	[CE]  ';'  expected	28	None	replace
122	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stepSize;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
123	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stepSize;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
124	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stepSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stepSize;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
125	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  /  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  /  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  /  1);	  double    k    =    Math.abs(y0.length    -    1);    	non-compiled	[CE]  ';'  expected	7	None	replace
126	[BUG]  [BUGGY]  double  k  =  j  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j  +  1;	  double    k    =    j;    	non-compiled	[CE]  ';'  expected	6	None	replace
127	[BUG]  [BUGGY]  double  k  =  t;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t;	  double    k    =    j;    	non-compiled	[CE]  ';'  expected	6	None	replace
128	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
129	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yDotK[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][1]  *  yDotK[0][j]  +  1;	  double    sum    =    a[y0.length-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	35	None	replace
130	[BUG]  [BUGGY]  double  sum  =  y0.length-1][1]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y0.length-1][1]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y0.length-1][1]  *  yDotK[0][j];	  double    sum    =    a[y0.length-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	35	None	replace
131	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yTmp[0][j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yTmp[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][1]  *  yTmp[0][j];	  double    sum    =    a[y0.length-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	35	None	replace
132	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
133	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
134	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
135	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
136	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stageSize;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
137	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
138	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
139	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
140	[BUG]  [BUGGY]  filteredNextIsLast  =  null;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  filteredNextIsLast  =  null;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	filteredNextIsLast  =  null;	  filteredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	18	None	replace
141	[BUG]  [BUGGY]  double  k  =  j.length  -  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j.length  -  1;	  double    k    =    j.length;    	non-compiled	[CE]  ';'  expected	40	None	replace
142	[BUG]  [BUGGY]  double  k  =  j.length  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j.length  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j.length  +  1;	  double    k    =    j.length;    	non-compiled	[CE]  ';'  expected	40	None	replace
143	[BUG]  [BUGGY]  double  k  =  j.length  -  2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j.length  -  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j.length  -  2;	  double    k    =    j.length;    	non-compiled	[CE]  ';'  expected	40	None	replace
144	[BUG]  [BUGGY]  filteredNextIsLast  =  filteredNextIsLast;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  filteredNextIsLast  =  filteredNextIsLast;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	filteredNextIsLast  =  filteredNextIsLast;	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
145	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  2;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    2;    	non-compiled	[CE]  ';'  expected	51	None	replace
146	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
147	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
148	[BUG]  [BUGGY]  if(j!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
149	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
150	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize!=  1)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize!=  1)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize!=  1)  {  return;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
151	[BUG]  [BUGGY]  double  sum  =  error  *  a[k-1][0]  *  yDotK[0][1]  +  k;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  error  *  a[k-1][0]  *  yDotK[0][1]  +  k;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  error  *  a[k-1][0]  *  yDotK[0][1]  +  k;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
152	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  k;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  k;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  k;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
153	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  j;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  j;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  j;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
154	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
155	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
156	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
157	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][k];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][k];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[1][k];	  double    sum    =    a[y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	32	None	replace
158	[BUG]  [BUGGY]  double  k  =  t.length  -  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t.length  -  1;	  double    k    =    t.length;    	non-compiled	[CE]  ';'  expected	41	None	replace
159	[BUG]  [BUGGY]  double  k  =  t.length  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t.length  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t.length  +  1;	  double    k    =    t.length;    	non-compiled	[CE]  ';'  expected	41	None	replace
160	[BUG]  [BUGGY]  double  k  =  t.length  /  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t.length  /  2;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t.length  /  2;	  double    k    =    t.length;    	non-compiled	[CE]  ';'  expected	41	None	replace
161	[BUG]  [BUGGY]  int  k  =  j  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  j  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  j  +  1;	  int    k    =    j;    	non-compiled	[CE]  ';'  expected	29	None	replace
162	[BUG]  [BUGGY]  int  k  =(j  +  2)*  yDotK[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  2)*  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  2)*  yDotK[1];	  int    k    =(y0.length    +    2)*    yDotK[1];    	non-compiled	[CE]  ';'  expected	44	None	replace
163	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
164	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
165	[BUG]  [BUGGY]  int  stepSize  =  j;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  j;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  j;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
166	[BUG]  [BUGGY]  int  stepSize  =  y0.length;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  y0.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  y0.length;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
167	[BUG]  [BUGGY]  int  stepSize  =  k;  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  k;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  k;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
168	[BUG]  [BUGGY]  int  stepSize  =  hNew  +  1;  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  hNew  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  hNew  +  1;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
169	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[j]);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[j]);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[j]);	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
170	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[0]);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[0]);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  stepStart,  x.length,  yDotK[0]);	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
171	[BUG]  [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[1][j]  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[1][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y0.length-1][0]  *  yDotK[1][j]  +  1;	  double    sum    =    y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	56	None	replace
172	[BUG]  [BUGGY]  double  sum  =  y0.length-1][0]  *  a[1][j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y0.length-1][0]  *  a[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y0.length-1][0]  *  a[1][j];	  double    sum    =    y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	56	None	replace
173	[BUG]  [BUGGY]  char  k  =  j.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  char  k  =  j.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	char  k  =  j.length;	  char    k    =    y0.length;    	non-compiled	[CE]  ';'  expected	31	None	replace
174	[BUG]  [BUGGY]  char  k  =  j;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  char  k  =  j;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	char  k  =  j;	  char    k    =    y0.length;    	non-compiled	[CE]  ';'  expected	31	None	replace
175	[BUG]  [BUGGY]  String  k  =  y0.length;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  String  k  =  y0.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	String  k  =  y0.length;	  char    k    =    y0.length;    	non-compiled	[CE]  ';'  expected	31	None	replace
176	[BUG]  [BUGGY]  char  k  =  y0.length  -  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  char  k  =  y0.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	char  k  =  y0.length  -  1;	  char    k    =    y0.length;    	non-compiled	[CE]  ';'  expected	31	None	replace
177	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  filteredNextIsLast  =  hNew;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	filteredNextIsLast  =  hNew;	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
178	[BUG]  [BUGGY]  double  k  =  1)  {  yDotK[1]  =  y0.length;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1)  {  yDotK[1]  =  y0.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1)  {  yDotK[1]  =  y0.length;	  double    k    =    1)    {    yDotK[1]    =    j;    	non-compiled	[CE]  ';'  expected	93	None	replace
179	[BUG]  [BUGGY]  double  k  =  1)  {  yDotK[1]  =  y0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1)  {  yDotK[1]  =  y0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1)  {  yDotK[1]  =  y0;	  double    k    =    1)    {    yDotK[1]    =    j;    	non-compiled	[CE]  ';'  expected	93	None	replace
180	[BUG]  [BUGGY]  double  k  =  1  <  <  yDotK[1]  =  j;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1  <  <  yDotK[1]  =  j;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1  <  <  yDotK[1]  =  j;	  double    k    =    1)    {    yDotK[1]    =    j;    	non-compiled	[CE]  ';'  expected	93	None	replace
181	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
182	[BUG]  [BUGGY]  if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
183	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
184	[BUG]  [BUGGY]  if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
185	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
186	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
187	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
188	[BUG]  [BUGGY]  double  k  =(j  ==  0)?  1  :  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  ==  0)?  1  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  ==  0)?  1  :  0;	  double    k    =(j    ==    0)?    0    :    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
189	[BUG]  [BUGGY]  double  k  =(j  ==  0)?  0  :  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  ==  0)?  0  :  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  ==  0)?  0  :  1;	  double    k    =(j    ==    0)?    0    :    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
190	[BUG]  [BUGGY]  double  k  =(j  >  0)?  0  :  0;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  >  0)?  0  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  >  0)?  0  :  0;	  double    k    =(j    ==    0)?    0    :    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
191	[BUG]  [BUGGY]  k  =  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  k  =  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	k  =  0;	  double    k    =    2;    	non-compiled	[CE]  ';'  expected	5	None	replace
192	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j]  +  2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][j]  +  2;	  double    sum    =    y[k-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	55	None	replace
193	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j]  /  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][j]  /  1;	  double    sum    =    y[k-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	55	None	replace
194	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  /  2);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  /  2);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  /  2);	  double    k    =    Math.abs(y0.length    -    2);    	non-compiled	[CE]  ';'  expected	10	None	replace
195	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  error;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[1][j]  +  error;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    error;    	non-compiled	[CE]  ';'  expected	84	None	replace
196	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  k;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  k;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  k;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    error;    	non-compiled	[CE]  ';'  expected	84	None	replace
197	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
198	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y1.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y1.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y1.length;  ++k)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
199	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  1;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
200	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  k;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  k;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  k;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
201	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  2;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1;    	non-compiled	[CE]  ';'  expected	22	None	replace
202	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1;    	non-compiled	[CE]  ';'  expected	22	None	replace
203	[BUG]  [BUGGY]  int  k  =(i  +  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(i  +  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(i  +  2)*  yDotK[0];	  int    k    =(j    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	43	None	replace
204	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
205	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
206	[BUG]  [BUGGY]  double  sum  =  y[y0.length-1][1]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[y0.length-1][1]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[y0.length-1][1]  *  yDotK[0][j];	  double    sum    =    a[y0.length-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	35	None	replace
207	[BUG]  [BUGGY]  double  k  =  Math.abs(stages.length  -  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(stages.length  -  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(stages.length  -  1);	  double    k    =    Math.abs(stages.length);    	non-compiled	[CE]  ';'  expected	98	None	replace
208	[BUG]  [BUGGY]  double  k  =  Math.abs(stages.length  +  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(stages.length  +  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(stages.length  +  1);	  double    k    =    Math.abs(stages.length);    	non-compiled	[CE]  ';'  expected	98	None	replace
209	[BUG]  [BUGGY]  double  k  =  1  <  <  stageSize?  stages[1]  :  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1  <  <  stageSize?  stages[1]  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1  <  <  stageSize?  stages[1]  :  0;	  double    k    =    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
210	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
211	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
212	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
213	[BUG]  [BUGGY]  double  k  =  t.length  -  stages;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t.length  -  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t.length  -  stages;	  double    k    =    t.length;    	non-compiled	[CE]  ';'  expected	41	None	replace
214	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  -  1  +  j);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  -  1  +  j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  -  1  +  j);	  double    k    =    Math.abs(y0.length    -    1);    	non-compiled	[CE]  ';'  expected	7	None	replace
215	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
216	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
217	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
218	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  error;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[1][j]  +  error;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    error;    	non-compiled	[CE]  ';'  expected	84	None	replace
219	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  1);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  y,  stages,  1);	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
220	[BUG]  [BUGGY]  double  k  =  y0.length  -  2  +  stages;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  y0.length  -  2  +  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  y0.length  -  2  +  stages;	  double    k    =    y0.length    -    2;    	non-compiled	[CE]  ';'  expected	38	None	replace
221	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
222	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
223	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);  firstTime  =  t;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);  firstTime  =  t;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  y,  stages,  error);  firstTime  =  t;	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	91	None	replace
224	[BUG]  [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[0][1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[0][1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y0.length-1][0]  *  yDotK[0][1];	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
225	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  2;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  2;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  2;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
226	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stages[1]  +  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stages[1]  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stages[1]  +  1;	  int    k    =(y0.length    +    1)*    stages[1];    	non-compiled	[CE]  ';'  expected	26	None	replace
227	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0];	  double    sum    =    a[k-1][0]    *    yDotK[1];    	non-compiled	[CE]  ';'  expected	23	None	replace
228	[BUG]  [BUGGY]  int  k  =(y0  +  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0  +  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0  +  2)*  yDotK[0];	  int    k    =(j    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	43	None	replace
229	[BUG]  [BUGGY]  Integer  y0  =(Integer)steps.get(j);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  y0  =(Integer)steps.get(j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Integer  y0  =(Integer)steps.get(j);	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
230	[BUG]  [BUGGY]  Integer  y0  =(Integer)stages.get(j);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  y0  =(Integer)stages.get(j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Integer  y0  =(Integer)stages.get(j);	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
231	[BUG]  [BUGGY]  Integer  y0  =  createInteger(j);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  y0  =  createInteger(j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Integer  y0  =  createInteger(j);	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
232	[BUG]  [BUGGY]  Integer  y0  =(Integer)steps.get(k);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Integer  y0  =(Integer)steps.get(k);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Integer  y0  =(Integer)steps.get(k);	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
233	[BUG]  [BUGGY]  double  k  =  2  +  stages;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  2  +  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  2  +  stages;	  double    k    =    2;    	non-compiled	[CE]  ';'  expected	5	None	replace
234	[BUG]  [BUGGY]  int  k  =(y0  +  1)*  yDotK[0];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0  +  1)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0  +  1)*  yDotK[0];	  int    k    =(j    +    1)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	46	None	replace
235	[BUG]  [BUGGY]  int  stepSize  =  hNew  +  stages;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  hNew  +  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  hNew  +  stages;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
236	[BUG]  [BUGGY]  double  k  =(j  ==  0)?  stages[1]  :  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  ==  0)?  stages[1]  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  ==  0)?  stages[1]  :  0;	  double    k    =(j    ==    0)?    0    :    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
237	[BUG]  [BUGGY]  int  k  =(stageSize  +  1)*  y0[1];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stageSize  +  1)*  y0[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stageSize  +  1)*  y0[1];	  int    k    =(y0.length    +    1)*    stageSize[1];    	non-compiled	[CE]  ';'  expected	27	None	replace
238	[BUG]  [BUGGY]  int  k  =(stages  +  1)*  stageSize[1];  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages  +  1)*  stageSize[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages  +  1)*  stageSize[1];	  int    k    =(y0.length    +    1)*    stageSize[1];    	non-compiled	[CE]  ';'  expected	27	None	replace
239	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  continue;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  continue;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  continue;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
240	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  break;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
241	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  return	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
242	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
243	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
244	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
245	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(error,  y0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(error,  y0);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(error,  y0);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
246	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
247	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
248	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
249	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  a.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  a.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  a.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
250	[BUG]  [BUGGY]  int  k  =(stages  +  1)/  yDotK[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages  +  1)/  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages  +  1)/  yDotK[1];	  int    k    =(stages    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	75	None	replace
251	[BUG]  [BUGGY]  int  k  =(stages  +  1)/  yDotK[0]  +  1;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages  +  1)/  yDotK[0]  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages  +  1)/  yDotK[0]  +  1;	  int    k    =(stages    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	75	None	replace
252	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  hNew.length;  ++k)  {	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
253	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  0;  x  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  0;  x  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  x  =  0;  x  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
254	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  x  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
255	[BUG]  [BUGGY]  int  k  =(y0  +  1)/  yDotK[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0  +  1)/  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0  +  1)/  yDotK[0];	  int    k    =(j    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	2	None	replace
256	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  0.length;  ++k)  {  return;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
257	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
258	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
259	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  k));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  k));  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  k));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
260	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  j));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  j));  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  j));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
261	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j));  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  k,  j));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
262	[BUG]  [BUGGY]  int  k  =(stageSize  +  1)/  y0;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stageSize  +  1)/  y0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stageSize  +  1)/  y0;	  int    k    =(y0.length    +    1)/    stageSize;    	non-compiled	[CE]  ';'  expected	3	None	replace
263	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
264	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
265	[BUG]  [BUGGY]  int  k  =  1  <  <  stageSize?  stages  :  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1  <  <  stageSize?  stages  :  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1  <  <  stageSize?  stages  :  1;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
266	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
267	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
268	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
269	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
270	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
271	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][j];	  double    sum    =    y[k-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	61	None	replace
272	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
273	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  1];	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
274	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  -  3);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  -  3);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  -  3);	  double    k    =    Math.abs(y0.length    -    2);    	non-compiled	[CE]  ';'  expected	10	None	replace
275	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stages[0]  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stages[0]  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stages[0]  +  1;	  int    k    =(y0.length    +    1)*    stages[0];    	non-compiled	[CE]  ';'  expected	47	None	replace
276	[BUG]  [BUGGY]  double  sum  =  a.length-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a.length-1][0]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a.length-1][0]  *  yDotK[1][j];	  double    sum    =    y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	56	None	replace
277	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  break;  }	  if(stepSize    <    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
278	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  continue;  }	  if(stepSize    <    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
279	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
280	[BUG]  [BUGGY]  double  k  =  y0.length  /  3;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  y0.length  /  3;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  y0.length  /  3;	  double    k    =    y0.length    /    1;    	non-compiled	[CE]  ';'  expected	37	None	replace
281	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
282	[BUG]  [BUGGY]  int  k  =(int)(y0.length  *  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(y0.length  *  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(y0.length  *  2)*  yDotK[0];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
283	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
284	[BUG]  [BUGGY]  double  k  =  1)  {  yDotK[0]  =  yDotK[1];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1)  {  yDotK[0]  =  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1)  {  yDotK[0]  =  yDotK[1];	  double    k    =    1)    {    yDotK[1]    =    j;    	non-compiled	[CE]  ';'  expected	93	None	replace
285	[BUG]  [BUGGY]  double  sum  =  y[y0.length-1][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[y0.length-1][0]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[y0.length-1][0]  *  yDotK[1][j];	  double    sum    =    a[y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	32	None	replace
286	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  x  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
287	[BUG]  [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[0][j]  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y0.length-1][0]  *  yDotK[0][j]  +  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y0.length-1][0]  *  yDotK[0][j]  +  1;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	33	None	replace
288	[BUG]  [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  error;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  y[k-1][0]  *  yDotK[0][1]  +  error;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
289	[BUG]  [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][1]  +  error;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][1]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][1]  *  yDotK[0][1]  +  error;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
290	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
291	[BUG]  [BUGGY]  int  k  =(y0  +  1)*  stages[0];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0  +  1)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0  +  1)*  stages[0];	  int    k    =(stages    +    1)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	76	None	replace
292	[BUG]  [BUGGY]  double  k  =  Math.abs(y0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0);	  double    k    =    Math.abs(j);    	non-compiled	[CE]  ';'  expected	9	None	replace
293	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  /  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][j]  /  1;	  double    sum    =    a[k-1][0]    *    yDotK[0][j]    /    1;    	non-compiled	[CE]  ';'  expected	89	None	replace
294	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
295	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
296	[BUG]  [BUGGY]  double  k  =  stages.length  -  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  stages.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  stages.length  -  1;	  double    k    =    stages.length;    	non-compiled	[CE]  ';'  expected	66	None	replace
297	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
298	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
299	[BUG]  [BUGGY]  double  k  =  1  <  <  stageSize?  stages[k]  :  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1  <  <  stageSize?  stages[k]  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1  <  <  stageSize?  stages[k]  :  0;	  double    k    =    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
300	[BUG]  [BUGGY]  double  k  =  1  <  <  stageSize?  stages[j]  :  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1  <  <  stageSize?  stages[j]  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1  <  <  stageSize?  stages[j]  :  0;	  double    k    =    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
301	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j,  y0.length));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j,  y0.length));  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  k,  j,  y0.length));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
302	[BUG]  [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j,  hNew));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  Context.report(JSError.make(t,  y0,  k,  j,  hNew));  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	Context.report(JSError.make(t,  y0,  k,  j,  hNew));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	21	None	replace
303	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
304	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
305	[BUG]  [BUGGY]  int  k  =  stages.length  -  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  stages.length  -  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  stages.length  -  1;	  int    k    =    y0.length    -    1;    	non-compiled	[CE]  ';'  expected	30	None	replace
306	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
307	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
308	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  error;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  /  error;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    error;    	non-compiled	[CE]  ';'  expected	84	None	replace
309	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  stepSize;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  stepSize;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  +  stepSize;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    error;    	non-compiled	[CE]  ';'  expected	84	None	replace
310	[BUG]  [BUGGY]  int  k  =(y0.length  -  1)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  -  1)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  -  1)*  yDotK[0];	  int    k    =(y0.length    *    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	65	None	replace
311	[BUG]  [BUGGY]  double  k  =(j  <  y0.length)?  2  :  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  <  y0.length)?  2  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  <  y0.length)?  2  :  0;	  double    k    =(j    <    y0.length)?    0    :    0;    	non-compiled	[CE]  ';'  expected	68	None	replace
312	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	91	None	replace
313	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	91	None	replace
314	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
315	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  1;  k  <  stage.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
316	[BUG]  [BUGGY]  double  k  =  j.length  -  stages;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  j.length  -  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  j.length  -  stages;	  double    k    =    j.length;    	non-compiled	[CE]  ';'  expected	40	None	replace
317	[BUG]  [BUGGY]  if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
318	[BUG]  [BUGGY]  if(stepSize  <  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  <  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  <  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
319	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
320	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
321	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  error;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1]  +  error;	  double    sum    =    a[k-1][0]    *    yDotK[1];    	non-compiled	[CE]  ';'  expected	23	None	replace
322	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
323	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	12	None	replace
324	[BUG]  [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
325	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
326	[BUG]  [BUGGY]  if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
327	[BUG]  [BUGGY]  char  k  =  j  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  char  k  =  j  +  1;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	char  k  =  j  +  1;	  char    k    =    y0.length;    	non-compiled	[CE]  ';'  expected	31	None	replace
328	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
329	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
330	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
331	[BUG]  [BUGGY]  int  k  =(stages.length  +  2)*  stages[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages.length  +  2)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages.length  +  2)*  stages[0];	  int    k    =(y0.length    +    2)*    stages[0];    	non-compiled	[CE]  ';'  expected	45	None	replace
332	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  *  2);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  *  2);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  *  2);	  double    k    =    Math.abs(y0.length    -    2);    	non-compiled	[CE]  ';'  expected	10	None	replace
333	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
334	[BUG]  [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
335	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j].doubleValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[1][j].doubleValue();  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[1][j].doubleValue();	  double    sum    =    a[y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	32	None	replace
336	[BUG]  [BUGGY]  double  sum  =  a[y0.length-2][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-2][0]  *  yDotK[1][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-2][0]  *  yDotK[1][j];	  double    sum    =    a[y0.length-1][0]    *    yDotK[1][j];    	non-compiled	[CE]  ';'  expected	32	None	replace
337	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  -  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  -  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  -  1;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1;    	non-compiled	[CE]  ';'  expected	22	None	replace
338	[BUG]  [BUGGY]  if(stepSize  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
339	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
340	[BUG]  [BUGGY]  int  k  =(stages  +  2)*  yDotK[1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages  +  2)*  yDotK[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages  +  2)*  yDotK[1];	  int    k    =(y0.length    +    2)*    yDotK[1];    	non-compiled	[CE]  ';'  expected	44	None	replace
341	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
342	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  break;  }	  if(stepSize!=    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	94	None	replace
343	[BUG]  [BUGGY]  int  k  =(j  +  1)*  stage.length;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)*  stage.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)*  stage.length;	  int    k    =(j    +    1)*    yDotK[1];    	non-compiled	[CE]  ';'  expected	25	None	replace
344	[BUG]  [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  firstTime)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
345	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  -  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[1][j]  -  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[1][j]  -  1;	  double    sum    =    a[k-1][0]    *    yDotK[1][j]    +    1;    	non-compiled	[CE]  ';'  expected	50	None	replace
346	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
347	[BUG]  [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
348	[BUG]  [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
349	[BUG]  [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)return;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
350	[BUG]  [BUGGY]  int  k  =(stageSize  +  1)*  y0.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stageSize  +  1)*  y0.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stageSize  +  1)*  y0.length;	  int    k    =(y0.length    +    1)*    stageSize;    	non-compiled	[CE]  ';'  expected	48	None	replace
351	[BUG]  [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
352	[BUG]  [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
353	[BUG]  [BUGGY]  if(x!=  null)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  for(int  k  =  0;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
354	[BUG]  [BUGGY]  int  k  =(stages.length  +  1)/  stages[0];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages.length  +  1)/  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages.length  +  1)/  stages[0];	  int    k    =(y0.length    +    1)/    stages[0];    	non-compiled	[CE]  ';'  expected	1	None	replace
355	[BUG]  [BUGGY]  int  k  =(int)(y0.length  /  2)*  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(int)(y0.length  /  2)*  yDotK[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(int)(y0.length  /  2)*  yDotK[0];	  int    k    =(int)(y0.length    +    2)*    yDotK[0];    	non-compiled	[CE]  ';'  expected	82	None	replace
356	[BUG]  [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
357	[BUG]  [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
358	[BUG]  [BUGGY]  if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	88	None	replace
359	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
360	[BUG]  [BUGGY]  if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  stepSize)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
361	[BUG]  [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  Step.MIN_VALUE)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  return;  }	  if(j    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
362	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stage);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  AssertionError  t  =  new  AssertionError(t,  stage);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	AssertionError  t  =  new  AssertionError(t,  stage);	  AssertionError    t    =    new    AssertionError(t,    error);    	non-compiled	[CE]  ';'  expected	42	None	replace
363	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  stepSize;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  stepSize;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  +  stepSize;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
364	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  error;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  error;	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    error;    	non-compiled	[CE]  ';'  expected	78	None	replace
365	[BUG]  [BUGGY]  int  k  =(stageSize  +  1)/  y0.length;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stageSize  +  1)/  y0.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stageSize  +  1)/  y0.length;	  int    k    =(y0.length    +    1)/    stageSize;    	non-compiled	[CE]  ';'  expected	3	None	replace
366	[BUG]  [BUGGY]  double  k  =  1)  {  yDotK[1]  =  yTmp;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  1)  {  yDotK[1]  =  yTmp;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  1)  {  yDotK[1]  =  yTmp;	  double    k    =    1)    {    yDotK[1]    =    j;    	non-compiled	[CE]  ';'  expected	93	None	replace
367	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  -  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][j]  -  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][j]  -  1;	  double    sum    =    a[k-1][0]    *    yDotK[0][j]    +    2;    	non-compiled	[CE]  ';'  expected	49	None	replace
368	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(stepSize    <    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
369	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][2]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][2]  *  yDotK[0][j];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][2]  *  yDotK[0][j];	  double    sum    =    a[y0.length-1][1]    *    yDotK[0][j];    	non-compiled	[CE]  ';'  expected	35	None	replace
370	[BUG]  [BUGGY]  int  k  =(stages.length  +  1)*  stages[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages.length  +  1)*  stages[0];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages.length  +  1)*  stages[0];	  int    k    =(y0.length    +    1)*    stages[0];    	non-compiled	[CE]  ';'  expected	47	None	replace
371	[BUG]  [BUGGY]  int  k  =(y0.length  +  1)*  stages[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(y0.length  +  1)*  stages[j];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(y0.length  +  1)*  stages[j];	  int    k    =(y0.length    +    1)*    stages[0];    	non-compiled	[CE]  ';'  expected	47	None	replace
372	[BUG]  [BUGGY]  double  k  =  Math.abs(stepSize  -  j);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(stepSize  -  j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(stepSize  -  j);	  double    k    =    Math.abs(stepSize);    	non-compiled	[CE]  ';'  expected	99	None	replace
373	[BUG]  [BUGGY]  double  k  =  Math.abs(stepSize  +  j);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(stepSize  +  j);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(stepSize  +  j);	  double    k    =    Math.abs(stepSize);    	non-compiled	[CE]  ';'  expected	99	None	replace
374	[BUG]  [BUGGY]  double  k  =  t.length  -  stages.length;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  t.length  -  stages.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  t.length  -  stages.length;	  double    k    =    t.length;    	non-compiled	[CE]  ';'  expected	41	None	replace
375	[BUG]  [BUGGY]  int  k  =(stages  +  1)*  stages[1];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(stages  +  1)*  stages[1];  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(stages  +  1)*  stages[1];	  int    k    =(y0.length    +    1)*    stages[1];    	non-compiled	[CE]  ';'  expected	26	None	replace
376	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y.length;  ++k)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
377	[BUG]  [BUGGY]  if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  2)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
378	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    2)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
379	[BUG]  [BUGGY]  int  stepSize  =  stages;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  stepSize  =  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  stepSize  =  stages;	  int    stepSize    =    hNew;    	non-compiled	[CE]  ';'  expected	20	None	replace
380	[BUG]  [BUGGY]  double  k  =(j  <  1)?  0  :  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =(j  <  1)?  0  :  0;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =(j  <  1)?  0  :  0;	  double    k    =(j    ==    0)?    0    :    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
381	[BUG]  [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  /  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][1]  *  yDotK[0][j]  /  1;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][1]  *  yDotK[0][j]  /  1;	  double    sum    =    a[k-1][1]    *    yDotK[0][j]    +    1;    	non-compiled	[CE]  ';'  expected	34	None	replace
382	[BUG]  [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  firstTime)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
383	[BUG]  [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize!=  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
384	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
385	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
386	[BUG]  [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	for(int  k  =  2;  k  <  y0.length;  ++k)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(filterNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
387	[BUG]  [BUGGY]  int  k  =  1  <  <  stageSize;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1  <  <  stageSize;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1  <  <  stageSize;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
388	[BUG]  [BUGGY]  int  k  =  1  <  <  stages;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =  1  <  <  stages;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =  1  <  <  stages;	  int    k    =    1;    	non-compiled	[CE]  ';'  expected	85	None	replace
389	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.0;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.0;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.0;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
390	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.5;  ++k)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.5;  ++k)  {  return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  0.5;  ++k)  {  return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    0.length;    ++k)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
391	[BUG]  [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  Step.MIN_VALUE)  {  if(j  ==  0)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
392	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
393	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(j  ==  0)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(j  ==  0)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(j    ==    0)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
394	[BUG]  [BUGGY]  double  k  =  Math.abs(y0.length  -  1  +  stages);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(y0.length  -  1  +  stages);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(y0.length  -  1  +  stages);	  double    k    =    Math.abs(y0.length    -    1);    	non-compiled	[CE]  ';'  expected	7	None	replace
395	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stepSize;  ++k)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stepSize;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
396	[BUG]  [BUGGY]  double  k  =  Math.abs(steps.length);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  k  =  Math.abs(steps.length);  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  k  =  Math.abs(steps.length);	  double    k    =    Math.abs(stages.length);    	non-compiled	[CE]  ';'  expected	98	None	replace
397	[BUG]  [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[k-1][0]  *  yDotK[0][1]  /  1];	  double    sum    =    a[k-1][0]    *    yDotK[0][1]    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
398	[BUG]  [BUGGY]  int  k  =(j  +  1)/  stage.length;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  int  k  =(j  +  1)/  stage.length;  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	int  k  =(j  +  1)/  stage.length;	  int    k    =(j    +    1)/    yDotK[0];    	non-compiled	[CE]  ';'  expected	2	None	replace
399	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  error;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  error;  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][0]  *  yDotK[0][1]  +  error;	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
400	[BUG]  [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yDotK[0][1];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  double  sum  =  a[y0.length-1][1]  *  yDotK[0][1];  [BUGGY]      for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	double  sum  =  a[y0.length-1][1]  *  yDotK[0][1];	  double    sum    =    a[y0.length-1][0]    *    yDotK[0][1];    	non-compiled	[CE]  ';'  expected	24	None	replace
401	[BUG]  [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
402	[BUG]  [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x.length  ==  1)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
403	[BUG]  [BUGGY]  if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(x!=  null)  {  for(int  k  =  1;  k  <  x.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    x.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
404	[BUG]  [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)return;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  1)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextIsLast)return;  }	  if(stepSize    ==    1)    {    for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
405	[BUG]  [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {      [BUGGY]  if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	if(stepSize  ==  2)  {  for(int  k  =  0;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(stepSize    ==    1)    {    for(int    k    =    0;    k    <    stage.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
