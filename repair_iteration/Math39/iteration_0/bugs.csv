bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] for (int i = 0; i < scale.length; ++i) { [FE] AssertionError testTooLargeFirstStep [CONTEXT] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [BUGGY] for (int i = 0; i < scale.length; ++i) { [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [BUGGY] [BUGGY] for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	
3	[BUG] [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); [FE] AssertionError testTooLargeFirstStep [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); [BUGGY] } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [BUGGY] [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	
5	[BUG] [BUGGY] setEquations(equations); [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); [BUGGY] setEquations(equations); [BUGGY] final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	195	195	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); [BUGGY] [BUGGY] setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	195	195	1	add	
7	[BUG] [BUGGY] final boolean forward = t > equations.getTime(); [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); [BUGGY] final boolean forward = t > equations.getTime(); [BUGGY]   final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	196	196	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); [BUGGY] [BUGGY] final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	196	196	1	add	
9	[BUG] [BUGGY] final double[] y0= equations.getCompleteState(); [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  [BUGGY] final double[] y0= equations.getCompleteState(); [BUGGY] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	199	199	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  [BUGGY] [BUGGY] final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	199	199	1	add	
11	[BUG] [BUGGY] final double[] y = y0.clone(); [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); [BUGGY] final double[] y = y0.clone(); [BUGGY] final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	200	200	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); [BUGGY] [BUGGY] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	200	200	1	add	
13	[BUG] [BUGGY] final int stages = c.length + 1; [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); [BUGGY] final int stages = c.length + 1; [BUGGY] final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	201	201	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); [BUGGY] [BUGGY] final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	201	201	1	add	
15	[BUG] [BUGGY] final double[][] yDotK = new double[stages][y.length]; [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; [BUGGY] final double[][] yDotK = new double[stages][y.length]; [BUGGY] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	202	202	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; [BUGGY] [BUGGY] final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	202	202	1	add	
17	[BUG] [BUGGY] final double[] yTmp= y0.clone(); [FE] AssertionError testTooLargeFirstStep [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; [BUGGY] final double[] yTmp= y0.clone(); [BUGGY] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	203	203	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; [BUGGY] [BUGGY] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	203	203	1	add	
19	[BUG] [BUGGY] final double[] yDotTmp = new double[y.length]; [FE] AssertionError testTooLargeFirstStep [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); [BUGGY] final double[] yDotTmp = new double[y.length]; [BUGGY]   final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	204	204	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testTooLargeFirstStep [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); [BUGGY] [BUGGY] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	204	204	1	add	
